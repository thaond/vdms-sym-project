//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 8/6/2010 3:47:53 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using VDMS.Provider;

namespace VDMS.II.Linq
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "VDMS")]
    [ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
    public partial class PartDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertAccessory(VDMS.II.Entity.Accessory instance);
        partial void UpdateAccessory(VDMS.II.Entity.Accessory instance);
        partial void DeleteAccessory(VDMS.II.Entity.Accessory instance);
        partial void InsertAccessoryType(VDMS.II.Entity.AccessoryType instance);
        partial void UpdateAccessoryType(VDMS.II.Entity.AccessoryType instance);
        partial void DeleteAccessoryType(VDMS.II.Entity.AccessoryType instance);
        partial void InsertCategory(VDMS.II.Entity.Category instance);
        partial void UpdateCategory(VDMS.II.Entity.Category instance);
        partial void DeleteCategory(VDMS.II.Entity.Category instance);
        partial void InsertContact(VDMS.II.Entity.Contact instance);
        partial void UpdateContact(VDMS.II.Entity.Contact instance);
        partial void DeleteContact(VDMS.II.Entity.Contact instance);
        partial void InsertCustomer(VDMS.II.Entity.Customer instance);
        partial void UpdateCustomer(VDMS.II.Entity.Customer instance);
        partial void DeleteCustomer(VDMS.II.Entity.Customer instance);
        partial void InsertInventory(VDMS.II.Entity.Inventory instance);
        partial void UpdateInventory(VDMS.II.Entity.Inventory instance);
        partial void DeleteInventory(VDMS.II.Entity.Inventory instance);
        partial void InsertNGFormHeader(VDMS.II.Entity.NGFormHeader instance);
        partial void UpdateNGFormHeader(VDMS.II.Entity.NGFormHeader instance);
        partial void DeleteNGFormHeader(VDMS.II.Entity.NGFormHeader instance);
        partial void InsertOrderDetail(VDMS.II.Entity.OrderDetail instance);
        partial void UpdateOrderDetail(VDMS.II.Entity.OrderDetail instance);
        partial void DeleteOrderDetail(VDMS.II.Entity.OrderDetail instance);
        partial void InsertPartInfo(VDMS.II.Entity.PartInfo instance);
        partial void UpdatePartInfo(VDMS.II.Entity.PartInfo instance);
        partial void DeletePartInfo(VDMS.II.Entity.PartInfo instance);
        partial void InsertPartSafety(VDMS.II.Entity.PartSafety instance);
        partial void UpdatePartSafety(VDMS.II.Entity.PartSafety instance);
        partial void DeletePartSafety(VDMS.II.Entity.PartSafety instance);
        partial void InsertReceiveDetail(VDMS.II.Entity.ReceiveDetail instance);
        partial void UpdateReceiveDetail(VDMS.II.Entity.ReceiveDetail instance);
        partial void DeleteReceiveDetail(VDMS.II.Entity.ReceiveDetail instance);
        partial void InsertReceiveHeader(VDMS.II.Entity.ReceiveHeader instance);
        partial void UpdateReceiveHeader(VDMS.II.Entity.ReceiveHeader instance);
        partial void DeleteReceiveHeader(VDMS.II.Entity.ReceiveHeader instance);
        partial void InsertSalesDetail(VDMS.II.Entity.SalesDetail instance);
        partial void UpdateSalesDetail(VDMS.II.Entity.SalesDetail instance);
        partial void DeleteSalesDetail(VDMS.II.Entity.SalesDetail instance);
        partial void InsertSalesHeader(VDMS.II.Entity.SalesHeader instance);
        partial void UpdateSalesHeader(VDMS.II.Entity.SalesHeader instance);
        partial void DeleteSalesHeader(VDMS.II.Entity.SalesHeader instance);
        partial void InsertSystemData(VDMS.II.Entity.SystemData instance);
        partial void UpdateSystemData(VDMS.II.Entity.SystemData instance);
        partial void DeleteSystemData(VDMS.II.Entity.SystemData instance);
        partial void InsertTransactionHistory(VDMS.II.Entity.TransactionHistory instance);
        partial void UpdateTransactionHistory(VDMS.II.Entity.TransactionHistory instance);
        partial void DeleteTransactionHistory(VDMS.II.Entity.TransactionHistory instance);
        partial void InsertVendor(VDMS.II.Entity.Vendor instance);
        partial void UpdateVendor(VDMS.II.Entity.Vendor instance);
        partial void DeleteVendor(VDMS.II.Entity.Vendor instance);
        partial void InsertWarehouse(VDMS.II.Entity.Warehouse instance);
        partial void UpdateWarehouse(VDMS.II.Entity.Warehouse instance);
        partial void DeleteWarehouse(VDMS.II.Entity.Warehouse instance);
        partial void InsertTransferDetail(VDMS.II.Entity.TransferDetail instance);
        partial void UpdateTransferDetail(VDMS.II.Entity.TransferDetail instance);
        partial void DeleteTransferDetail(VDMS.II.Entity.TransferDetail instance);
        partial void InsertTransferHeader(VDMS.II.Entity.TransferHeader instance);
        partial void UpdateTransferHeader(VDMS.II.Entity.TransferHeader instance);
        partial void DeleteTransferHeader(VDMS.II.Entity.TransferHeader instance);
        partial void InsertInventoryLock(VDMS.II.Entity.InventoryLock instance);
        partial void UpdateInventoryLock(VDMS.II.Entity.InventoryLock instance);
        partial void DeleteInventoryLock(VDMS.II.Entity.InventoryLock instance);
        partial void InsertPartModel(VDMS.II.Entity.PartModel instance);
        partial void UpdatePartModel(VDMS.II.Entity.PartModel instance);
        partial void DeletePartModel(VDMS.II.Entity.PartModel instance);
        partial void InsertIOrderHeader(VDMS.II.Entity.IOrderHeader instance);
        partial void UpdateIOrderHeader(VDMS.II.Entity.IOrderHeader instance);
        partial void DeleteIOrderHeader(VDMS.II.Entity.IOrderHeader instance);
        partial void InsertIOrderDetail(VDMS.II.Entity.IOrderDetail instance);
        partial void UpdateIOrderDetail(VDMS.II.Entity.IOrderDetail instance);
        partial void DeleteIOrderDetail(VDMS.II.Entity.IOrderDetail instance);
        partial void InsertIShipping(VDMS.II.Entity.IShipping instance);
        partial void UpdateIShipping(VDMS.II.Entity.IShipping instance);
        partial void DeleteIShipping(VDMS.II.Entity.IShipping instance);
        partial void InsertFavorite(VDMS.II.Entity.Favorite instance);
        partial void UpdateFavorite(VDMS.II.Entity.Favorite instance);
        partial void DeleteFavorite(VDMS.II.Entity.Favorite instance);
        partial void InsertDealer(VDMS.II.Entity.Dealer instance);
        partial void UpdateDealer(VDMS.II.Entity.Dealer instance);
        partial void DeleteDealer(VDMS.II.Entity.Dealer instance);
        partial void InsertNGFormDetail(VDMS.II.Entity.NGFormDetail instance);
        partial void UpdateNGFormDetail(VDMS.II.Entity.NGFormDetail instance);
        partial void DeleteNGFormDetail(VDMS.II.Entity.NGFormDetail instance);
        partial void InsertCycleCountHeader(VDMS.II.Entity.CycleCountHeader instance);
        partial void UpdateCycleCountHeader(VDMS.II.Entity.CycleCountHeader instance);
        partial void DeleteCycleCountHeader(VDMS.II.Entity.CycleCountHeader instance);
        partial void InsertCycleCountDetail(VDMS.II.Entity.CycleCountDetail instance);
        partial void UpdateCycleCountDetail(VDMS.II.Entity.CycleCountDetail instance);
        partial void DeleteCycleCountDetail(VDMS.II.Entity.CycleCountDetail instance);
        partial void InsertPart(VDMS.II.Entity.Part instance);
        partial void UpdatePart(VDMS.II.Entity.Part instance);
        partial void DeletePart(VDMS.II.Entity.Part instance);
        partial void InsertOrderHeader(VDMS.II.Entity.OrderHeader instance);
        partial void UpdateOrderHeader(VDMS.II.Entity.OrderHeader instance);
        partial void DeleteOrderHeader(VDMS.II.Entity.OrderHeader instance);
        partial void InsertVehicle(VDMS.II.Entity.Vehicle instance);
        partial void UpdateVehicle(VDMS.II.Entity.Vehicle instance);
        partial void DeleteVehicle(VDMS.II.Entity.Vehicle instance);
        partial void InsertPartSpecification(VDMS.II.Entity.PartSpecification instance);
        partial void UpdatePartSpecification(VDMS.II.Entity.PartSpecification instance);
        partial void DeletePartSpecification(VDMS.II.Entity.PartSpecification instance);
        partial void InsertV2PPartReplacement(VDMS.II.Entity.V2PPartReplacement instance);
        partial void UpdateV2PPartReplacement(VDMS.II.Entity.V2PPartReplacement instance);
        partial void DeleteV2PPartReplacement(VDMS.II.Entity.V2PPartReplacement instance);
        #endregion

        public PartDataContext()
            : base(VDMSProvider.ConnectionString, mappingSource)
            //base(@"User Id=vdms;Password=vdms;Server=vdms;Home=oraclient11g_home1;Unicode=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public PartDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public PartDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public PartDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public PartDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Accessory> Accessories
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Accessory>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.AccessoryType> AccessoryTypes
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.AccessoryType>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Category> Categories
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Category>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Contact> Contacts
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Contact>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Customer> Customers
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Customer>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Inventory> Inventories
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Inventory>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.NGFormHeader> NGFormHeaders
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.NGFormHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.OrderDetail> OrderDetails
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.OrderDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.PartInfo> PartInfos
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.PartInfo>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.PartSafety> PartSafeties
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.PartSafety>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.ReceiveDetail> ReceiveDetails
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.ReceiveDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.ReceiveHeader> ReceiveHeaders
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.ReceiveHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.SalesDetail> SalesDetails
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.SalesDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.SalesHeader> SalesHeaders
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.SalesHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.SystemData> SystemDatas
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.SystemData>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.TransactionHistory> TransactionHistories
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.TransactionHistory>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Vendor> Vendors
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Vendor>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Warehouse> Warehouses
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Warehouse>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.TransferDetail> TransferDetails
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.TransferDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.TransferHeader> TransferHeaders
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.TransferHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.InventoryLock> InventoryLocks
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.InventoryLock>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.PartModel> PartModels
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.PartModel>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.IOrderHeader> IOrderHeaders
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.IOrderHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.IOrderDetail> IOrderDetails
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.IOrderDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.IShipping> IShippings
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.IShipping>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Favorite> Favorites
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Favorite>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Dealer> Dealers
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Dealer>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.NGFormDetail> NGFormDetails
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.NGFormDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.CycleCountHeader> CycleCountHeaders
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.CycleCountHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.CycleCountDetail> CycleCountDetails
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.CycleCountDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Part> Parts
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Part>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.OrderHeader> OrderHeaders
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.OrderHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.Vehicle> Vehicles
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.Vehicle>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.PartSpecification> PartSpecifications
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.PartSpecification>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.II.Entity.V2PPartReplacement> V2PPartReplacements
        {
            get
            {
                return this.GetTable<VDMS.II.Entity.V2PPartReplacement>();
            }
        }
    }
}

namespace VDMS.II.Entity
{

    [Table(Name = @"VDMS.V2_P_ACCESSORY")]
    public partial class Accessory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _AccessoryId;

        private string _AccessoryCode;

        private string _EnglishName;

        private string _VietnamName;

        private string _DealerCode;

        private string _AccessoryTypeCode;

        private EntityRef<AccessoryType> _AccessoryType;

        private EntitySet<PartInfo> _PartInfos;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAccessoryIdChanging(long value);
        partial void OnAccessoryIdChanged();
        partial void OnAccessoryCodeChanging(string value);
        partial void OnAccessoryCodeChanged();
        partial void OnEnglishNameChanging(string value);
        partial void OnEnglishNameChanged();
        partial void OnVietnamNameChanging(string value);
        partial void OnVietnamNameChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnAccessoryTypeCodeChanging(string value);
        partial void OnAccessoryTypeCodeChanged();
        #endregion

        public Accessory()
        {
            this._AccessoryType = default(EntityRef<AccessoryType>);
            this._PartInfos = new EntitySet<PartInfo>(new Action<PartInfo>(this.attach_PartInfos), new Action<PartInfo>(this.detach_PartInfos));
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"ACCESSORY_ID", Storage = "_AccessoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long AccessoryId
        {
            get
            {
                return this._AccessoryId;
            }
            set
            {
                if (this._AccessoryId != value)
                {
                    this.OnAccessoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._AccessoryId = value;
                    this.SendPropertyChanged("AccessoryId");
                    this.OnAccessoryIdChanged();
                }
            }
        }

        [Column(Name = @"ACCESSORY_CODE", Storage = "_AccessoryCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string AccessoryCode
        {
            get
            {
                return this._AccessoryCode;
            }
            set
            {
                if (this._AccessoryCode != value)
                {
                    this.OnAccessoryCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AccessoryCode = value;
                    this.SendPropertyChanged("AccessoryCode");
                    this.OnAccessoryCodeChanged();
                }
            }
        }

        [Column(Name = @"ENGLISH_NAME", Storage = "_EnglishName", DbType = "NVARCHAR2(768)")]
        public string EnglishName
        {
            get
            {
                return this._EnglishName;
            }
            set
            {
                if (this._EnglishName != value)
                {
                    this.OnEnglishNameChanging(value);
                    this.SendPropertyChanging();
                    this._EnglishName = value;
                    this.SendPropertyChanged("EnglishName");
                    this.OnEnglishNameChanged();
                }
            }
        }

        [Column(Name = @"VIETNAM_NAME", Storage = "_VietnamName", DbType = "NVARCHAR2(768)")]
        public string VietnamName
        {
            get
            {
                return this._VietnamName;
            }
            set
            {
                if (this._VietnamName != value)
                {
                    this.OnVietnamNameChanging(value);
                    this.SendPropertyChanging();
                    this._VietnamName = value;
                    this.SendPropertyChanged("VietnamName");
                    this.OnVietnamNameChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"ACCESSORY_TYPE_CODE", Storage = "_AccessoryTypeCode", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string AccessoryTypeCode
        {
            get
            {
                return this._AccessoryTypeCode;
            }
            set
            {
                if (this._AccessoryTypeCode != value)
                {
                    if (this._AccessoryType.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAccessoryTypeCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AccessoryTypeCode = value;
                    this.SendPropertyChanged("AccessoryTypeCode");
                    this.OnAccessoryTypeCodeChanged();
                }
            }
        }

        [Association(Name = "AccessoryType_Accessory", Storage = "_AccessoryType", ThisKey = "AccessoryTypeCode", IsForeignKey = true)]
        public AccessoryType AccessoryType
        {
            get
            {
                return this._AccessoryType.Entity;
            }
            set
            {
                AccessoryType previousValue = this._AccessoryType.Entity;
                if ((previousValue != value) || (this._AccessoryType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._AccessoryType.Entity = null;
                        previousValue.Accessories.Remove(this);
                    }
                    this._AccessoryType.Entity = value;
                    if (value != null)
                    {
                        value.Accessories.Add(this);
                        this._AccessoryTypeCode = value.AccessoryTypeCode;
                    }
                    else
                    {
                        this._AccessoryTypeCode = default(string);
                    }
                    this.SendPropertyChanged("AccessoryType");
                }
            }
        }

        [Association(Name = "Accessory_PartInfo", Storage = "_PartInfos", OtherKey = "AccessoryId")]
        public EntitySet<PartInfo> PartInfos
        {
            get
            {
                return this._PartInfos;
            }
            set
            {
                this._PartInfos.Assign(value);
            }
        }

        [Association(Name = "Dealer_Accessory", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.Accessories.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.Accessories.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PartInfos(PartInfo entity)
        {
            this.SendPropertyChanging("PartInfos");
            entity.Accessory = this;
        }

        private void detach_PartInfos(PartInfo entity)
        {
            this.SendPropertyChanging("PartInfos");
            entity.Accessory = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_ACCESSORY_TYPE")]
    public partial class AccessoryType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _AccessoryTypeCode;

        private string _AccessoryTypeName;

        private EntitySet<Accessory> _Accessories;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAccessoryTypeCodeChanging(string value);
        partial void OnAccessoryTypeCodeChanged();
        partial void OnAccessoryTypeNameChanging(string value);
        partial void OnAccessoryTypeNameChanged();
        #endregion

        public AccessoryType()
        {
            this._Accessories = new EntitySet<Accessory>(new Action<Accessory>(this.attach_Accessories), new Action<Accessory>(this.detach_Accessories));
            OnCreated();
        }

        [Column(Name = @"ACCESSORY_TYPE_CODE", Storage = "_AccessoryTypeCode", CanBeNull = false, DbType = "CHAR(2) NOT NULL", IsPrimaryKey = true)]
        public string AccessoryTypeCode
        {
            get
            {
                return this._AccessoryTypeCode;
            }
            set
            {
                if (this._AccessoryTypeCode != value)
                {
                    this.OnAccessoryTypeCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AccessoryTypeCode = value;
                    this.SendPropertyChanged("AccessoryTypeCode");
                    this.OnAccessoryTypeCodeChanged();
                }
            }
        }

        [Column(Name = @"ACCESSORY_TYPE_NAME", Storage = "_AccessoryTypeName", CanBeNull = false, DbType = "NVARCHAR2(150) NOT NULL")]
        public string AccessoryTypeName
        {
            get
            {
                return this._AccessoryTypeName;
            }
            set
            {
                if (this._AccessoryTypeName != value)
                {
                    this.OnAccessoryTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._AccessoryTypeName = value;
                    this.SendPropertyChanged("AccessoryTypeName");
                    this.OnAccessoryTypeNameChanged();
                }
            }
        }

        [Association(Name = "AccessoryType_Accessory", Storage = "_Accessories", OtherKey = "AccessoryTypeCode")]
        public EntitySet<Accessory> Accessories
        {
            get
            {
                return this._Accessories;
            }
            set
            {
                this._Accessories.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Accessories(Accessory entity)
        {
            this.SendPropertyChanging("Accessories");
            entity.AccessoryType = this;
        }

        private void detach_Accessories(Accessory entity)
        {
            this.SendPropertyChanging("Accessories");
            entity.AccessoryType = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_CATEGORY")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CategoryId;

        private string _DealerCode;

        private string _Code;

        private string _Name;

        private EntitySet<PartInfo> _PartInfos;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(long value);
        partial void OnCategoryIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Category()
        {
            this._PartInfos = new EntitySet<PartInfo>(new Action<PartInfo>(this.attach_PartInfos), new Action<PartInfo>(this.detach_PartInfos));
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"CATEGORY_ID", Storage = "_CategoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"CODE", Storage = "_Code", CanBeNull = false, DbType = "CHAR(5) NOT NULL")]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(768) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Association(Name = "Category_PartInfo", Storage = "_PartInfos", OtherKey = "CategoryId")]
        public EntitySet<PartInfo> PartInfos
        {
            get
            {
                return this._PartInfos;
            }
            set
            {
                this._PartInfos.Assign(value);
            }
        }

        [Association(Name = "Dealer_Category", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.Categories.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.Categories.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PartInfos(PartInfo entity)
        {
            this.SendPropertyChanging("PartInfos");
            entity.Category = this;
        }

        private void detach_PartInfos(PartInfo entity)
        {
            this.SendPropertyChanging("PartInfos");
            entity.Category = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_CONTACT")]
    public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ContactId;

        private string _FullName;

        private string _Address;

        private string _Phone;

        private string _Email;

        private string _AdditionalInfo;

        private string _Fax;

        private string _Mobile;

        private EntitySet<Customer> _Customers;

        private EntitySet<Vendor> _Vendors;

        private EntitySet<Dealer> _Dealers;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContactIdChanging(long value);
        partial void OnContactIdChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnAdditionalInfoChanging(string value);
        partial void OnAdditionalInfoChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnMobileChanging(string value);
        partial void OnMobileChanged();
        #endregion

        public Contact()
        {
            this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
            this._Vendors = new EntitySet<Vendor>(new Action<Vendor>(this.attach_Vendors), new Action<Vendor>(this.detach_Vendors));
            this._Dealers = new EntitySet<Dealer>(new Action<Dealer>(this.attach_Dealers), new Action<Dealer>(this.detach_Dealers));
            OnCreated();
        }

        [Column(Name = @"CONTACT_ID", Storage = "_ContactId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ContactId
        {
            get
            {
                return this._ContactId;
            }
            set
            {
                if (this._ContactId != value)
                {
                    this.OnContactIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContactId = value;
                    this.SendPropertyChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }

        [Column(Name = @"FULL_NAME", Storage = "_FullName", DbType = "NVARCHAR2(150)")]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if (this._FullName != value)
                {
                    this.OnFullNameChanging(value);
                    this.SendPropertyChanging();
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }

        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "NVARCHAR2(765)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [Column(Name = @"PHONE", Storage = "_Phone", DbType = "VARCHAR2(20)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

        [Column(Name = @"EMAIL", Storage = "_Email", DbType = "VARCHAR2(255)")]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

        [Column(Name = @"ADDITIONAL_INFO", Storage = "_AdditionalInfo", DbType = "NVARCHAR2(765)")]
        public string AdditionalInfo
        {
            get
            {
                return this._AdditionalInfo;
            }
            set
            {
                if (this._AdditionalInfo != value)
                {
                    this.OnAdditionalInfoChanging(value);
                    this.SendPropertyChanging();
                    this._AdditionalInfo = value;
                    this.SendPropertyChanged("AdditionalInfo");
                    this.OnAdditionalInfoChanged();
                }
            }
        }

        [Column(Storage = "_Fax", DbType = "varchar2(20)")]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

        [Column(Storage = "_Mobile", DbType = "varchar2(20)")]
        public string Mobile
        {
            get
            {
                return this._Mobile;
            }
            set
            {
                if (this._Mobile != value)
                {
                    this.OnMobileChanging(value);
                    this.SendPropertyChanging();
                    this._Mobile = value;
                    this.SendPropertyChanged("Mobile");
                    this.OnMobileChanged();
                }
            }
        }

        [Association(Name = "Contact_Customer", Storage = "_Customers", OtherKey = "ContactId")]
        public EntitySet<Customer> Customers
        {
            get
            {
                return this._Customers;
            }
            set
            {
                this._Customers.Assign(value);
            }
        }

        [Association(Name = "Contact_Vendor", Storage = "_Vendors", OtherKey = "ContactId")]
        public EntitySet<Vendor> Vendors
        {
            get
            {
                return this._Vendors;
            }
            set
            {
                this._Vendors.Assign(value);
            }
        }

        [Association(Name = "Contact_Dealer", Storage = "_Dealers", OtherKey = "ContactId")]
        public EntitySet<Dealer> Dealers
        {
            get
            {
                return this._Dealers;
            }
            set
            {
                this._Dealers.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Customers(Customer entity)
        {
            this.SendPropertyChanging("Customers");
            entity.Contact = this;
        }

        private void detach_Customers(Customer entity)
        {
            this.SendPropertyChanging("Customers");
            entity.Contact = null;
        }

        private void attach_Vendors(Vendor entity)
        {
            this.SendPropertyChanging("Vendors");
            entity.Contact = this;
        }

        private void detach_Vendors(Vendor entity)
        {
            this.SendPropertyChanging("Vendors");
            entity.Contact = null;
        }

        private void attach_Dealers(Dealer entity)
        {
            this.SendPropertyChanging("Dealers");
            entity.Contact = this;
        }

        private void detach_Dealers(Dealer entity)
        {
            this.SendPropertyChanging("Dealers");
            entity.Contact = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_CUSTOMER")]
    public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CustomerId;

        private string _DealerCode;

        private System.Nullable<long> _ContactId;

        private string _Code;

        private string _Name;

        private string _VATCode;

        private EntityRef<Contact> _Contact;

        private EntitySet<SalesHeader> _SalesHeaders;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCustomerIdChanging(long value);
        partial void OnCustomerIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnContactIdChanging(System.Nullable<long> value);
        partial void OnContactIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnVATCodeChanging(string value);
        partial void OnVATCodeChanged();
        #endregion

        public Customer()
        {
            this._Contact = default(EntityRef<Contact>);
            this._SalesHeaders = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeaders), new Action<SalesHeader>(this.detach_SalesHeaders));
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"CONTACT_ID", Storage = "_ContactId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ContactId
        {
            get
            {
                return this._ContactId;
            }
            set
            {
                if (this._ContactId != value)
                {
                    if (this._Contact.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContactId = value;
                    this.SendPropertyChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }

        [Column(Name = @"CODE", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(765) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Name = @"V_A_T_Code", Storage = "_VATCode", DbType = "varchar2(30)")]
        public string VATCode
        {
            get
            {
                return this._VATCode;
            }
            set
            {
                if (this._VATCode != value)
                {
                    this.OnVATCodeChanging(value);
                    this.SendPropertyChanging();
                    this._VATCode = value;
                    this.SendPropertyChanged("VATCode");
                    this.OnVATCodeChanged();
                }
            }
        }

        [Association(Name = "Contact_Customer", Storage = "_Contact", ThisKey = "ContactId", IsForeignKey = true)]
        public Contact Contact
        {
            get
            {
                return this._Contact.Entity;
            }
            set
            {
                Contact previousValue = this._Contact.Entity;
                if ((previousValue != value) || (this._Contact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contact.Entity = null;
                        previousValue.Customers.Remove(this);
                    }
                    this._Contact.Entity = value;
                    if (value != null)
                    {
                        value.Customers.Add(this);
                        this._ContactId = value.ContactId;
                    }
                    else
                    {
                        this._ContactId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contact");
                }
            }
        }

        [Association(Name = "Customer_SalesHeader", Storage = "_SalesHeaders", OtherKey = "CustomerId")]
        public EntitySet<SalesHeader> SalesHeaders
        {
            get
            {
                return this._SalesHeaders;
            }
            set
            {
                this._SalesHeaders.Assign(value);
            }
        }

        [Association(Name = "Dealer_Customer", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.Customers.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.Customers.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SalesHeaders(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeaders");
            entity.Customer = this;
        }

        private void detach_SalesHeaders(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeaders");
            entity.Customer = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_INVENTORY")]
    public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _InventoryId;

        private string _DealerCode;

        private System.Nullable<long> _WarehouseId;

        private long _PartInfoId;

        private int _Quantity;

        private int _Month;

        private int _Year;

        private EntityRef<PartInfo> _PartInfo;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnWarehouseIdChanging(System.Nullable<long> value);
        partial void OnWarehouseIdChanged();
        partial void OnPartInfoIdChanging(long value);
        partial void OnPartInfoIdChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnMonthChanging(int value);
        partial void OnMonthChanged();
        partial void OnYearChanging(int value);
        partial void OnYearChanged();
        #endregion

        public Inventory()
        {
            this._PartInfo = default(EntityRef<PartInfo>);
            this._Warehouse = default(EntityRef<Warehouse>);
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"INVENTORY_ID", Storage = "_InventoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long InventoryId
        {
            get
            {
                return this._InventoryId;
            }
            set
            {
                if (this._InventoryId != value)
                {
                    this.OnInventoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._InventoryId = value;
                    this.SendPropertyChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"WAREHOUSE_ID", Storage = "_WarehouseId", DbType = "NUMBER(10)")]
        public System.Nullable<long> WarehouseId
        {
            get
            {
                return this._WarehouseId;
            }
            set
            {
                if (this._WarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._WarehouseId = value;
                    this.SendPropertyChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"PART_INFO_ID", Storage = "_PartInfoId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long PartInfoId
        {
            get
            {
                return this._PartInfoId;
            }
            set
            {
                if (this._PartInfoId != value)
                {
                    if (this._PartInfo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPartInfoIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartInfoId = value;
                    this.SendPropertyChanged("PartInfoId");
                    this.OnPartInfoIdChanged();
                }
            }
        }

        [Column(Name = @"QUANTITY", Storage = "_Quantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

        [Column(Name = @"MONTH", Storage = "_Month", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int Month
        {
            get
            {
                return this._Month;
            }
            set
            {
                if (this._Month != value)
                {
                    this.OnMonthChanging(value);
                    this.SendPropertyChanging();
                    this._Month = value;
                    this.SendPropertyChanged("Month");
                    this.OnMonthChanged();
                }
            }
        }

        [Column(Name = @"YEAR", Storage = "_Year", CanBeNull = false, DbType = "NUMBER(5) NOT NULL")]
        public int Year
        {
            get
            {
                return this._Year;
            }
            set
            {
                if (this._Year != value)
                {
                    this.OnYearChanging(value);
                    this.SendPropertyChanging();
                    this._Year = value;
                    this.SendPropertyChanged("Year");
                    this.OnYearChanged();
                }
            }
        }

        [Association(Name = "PartInfo_Inventory", Storage = "_PartInfo", ThisKey = "PartInfoId", IsForeignKey = true)]
        public PartInfo PartInfo
        {
            get
            {
                return this._PartInfo.Entity;
            }
            set
            {
                PartInfo previousValue = this._PartInfo.Entity;
                if ((previousValue != value) || (this._PartInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PartInfo.Entity = null;
                        previousValue.Inventories.Remove(this);
                    }
                    this._PartInfo.Entity = value;
                    if (value != null)
                    {
                        value.Inventories.Add(this);
                        this._PartInfoId = value.PartInfoId;
                    }
                    else
                    {
                        this._PartInfoId = default(long);
                    }
                    this.SendPropertyChanged("PartInfo");
                }
            }
        }

        [Association(Name = "Warehouse_Inventory", Storage = "_Warehouse", ThisKey = "WarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.Inventories.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        value.Inventories.Add(this);
                        this._WarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._WarehouseId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

        [Association(Name = "Dealer_Inventory", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.Inventories.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.Inventories.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_N_G_FORM_HEADER")]
    public partial class NGFormHeader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _NGFormHeaderId;

        private string _DealerCode;

        private System.Nullable<long> _ReceiveHeaderId;

        private string _NotGoodNumber;

        private System.DateTime _CreatedDate;

        private System.Nullable<System.DateTime> _ApproveDate;

        private int _ApproveLevel;

        private string _Status;

        private string _NGType;

        private string _RewardNumber;

        private EntityRef<ReceiveHeader> _ReceiveHeader;

        private EntityRef<Dealer> _Dealer;

        private EntitySet<NGFormDetail> _NGFormDetails;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNGFormHeaderIdChanging(long value);
        partial void OnNGFormHeaderIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnReceiveHeaderIdChanging(System.Nullable<long> value);
        partial void OnReceiveHeaderIdChanged();
        partial void OnNotGoodNumberChanging(string value);
        partial void OnNotGoodNumberChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
        partial void OnApproveDateChanged();
        partial void OnApproveLevelChanging(int value);
        partial void OnApproveLevelChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnNGTypeChanging(string value);
        partial void OnNGTypeChanged();
        partial void OnRewardNumberChanging(string value);
        partial void OnRewardNumberChanged();
        #endregion

        public NGFormHeader()
        {
            this._ReceiveHeader = default(EntityRef<ReceiveHeader>);
            this._Dealer = default(EntityRef<Dealer>);
            this._NGFormDetails = new EntitySet<NGFormDetail>(new Action<NGFormDetail>(this.attach_NGFormDetails), new Action<NGFormDetail>(this.detach_NGFormDetails));
            OnCreated();
        }

        [Column(Name = @"N_G_FORM_HEADER_ID", Storage = "_NGFormHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long NGFormHeaderId
        {
            get
            {
                return this._NGFormHeaderId;
            }
            set
            {
                if (this._NGFormHeaderId != value)
                {
                    this.OnNGFormHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._NGFormHeaderId = value;
                    this.SendPropertyChanged("NGFormHeaderId");
                    this.OnNGFormHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"RECEIVE_HEADER_ID", Storage = "_ReceiveHeaderId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ReceiveHeaderId
        {
            get
            {
                return this._ReceiveHeaderId;
            }
            set
            {
                if (this._ReceiveHeaderId != value)
                {
                    if (this._ReceiveHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnReceiveHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiveHeaderId = value;
                    this.SendPropertyChanged("ReceiveHeaderId");
                    this.OnReceiveHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"NOT_GOOD_NUMBER", Storage = "_NotGoodNumber", DbType = "VARCHAR2(30)")]
        public string NotGoodNumber
        {
            get
            {
                return this._NotGoodNumber;
            }
            set
            {
                if (this._NotGoodNumber != value)
                {
                    this.OnNotGoodNumberChanging(value);
                    this.SendPropertyChanging();
                    this._NotGoodNumber = value;
                    this.SendPropertyChanged("NotGoodNumber");
                    this.OnNotGoodNumberChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"APPROVE_DATE", Storage = "_ApproveDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> ApproveDate
        {
            get
            {
                return this._ApproveDate;
            }
            set
            {
                if (this._ApproveDate != value)
                {
                    this.OnApproveDateChanging(value);
                    this.SendPropertyChanging();
                    this._ApproveDate = value;
                    this.SendPropertyChanged("ApproveDate");
                    this.OnApproveDateChanged();
                }
            }
        }

        [Column(Name = @"APPROVE_LEVEL", Storage = "_ApproveLevel", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int ApproveLevel
        {
            get
            {
                return this._ApproveLevel;
            }
            set
            {
                if (this._ApproveLevel != value)
                {
                    this.OnApproveLevelChanging(value);
                    this.SendPropertyChanging();
                    this._ApproveLevel = value;
                    this.SendPropertyChanged("ApproveLevel");
                    this.OnApproveLevelChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"N_G_TYPE", Storage = "_NGType", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string NGType
        {
            get
            {
                return this._NGType;
            }
            set
            {
                if (this._NGType != value)
                {
                    this.OnNGTypeChanging(value);
                    this.SendPropertyChanging();
                    this._NGType = value;
                    this.SendPropertyChanged("NGType");
                    this.OnNGTypeChanged();
                }
            }
        }

        [Column(Name = @"REWARD_NUMBER", Storage = "_RewardNumber", DbType = "varchar2(20)")]
        public string RewardNumber
        {
            get
            {
                return this._RewardNumber;
            }
            set
            {
                if (this._RewardNumber != value)
                {
                    this.OnRewardNumberChanging(value);
                    this.SendPropertyChanging();
                    this._RewardNumber = value;
                    this.SendPropertyChanged("RewardNumber");
                    this.OnRewardNumberChanged();
                }
            }
        }

        [Association(Name = "ReceiveHeader_NGFormHeader", Storage = "_ReceiveHeader", ThisKey = "ReceiveHeaderId", IsForeignKey = true)]
        public ReceiveHeader ReceiveHeader
        {
            get
            {
                return this._ReceiveHeader.Entity;
            }
            set
            {
                ReceiveHeader previousValue = this._ReceiveHeader.Entity;
                if ((previousValue != value) || (this._ReceiveHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ReceiveHeader.Entity = null;
                        previousValue.NGFormHeaders.Remove(this);
                    }
                    this._ReceiveHeader.Entity = value;
                    if (value != null)
                    {
                        value.NGFormHeaders.Add(this);
                        this._ReceiveHeaderId = value.ReceiveHeaderId;
                    }
                    else
                    {
                        this._ReceiveHeaderId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("ReceiveHeader");
                }
            }
        }

        [Association(Name = "Dealer_NGFormHeader", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.NGFormHeaders.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.NGFormHeaders.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        [Association(Name = "NGFormHeader_NGFormDetail", Storage = "_NGFormDetails", OtherKey = "NGFormHeaderId")]
        public EntitySet<NGFormDetail> NGFormDetails
        {
            get
            {
                return this._NGFormDetails;
            }
            set
            {
                this._NGFormDetails.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_NGFormDetails(NGFormDetail entity)
        {
            this.SendPropertyChanging("NGFormDetails");
            entity.NGFormHeader = this;
        }

        private void detach_NGFormDetails(NGFormDetail entity)
        {
            this.SendPropertyChanging("NGFormDetails");
            entity.NGFormHeader = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_ORDER_DETAIL")]
    public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _OrderDetailId;

        private long _OrderHeaderId;

        private int _LineNumber;

        private string _PartCode;

        private int _OrderQuantity;

        private int _QuotationQuantity;

        private int _UnitPrice;

        private string _ModifyFlag;

        private string _Status;

        private string _Note;

        private string _PartCodeHistory;

        private System.Nullable<int> _DelivaryQuantity;

        private System.Nullable<int> _OOSQuantity;

        private System.Nullable<int> _OriginalQty;

        private System.Nullable<char> _Quo_Status;

        private EntityRef<OrderHeader> _OrderHeader;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderDetailIdChanging(long value);
        partial void OnOrderDetailIdChanged();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnLineNumberChanging(int value);
        partial void OnLineNumberChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnOrderQuantityChanging(int value);
        partial void OnOrderQuantityChanged();
        partial void OnQuotationQuantityChanging(int value);
        partial void OnQuotationQuantityChanged();
        partial void OnUnitPriceChanging(int value);
        partial void OnUnitPriceChanged();
        partial void OnModifyFlagChanging(string value);
        partial void OnModifyFlagChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnPartCodeHistoryChanging(string value);
        partial void OnPartCodeHistoryChanged();
        partial void OnDelivaryQuantityChanging(System.Nullable<int> value);
        partial void OnDelivaryQuantityChanged();
        partial void OnOOSQuantityChanging(System.Nullable<int> value);
        partial void OnOOSQuantityChanged();
        partial void OnOriginalQtyChanging(System.Nullable<int> value);
        partial void OnOriginalQtyChanged();
        partial void OnQuo_StatusChanging(System.Nullable<char> value);
        partial void OnQuo_StatusChanged();
        #endregion

        public OrderDetail()
        {
            this._OrderHeader = default(EntityRef<OrderHeader>);
            OnCreated();
        }

        [Column(Name = @"ORDER_DETAIL_ID", Storage = "_OrderDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long OrderDetailId
        {
            get
            {
                return this._OrderDetailId;
            }
            set
            {
                if (this._OrderDetailId != value)
                {
                    this.OnOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDetailId = value;
                    this.SendPropertyChanged("OrderDetailId");
                    this.OnOrderDetailIdChanged();
                }
            }
        }

        [Column(Name = @"ORDER_HEADER_ID", Storage = "_OrderHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    if (this._OrderHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"LINE_NUMBER", Storage = "_LineNumber", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int LineNumber
        {
            get
            {
                return this._LineNumber;
            }
            set
            {
                if (this._LineNumber != value)
                {
                    this.OnLineNumberChanging(value);
                    this.SendPropertyChanging();
                    this._LineNumber = value;
                    this.SendPropertyChanged("LineNumber");
                    this.OnLineNumberChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"ORDER_QUANTITY", Storage = "_OrderQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int OrderQuantity
        {
            get
            {
                return this._OrderQuantity;
            }
            set
            {
                if (this._OrderQuantity != value)
                {
                    this.OnOrderQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._OrderQuantity = value;
                    this.SendPropertyChanged("OrderQuantity");
                    this.OnOrderQuantityChanged();
                }
            }
        }

        [Column(Name = @"QUOTATION_QUANTITY", Storage = "_QuotationQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int QuotationQuantity
        {
            get
            {
                return this._QuotationQuantity;
            }
            set
            {
                if (this._QuotationQuantity != value)
                {
                    this.OnQuotationQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._QuotationQuantity = value;
                    this.SendPropertyChanged("QuotationQuantity");
                    this.OnQuotationQuantityChanged();
                }
            }
        }

        [Column(Name = @"UNIT_PRICE", Storage = "_UnitPrice", CanBeNull = false, DbType = "NUMBER(18) NOT NULL")]
        public int UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging();
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        [Column(Name = @"MODIFY_FLAG", Storage = "_ModifyFlag", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string ModifyFlag
        {
            get
            {
                return this._ModifyFlag;
            }
            set
            {
                if (this._ModifyFlag != value)
                {
                    this.OnModifyFlagChanging(value);
                    this.SendPropertyChanging();
                    this._ModifyFlag = value;
                    this.SendPropertyChanged("ModifyFlag");
                    this.OnModifyFlagChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", DbType = "CHAR(1)")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"NOTE", Storage = "_Note", DbType = "VARCHAR2(250)")]
        public string Note
        {
            get
            {
                return this._Note;
            }
            set
            {
                if (this._Note != value)
                {
                    this.OnNoteChanging(value);
                    this.SendPropertyChanging();
                    this._Note = value;
                    this.SendPropertyChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE_HISTORY", Storage = "_PartCodeHistory", DbType = "VARCHAR2(1000)")]
        public string PartCodeHistory
        {
            get
            {
                return this._PartCodeHistory;
            }
            set
            {
                if (this._PartCodeHistory != value)
                {
                    this.OnPartCodeHistoryChanging(value);
                    this.SendPropertyChanging();
                    this._PartCodeHistory = value;
                    this.SendPropertyChanged("PartCodeHistory");
                    this.OnPartCodeHistoryChanged();
                }
            }
        }

        [Column(Name = @"DELIVERY_QUANTITY", Storage = "_DelivaryQuantity", DbType = "NUMBER(10)")]
        public System.Nullable<int> DelivaryQuantity
        {
            get
            {
                return this._DelivaryQuantity;
            }
            set
            {
                if (this._DelivaryQuantity != value)
                {
                    this.OnDelivaryQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._DelivaryQuantity = value;
                    this.SendPropertyChanged("DelivaryQuantity");
                    this.OnDelivaryQuantityChanged();
                }
            }
        }
        
        [Column(Name = @"OOS_QUANTITY", Storage = "_OOSQuantity", DbType = "NUMBER(10)")]
        public System.Nullable<int> OOSQuantity
        {
            get
            {
                return this._OOSQuantity;
            }
            set
            {
                if (this._OOSQuantity != value)
                {
                    this.OnOOSQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._OOSQuantity = value;
                    this.SendPropertyChanged("OOSQuantity");
                    this.OnOOSQuantityChanged();
                }
            }
        }
        [Column(Name = @"ORIGINALQTY", Storage = "_OriginalQty", DbType = "NUMBER(38)")]
        public System.Nullable<int> OriginalQty
        {
            get
            {
                return this._OriginalQty;
            }
            set
            {
                if (this._OriginalQty != value)
                {
                    this.OnOriginalQtyChanging(value);
                    this.SendPropertyChanging();
                    this._OriginalQty = value;
                    this.SendPropertyChanged("OriginalQty");
                    this.OnOriginalQtyChanged();
                }
            }
        }

        [Column(Name = @"QUO_STATUS", Storage = "_Quo_Status", DbType = "CHAR(1)")]
        public System.Nullable<char> Quo_Status
        {
            get
            {
                return this._Quo_Status;
            }
            set
            {
                if (this._Quo_Status != value)
                {
                    this.OnQuo_StatusChanging(value);
                    this.SendPropertyChanging();
                    this._Quo_Status = value;
                    this.SendPropertyChanged("Quo_Status");
                    this.OnQuo_StatusChanged();
                }
            }
        }


        [Association(Name = "OrderHeader_OrderDetail", Storage = "_OrderHeader", ThisKey = "OrderHeaderId", IsForeignKey = true)]
        public OrderHeader OrderHeader
        {
            get
            {
                return this._OrderHeader.Entity;
            }
            set
            {
                OrderHeader previousValue = this._OrderHeader.Entity;
                if ((previousValue != value) || (this._OrderHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._OrderHeader.Entity = null;
                        previousValue.OrderDetails.Remove(this);
                    }
                    this._OrderHeader.Entity = value;
                    if (value != null)
                    {
                        value.OrderDetails.Add(this);
                        this._OrderHeaderId = value.OrderHeaderId;
                    }
                    else
                    {
                        this._OrderHeaderId = default(long);
                    }
                    this.SendPropertyChanged("OrderHeader");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_PART_INFO")]
    public partial class PartInfo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _PartInfoId;

        private string _DealerCode;

        private System.Nullable<long> _CategoryId;

        private string _PartCode;

        private System.Nullable<long> _AccessoryId;

        private string _PartType;

        private System.Nullable<int> _Price;

        private bool _Deleted;

        private EntityRef<Accessory> _Accessory;

        private EntityRef<Category> _Category;

        private EntitySet<Inventory> _Inventories;

        private EntitySet<PartSafety> _PartSafeties;

        private EntitySet<SalesDetail> _SalesDetails;

        private EntitySet<TransactionHistory> _TransactionHistories;

        private EntitySet<TransferDetail> _TransferDetails;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPartInfoIdChanging(long value);
        partial void OnPartInfoIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnCategoryIdChanging(System.Nullable<long> value);
        partial void OnCategoryIdChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnAccessoryIdChanging(System.Nullable<long> value);
        partial void OnAccessoryIdChanged();
        partial void OnPartTypeChanging(string value);
        partial void OnPartTypeChanged();
        partial void OnPriceChanging(System.Nullable<int> value);
        partial void OnPriceChanged();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        #endregion

        public PartInfo()
        {
            this._Accessory = default(EntityRef<Accessory>);
            this._Category = default(EntityRef<Category>);
            this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
            this._PartSafeties = new EntitySet<PartSafety>(new Action<PartSafety>(this.attach_PartSafeties), new Action<PartSafety>(this.detach_PartSafeties));
            this._SalesDetails = new EntitySet<SalesDetail>(new Action<SalesDetail>(this.attach_SalesDetails), new Action<SalesDetail>(this.detach_SalesDetails));
            this._TransactionHistories = new EntitySet<TransactionHistory>(new Action<TransactionHistory>(this.attach_TransactionHistories), new Action<TransactionHistory>(this.detach_TransactionHistories));
            this._TransferDetails = new EntitySet<TransferDetail>(new Action<TransferDetail>(this.attach_TransferDetails), new Action<TransferDetail>(this.detach_TransferDetails));
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"PART_INFO_ID", Storage = "_PartInfoId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long PartInfoId
        {
            get
            {
                return this._PartInfoId;
            }
            set
            {
                if (this._PartInfoId != value)
                {
                    this.OnPartInfoIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartInfoId = value;
                    this.SendPropertyChanged("PartInfoId");
                    this.OnPartInfoIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"CATEGORY_ID", Storage = "_CategoryId", DbType = "NUMBER(10)")]
        public System.Nullable<long> CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"ACCESSORY_ID", Storage = "_AccessoryId", DbType = "NUMBER(10)")]
        public System.Nullable<long> AccessoryId
        {
            get
            {
                return this._AccessoryId;
            }
            set
            {
                if (this._AccessoryId != value)
                {
                    if (this._Accessory.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAccessoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._AccessoryId = value;
                    this.SendPropertyChanged("AccessoryId");
                    this.OnAccessoryIdChanged();
                }
            }
        }

        [Column(Name = @"PART_TYPE", Storage = "_PartType", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string PartType
        {
            get
            {
                return this._PartType;
            }
            set
            {
                if (this._PartType != value)
                {
                    this.OnPartTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PartType = value;
                    this.SendPropertyChanged("PartType");
                    this.OnPartTypeChanged();
                }
            }
        }

        [Column(Name = @"PRICE", Storage = "_Price", DbType = "NUMBER(19)")]
        public System.Nullable<int> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

        [Column(Storage = "_Deleted", CanBeNull = false, DbType = "NUMBER(1) not null")]
        public bool Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

        [Association(Name = "Accessory_PartInfo", Storage = "_Accessory", ThisKey = "AccessoryId", IsForeignKey = true)]
        public Accessory Accessory
        {
            get
            {
                return this._Accessory.Entity;
            }
            set
            {
                Accessory previousValue = this._Accessory.Entity;
                if ((previousValue != value) || (this._Accessory.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Accessory.Entity = null;
                        previousValue.PartInfos.Remove(this);
                    }
                    this._Accessory.Entity = value;
                    if (value != null)
                    {
                        value.PartInfos.Add(this);
                        this._AccessoryId = value.AccessoryId;
                    }
                    else
                    {
                        this._AccessoryId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Accessory");
                }
            }
        }

        [Association(Name = "Category_PartInfo", Storage = "_Category", ThisKey = "CategoryId", IsForeignKey = true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if ((previousValue != value) || (this._Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Category.Entity = null;
                        previousValue.PartInfos.Remove(this);
                    }
                    this._Category.Entity = value;
                    if (value != null)
                    {
                        value.PartInfos.Add(this);
                        this._CategoryId = value.CategoryId;
                    }
                    else
                    {
                        this._CategoryId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }

        [Association(Name = "PartInfo_Inventory", Storage = "_Inventories", OtherKey = "PartInfoId")]
        public EntitySet<Inventory> Inventories
        {
            get
            {
                return this._Inventories;
            }
            set
            {
                this._Inventories.Assign(value);
            }
        }

        [Association(Name = "PartInfo_PartSafety", Storage = "_PartSafeties", OtherKey = "PartInfoId")]
        public EntitySet<PartSafety> PartSafeties
        {
            get
            {
                return this._PartSafeties;
            }
            set
            {
                this._PartSafeties.Assign(value);
            }
        }

        [Association(Name = "PartInfo_SalesDetail", Storage = "_SalesDetails", OtherKey = "PartInfoId")]
        public EntitySet<SalesDetail> SalesDetails
        {
            get
            {
                return this._SalesDetails;
            }
            set
            {
                this._SalesDetails.Assign(value);
            }
        }

        [Association(Name = "PartInfo_TransactionHistory", Storage = "_TransactionHistories", OtherKey = "PartInfoId")]
        public EntitySet<TransactionHistory> TransactionHistories
        {
            get
            {
                return this._TransactionHistories;
            }
            set
            {
                this._TransactionHistories.Assign(value);
            }
        }

        [Association(Name = "PartInfo_TransferDetail", Storage = "_TransferDetails", OtherKey = "PartInfoId")]
        public EntitySet<TransferDetail> TransferDetails
        {
            get
            {
                return this._TransferDetails;
            }
            set
            {
                this._TransferDetails.Assign(value);
            }
        }

        [Association(Name = "Dealer_PartInfo", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.PartInfos.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.PartInfos.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Inventories(Inventory entity)
        {
            this.SendPropertyChanging("Inventories");
            entity.PartInfo = this;
        }

        private void detach_Inventories(Inventory entity)
        {
            this.SendPropertyChanging("Inventories");
            entity.PartInfo = null;
        }

        private void attach_PartSafeties(PartSafety entity)
        {
            this.SendPropertyChanging("PartSafeties");
            entity.PartInfo = this;
        }

        private void detach_PartSafeties(PartSafety entity)
        {
            this.SendPropertyChanging("PartSafeties");
            entity.PartInfo = null;
        }

        private void attach_SalesDetails(SalesDetail entity)
        {
            this.SendPropertyChanging("SalesDetails");
            entity.PartInfo = this;
        }

        private void detach_SalesDetails(SalesDetail entity)
        {
            this.SendPropertyChanging("SalesDetails");
            entity.PartInfo = null;
        }

        private void attach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.PartInfo = this;
        }

        private void detach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.PartInfo = null;
        }

        private void attach_TransferDetails(TransferDetail entity)
        {
            this.SendPropertyChanging("TransferDetails");
            entity.PartInfo = this;
        }

        private void detach_TransferDetails(TransferDetail entity)
        {
            this.SendPropertyChanging("TransferDetails");
            entity.PartInfo = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_PART_SAFETY")]
    public partial class PartSafety : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _PartInfoId;

        private long _WarehouseId;

        private int _SafetyQuantity;

        private int _CurrentStock;

        private bool _Deleted;

        private EntityRef<PartInfo> _PartInfo;

        private EntityRef<Warehouse> _Warehouse;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPartInfoIdChanging(long value);
        partial void OnPartInfoIdChanged();
        partial void OnWarehouseIdChanging(long value);
        partial void OnWarehouseIdChanged();
        partial void OnSafetyQuantityChanging(int value);
        partial void OnSafetyQuantityChanged();
        partial void OnCurrentStockChanging(int value);
        partial void OnCurrentStockChanged();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        #endregion

        public PartSafety()
        {
            this._PartInfo = default(EntityRef<PartInfo>);
            this._Warehouse = default(EntityRef<Warehouse>);
            OnCreated();
        }

        [Column(Name = @"PART_INFO_ID", Storage = "_PartInfoId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long PartInfoId
        {
            get
            {
                return this._PartInfoId;
            }
            set
            {
                if (this._PartInfoId != value)
                {
                    if (this._PartInfo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPartInfoIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartInfoId = value;
                    this.SendPropertyChanged("PartInfoId");
                    this.OnPartInfoIdChanged();
                }
            }
        }

        [Column(Name = @"WAREHOUSE_ID", Storage = "_WarehouseId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long WarehouseId
        {
            get
            {
                return this._WarehouseId;
            }
            set
            {
                if (this._WarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._WarehouseId = value;
                    this.SendPropertyChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"SAFETY_QUANTITY", Storage = "_SafetyQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int SafetyQuantity
        {
            get
            {
                return this._SafetyQuantity;
            }
            set
            {
                if (this._SafetyQuantity != value)
                {
                    this.OnSafetyQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._SafetyQuantity = value;
                    this.SendPropertyChanged("SafetyQuantity");
                    this.OnSafetyQuantityChanged();
                }
            }
        }

        [Column(Name = @"CURRENT_STOCK", Storage = "_CurrentStock", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int CurrentStock
        {
            get
            {
                return this._CurrentStock;
            }
            set
            {
                if (this._CurrentStock != value)
                {
                    this.OnCurrentStockChanging(value);
                    this.SendPropertyChanging();
                    this._CurrentStock = value;
                    this.SendPropertyChanged("CurrentStock");
                    this.OnCurrentStockChanged();
                }
            }
        }

        [Column(Storage = "_Deleted", CanBeNull = false, DbType = "NUMBER(1) not null")]
        public bool Deleted
        {
            get
            {
                return this._Deleted;
            }
            set
            {
                if (this._Deleted != value)
                {
                    this.OnDeletedChanging(value);
                    this.SendPropertyChanging();
                    this._Deleted = value;
                    this.SendPropertyChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }

        [Association(Name = "PartInfo_PartSafety", Storage = "_PartInfo", ThisKey = "PartInfoId", IsForeignKey = true)]
        public PartInfo PartInfo
        {
            get
            {
                return this._PartInfo.Entity;
            }
            set
            {
                PartInfo previousValue = this._PartInfo.Entity;
                if ((previousValue != value) || (this._PartInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PartInfo.Entity = null;
                        previousValue.PartSafeties.Remove(this);
                    }
                    this._PartInfo.Entity = value;
                    if (value != null)
                    {
                        value.PartSafeties.Add(this);
                        this._PartInfoId = value.PartInfoId;
                    }
                    else
                    {
                        this._PartInfoId = default(long);
                    }
                    this.SendPropertyChanged("PartInfo");
                }
            }
        }

        [Association(Name = "Warehouse_PartSafety", Storage = "_Warehouse", ThisKey = "WarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.PartSafeties.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        value.PartSafeties.Add(this);
                        this._WarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._WarehouseId = default(long);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_RECEIVE_DETAIL")]
    public partial class ReceiveDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ReceiveDetailId;

        private long _ReceiveHeaderId;

        private long _OrderHeaderId;

        private string _PartCode;

        private int _ShippingQuantity;

        private int _GoodQuantity;

        private int _BrokenQuantity;

        private int _WrongQuantity;

        private int _LackQuantity;

        private string _Status;

        private string _DealerComment;

        private EntityRef<ReceiveHeader> _ReceiveHeader;

        private EntityRef<OrderHeader> _OrderHeader;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReceiveDetailIdChanging(long value);
        partial void OnReceiveDetailIdChanged();
        partial void OnReceiveHeaderIdChanging(long value);
        partial void OnReceiveHeaderIdChanged();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnShippingQuantityChanging(int value);
        partial void OnShippingQuantityChanged();
        partial void OnGoodQuantityChanging(int value);
        partial void OnGoodQuantityChanged();
        partial void OnBrokenQuantityChanging(int value);
        partial void OnBrokenQuantityChanged();
        partial void OnWrongQuantityChanging(int value);
        partial void OnWrongQuantityChanged();
        partial void OnLackQuantityChanging(int value);
        partial void OnLackQuantityChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnDealerCommentChanging(string value);
        partial void OnDealerCommentChanged();
        #endregion

        public ReceiveDetail()
        {
            this._ReceiveHeader = default(EntityRef<ReceiveHeader>);
            this._OrderHeader = default(EntityRef<OrderHeader>);
            OnCreated();
        }

        [Column(Name = @"RECEIVE_DETAIL_ID", Storage = "_ReceiveDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ReceiveDetailId
        {
            get
            {
                return this._ReceiveDetailId;
            }
            set
            {
                if (this._ReceiveDetailId != value)
                {
                    this.OnReceiveDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiveDetailId = value;
                    this.SendPropertyChanged("ReceiveDetailId");
                    this.OnReceiveDetailIdChanged();
                }
            }
        }

        [Column(Name = @"RECEIVE_HEADER_ID", Storage = "_ReceiveHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long ReceiveHeaderId
        {
            get
            {
                return this._ReceiveHeaderId;
            }
            set
            {
                if (this._ReceiveHeaderId != value)
                {
                    if (this._ReceiveHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnReceiveHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiveHeaderId = value;
                    this.SendPropertyChanged("ReceiveHeaderId");
                    this.OnReceiveHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"ORDER_HEADER_ID", Storage = "_OrderHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    if (this._OrderHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"Shipping_Quantity", Storage = "_ShippingQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int ShippingQuantity
        {
            get
            {
                return this._ShippingQuantity;
            }
            set
            {
                if (this._ShippingQuantity != value)
                {
                    this.OnShippingQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingQuantity = value;
                    this.SendPropertyChanged("ShippingQuantity");
                    this.OnShippingQuantityChanged();
                }
            }
        }

        [Column(Name = @"GOOD_QUANTITY", Storage = "_GoodQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int GoodQuantity
        {
            get
            {
                return this._GoodQuantity;
            }
            set
            {
                if (this._GoodQuantity != value)
                {
                    this.OnGoodQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._GoodQuantity = value;
                    this.SendPropertyChanged("GoodQuantity");
                    this.OnGoodQuantityChanged();
                }
            }
        }

        [Column(Name = @"BROKEN_QUANTITY", Storage = "_BrokenQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int BrokenQuantity
        {
            get
            {
                return this._BrokenQuantity;
            }
            set
            {
                if (this._BrokenQuantity != value)
                {
                    this.OnBrokenQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._BrokenQuantity = value;
                    this.SendPropertyChanged("BrokenQuantity");
                    this.OnBrokenQuantityChanged();
                }
            }
        }

        [Column(Name = @"WRONG_QUANTITY", Storage = "_WrongQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int WrongQuantity
        {
            get
            {
                return this._WrongQuantity;
            }
            set
            {
                if (this._WrongQuantity != value)
                {
                    this.OnWrongQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._WrongQuantity = value;
                    this.SendPropertyChanged("WrongQuantity");
                    this.OnWrongQuantityChanged();
                }
            }
        }

        [Column(Name = @"LACK_QUANTITY", Storage = "_LackQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int LackQuantity
        {
            get
            {
                return this._LackQuantity;
            }
            set
            {
                if (this._LackQuantity != value)
                {
                    this.OnLackQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._LackQuantity = value;
                    this.SendPropertyChanged("LackQuantity");
                    this.OnLackQuantityChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", DbType = "CHAR(1)")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"DEALER_COMMENT", Storage = "_DealerComment", DbType = "NVARCHAR2(750)")]
        public string DealerComment
        {
            get
            {
                return this._DealerComment;
            }
            set
            {
                if (this._DealerComment != value)
                {
                    this.OnDealerCommentChanging(value);
                    this.SendPropertyChanging();
                    this._DealerComment = value;
                    this.SendPropertyChanged("DealerComment");
                    this.OnDealerCommentChanged();
                }
            }
        }

        [Association(Name = "ReceiveHeader_ReceiveDetail", Storage = "_ReceiveHeader", ThisKey = "ReceiveHeaderId", IsForeignKey = true)]
        public ReceiveHeader ReceiveHeader
        {
            get
            {
                return this._ReceiveHeader.Entity;
            }
            set
            {
                ReceiveHeader previousValue = this._ReceiveHeader.Entity;
                if ((previousValue != value) || (this._ReceiveHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ReceiveHeader.Entity = null;
                        previousValue.ReceiveDetails.Remove(this);
                    }
                    this._ReceiveHeader.Entity = value;
                    if (value != null)
                    {
                        value.ReceiveDetails.Add(this);
                        this._ReceiveHeaderId = value.ReceiveHeaderId;
                    }
                    else
                    {
                        this._ReceiveHeaderId = default(long);
                    }
                    this.SendPropertyChanged("ReceiveHeader");
                }
            }
        }

        [Association(Name = "OrderHeader_ReceiveDetail", Storage = "_OrderHeader", ThisKey = "OrderHeaderId", IsForeignKey = true)]
        public OrderHeader OrderHeader
        {
            get
            {
                return this._OrderHeader.Entity;
            }
            set
            {
                OrderHeader previousValue = this._OrderHeader.Entity;
                if ((previousValue != value) || (this._OrderHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._OrderHeader.Entity = null;
                        previousValue.ReceiveDetails.Remove(this);
                    }
                    this._OrderHeader.Entity = value;
                    if (value != null)
                    {
                        value.ReceiveDetails.Add(this);
                        this._OrderHeaderId = value.OrderHeaderId;
                    }
                    else
                    {
                        this._OrderHeaderId = default(long);
                    }
                    this.SendPropertyChanged("OrderHeader");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_RECEIVE_HEADER")]
    public partial class ReceiveHeader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ReceiveHeaderId;

        private long _OrderHeaderId;

        private string _DealerCode;

        private long _WarehouseId;

        private string _IssueNumber;

        private System.DateTime _ReceiveDate;

        private bool _IsLocked;

        private bool _IsAutomatic;

        private bool _HasUndo;

        private bool _HasNGForm;

        private string _NotGoodNumber;

        private EntitySet<NGFormHeader> _NGFormHeaders;

        private EntitySet<ReceiveDetail> _ReceiveDetails;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<Dealer> _Dealer;

        private EntityRef<OrderHeader> _OrderHeader;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReceiveHeaderIdChanging(long value);
        partial void OnReceiveHeaderIdChanged();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnWarehouseIdChanging(long value);
        partial void OnWarehouseIdChanged();
        partial void OnIssueNumberChanging(string value);
        partial void OnIssueNumberChanged();
        partial void OnReceiveDateChanging(System.DateTime value);
        partial void OnReceiveDateChanged();
        partial void OnIsLockedChanging(bool value);
        partial void OnIsLockedChanged();
        partial void OnIsAutomaticChanging(bool value);
        partial void OnIsAutomaticChanged();
        partial void OnHasUndoChanging(bool value);
        partial void OnHasUndoChanged();
        partial void OnHasNGFormChanging(bool value);
        partial void OnHasNGFormChanged();
        partial void OnNotGoodNumberChanging(string value);
        partial void OnNotGoodNumberChanged();
        #endregion

        public ReceiveHeader()
        {
            this._NGFormHeaders = new EntitySet<NGFormHeader>(new Action<NGFormHeader>(this.attach_NGFormHeaders), new Action<NGFormHeader>(this.detach_NGFormHeaders));
            this._ReceiveDetails = new EntitySet<ReceiveDetail>(new Action<ReceiveDetail>(this.attach_ReceiveDetails), new Action<ReceiveDetail>(this.detach_ReceiveDetails));
            this._Warehouse = default(EntityRef<Warehouse>);
            this._Dealer = default(EntityRef<Dealer>);
            this._OrderHeader = default(EntityRef<OrderHeader>);
            OnCreated();
        }

        [Column(Name = @"RECEIVE_HEADER_ID", Storage = "_ReceiveHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ReceiveHeaderId
        {
            get
            {
                return this._ReceiveHeaderId;
            }
            set
            {
                if (this._ReceiveHeaderId != value)
                {
                    this.OnReceiveHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiveHeaderId = value;
                    this.SendPropertyChanged("ReceiveHeaderId");
                    this.OnReceiveHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"ORDER_HEADER_ID", Storage = "_OrderHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    if (this._OrderHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"WAREHOUSE_ID", Storage = "_WarehouseId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long WarehouseId
        {
            get
            {
                return this._WarehouseId;
            }
            set
            {
                if (this._WarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._WarehouseId = value;
                    this.SendPropertyChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"ISSUE_NUMBER", Storage = "_IssueNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string IssueNumber
        {
            get
            {
                return this._IssueNumber;
            }
            set
            {
                if (this._IssueNumber != value)
                {
                    this.OnIssueNumberChanging(value);
                    this.SendPropertyChanging();
                    this._IssueNumber = value;
                    this.SendPropertyChanged("IssueNumber");
                    this.OnIssueNumberChanged();
                }
            }
        }

        [Column(Name = @"RECEIVE_DATE", Storage = "_ReceiveDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ReceiveDate
        {
            get
            {
                return this._ReceiveDate;
            }
            set
            {
                if (this._ReceiveDate != value)
                {
                    this.OnReceiveDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiveDate = value;
                    this.SendPropertyChanged("ReceiveDate");
                    this.OnReceiveDateChanged();
                }
            }
        }

        [Column(Name = @"IS_LOCKED", Storage = "_IsLocked", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool IsLocked
        {
            get
            {
                return this._IsLocked;
            }
            set
            {
                if (this._IsLocked != value)
                {
                    this.OnIsLockedChanging(value);
                    this.SendPropertyChanging();
                    this._IsLocked = value;
                    this.SendPropertyChanged("IsLocked");
                    this.OnIsLockedChanged();
                }
            }
        }

        [Column(Name = @"IS_AUTOMATIC", Storage = "_IsAutomatic", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool IsAutomatic
        {
            get
            {
                return this._IsAutomatic;
            }
            set
            {
                if (this._IsAutomatic != value)
                {
                    this.OnIsAutomaticChanging(value);
                    this.SendPropertyChanging();
                    this._IsAutomatic = value;
                    this.SendPropertyChanged("IsAutomatic");
                    this.OnIsAutomaticChanged();
                }
            }
        }

        [Column(Name = @"HAS_UNDO", Storage = "_HasUndo", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool HasUndo
        {
            get
            {
                return this._HasUndo;
            }
            set
            {
                if (this._HasUndo != value)
                {
                    this.OnHasUndoChanging(value);
                    this.SendPropertyChanging();
                    this._HasUndo = value;
                    this.SendPropertyChanged("HasUndo");
                    this.OnHasUndoChanged();
                }
            }
        }

        [Column(Name = @"HAS_N_G_FORM", Storage = "_HasNGForm", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool HasNGForm
        {
            get
            {
                return this._HasNGForm;
            }
            set
            {
                if (this._HasNGForm != value)
                {
                    this.OnHasNGFormChanging(value);
                    this.SendPropertyChanging();
                    this._HasNGForm = value;
                    this.SendPropertyChanged("HasNGForm");
                    this.OnHasNGFormChanged();
                }
            }
        }

        [Column(Name = @"Not_Good_Number", Storage = "_NotGoodNumber", DbType = "VARCHAR2(30)")]
        public string NotGoodNumber
        {
            get
            {
                return this._NotGoodNumber;
            }
            set
            {
                if (this._NotGoodNumber != value)
                {
                    this.OnNotGoodNumberChanging(value);
                    this.SendPropertyChanging();
                    this._NotGoodNumber = value;
                    this.SendPropertyChanged("NotGoodNumber");
                    this.OnNotGoodNumberChanged();
                }
            }
        }

        [Association(Name = "ReceiveHeader_NGFormHeader", Storage = "_NGFormHeaders", OtherKey = "ReceiveHeaderId")]
        public EntitySet<NGFormHeader> NGFormHeaders
        {
            get
            {
                return this._NGFormHeaders;
            }
            set
            {
                this._NGFormHeaders.Assign(value);
            }
        }

        [Association(Name = "ReceiveHeader_ReceiveDetail", Storage = "_ReceiveDetails", OtherKey = "ReceiveHeaderId")]
        public EntitySet<ReceiveDetail> ReceiveDetails
        {
            get
            {
                return this._ReceiveDetails;
            }
            set
            {
                this._ReceiveDetails.Assign(value);
            }
        }

        [Association(Name = "Warehouse_ReceiveHeader", Storage = "_Warehouse", ThisKey = "WarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.ReceiveHeaders.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        value.ReceiveHeaders.Add(this);
                        this._WarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._WarehouseId = default(long);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

        [Association(Name = "Dealer_ReceiveHeader", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.ReceiveHeaders.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.ReceiveHeaders.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        [Association(Name = "OrderHeader_ReceiveHeader", Storage = "_OrderHeader", ThisKey = "OrderHeaderId", IsForeignKey = true)]
        public OrderHeader OrderHeader
        {
            get
            {
                return this._OrderHeader.Entity;
            }
            set
            {
                OrderHeader previousValue = this._OrderHeader.Entity;
                if ((previousValue != value) || (this._OrderHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._OrderHeader.Entity = null;
                        previousValue.ReceiveHeaders.Remove(this);
                    }
                    this._OrderHeader.Entity = value;
                    if (value != null)
                    {
                        value.ReceiveHeaders.Add(this);
                        this._OrderHeaderId = value.OrderHeaderId;
                    }
                    else
                    {
                        this._OrderHeaderId = default(long);
                    }
                    this.SendPropertyChanged("OrderHeader");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_NGFormHeaders(NGFormHeader entity)
        {
            this.SendPropertyChanging("NGFormHeaders");
            entity.ReceiveHeader = this;
        }

        private void detach_NGFormHeaders(NGFormHeader entity)
        {
            this.SendPropertyChanging("NGFormHeaders");
            entity.ReceiveHeader = null;
        }

        private void attach_ReceiveDetails(ReceiveDetail entity)
        {
            this.SendPropertyChanging("ReceiveDetails");
            entity.ReceiveHeader = this;
        }

        private void detach_ReceiveDetails(ReceiveDetail entity)
        {
            this.SendPropertyChanging("ReceiveDetails");
            entity.ReceiveHeader = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_SALES_DETAIL")]
    public partial class SalesDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _SalesDetailId;

        private long _SalesHeaderId;

        private long _PartInfoId;

        private string _PartCode;

        private string _PartName;

        private string _PartType;

        private int _OrderQuantity;

        private int _UnitPrice;

        private int _PercentDiscount;

        private int _LineTotal;

        private System.DateTime _ModifiedDate;

        private EntityRef<PartInfo> _PartInfo;

        private EntityRef<SalesHeader> _SalesHeader;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSalesDetailIdChanging(long value);
        partial void OnSalesDetailIdChanged();
        partial void OnSalesHeaderIdChanging(long value);
        partial void OnSalesHeaderIdChanged();
        partial void OnPartInfoIdChanging(long value);
        partial void OnPartInfoIdChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnPartNameChanging(string value);
        partial void OnPartNameChanged();
        partial void OnPartTypeChanging(string value);
        partial void OnPartTypeChanged();
        partial void OnOrderQuantityChanging(int value);
        partial void OnOrderQuantityChanged();
        partial void OnUnitPriceChanging(int value);
        partial void OnUnitPriceChanged();
        partial void OnPercentDiscountChanging(int value);
        partial void OnPercentDiscountChanged();
        partial void OnLineTotalChanging(int value);
        partial void OnLineTotalChanged();
        partial void OnModifiedDateChanging(System.DateTime value);
        partial void OnModifiedDateChanged();
        #endregion

        public SalesDetail()
        {
            this._PartInfo = default(EntityRef<PartInfo>);
            this._SalesHeader = default(EntityRef<SalesHeader>);
            OnCreated();
        }

        [Column(Name = @"SALES_DETAIL_ID", Storage = "_SalesDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long SalesDetailId
        {
            get
            {
                return this._SalesDetailId;
            }
            set
            {
                if (this._SalesDetailId != value)
                {
                    this.OnSalesDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._SalesDetailId = value;
                    this.SendPropertyChanged("SalesDetailId");
                    this.OnSalesDetailIdChanged();
                }
            }
        }

        [Column(Name = @"SALES_HEADER_ID", Storage = "_SalesHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long SalesHeaderId
        {
            get
            {
                return this._SalesHeaderId;
            }
            set
            {
                if (this._SalesHeaderId != value)
                {
                    if (this._SalesHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSalesHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._SalesHeaderId = value;
                    this.SendPropertyChanged("SalesHeaderId");
                    this.OnSalesHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"PART_INFO_ID", Storage = "_PartInfoId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long PartInfoId
        {
            get
            {
                return this._PartInfoId;
            }
            set
            {
                if (this._PartInfoId != value)
                {
                    if (this._PartInfo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPartInfoIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartInfoId = value;
                    this.SendPropertyChanged("PartInfoId");
                    this.OnPartInfoIdChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", DbType = "VARCHAR2(40)")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"PART_NAME", Storage = "_PartName", DbType = "NVARCHAR2(768) NOT NULL")]
        public string PartName
        {
            get
            {
                return this._PartName;
            }
            set
            {
                if (this._PartName != value)
                {
                    this.OnPartNameChanging(value);
                    this.SendPropertyChanging();
                    this._PartName = value;
                    this.SendPropertyChanged("PartName");
                    this.OnPartNameChanged();
                }
            }
        }

        [Column(Name = @"PART_TYPE", Storage = "_PartType", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string PartType
        {
            get
            {
                return this._PartType;
            }
            set
            {
                if (this._PartType != value)
                {
                    this.OnPartTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PartType = value;
                    this.SendPropertyChanged("PartType");
                    this.OnPartTypeChanged();
                }
            }
        }

        [Column(Name = @"ORDER_QUANTITY", Storage = "_OrderQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int OrderQuantity
        {
            get
            {
                return this._OrderQuantity;
            }
            set
            {
                if (this._OrderQuantity != value)
                {
                    this.OnOrderQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._OrderQuantity = value;
                    this.SendPropertyChanged("OrderQuantity");
                    this.OnOrderQuantityChanged();
                }
            }
        }

        [Column(Name = @"UNIT_PRICE", Storage = "_UnitPrice", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging();
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        [Column(Name = @"PERCENT_DISCOUNT", Storage = "_PercentDiscount", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int PercentDiscount
        {
            get
            {
                return this._PercentDiscount;
            }
            set
            {
                if (this._PercentDiscount != value)
                {
                    this.OnPercentDiscountChanging(value);
                    this.SendPropertyChanging();
                    this._PercentDiscount = value;
                    this.SendPropertyChanged("PercentDiscount");
                    this.OnPercentDiscountChanged();
                }
            }
        }

        [Column(Name = @"LINE_TOTAL", Storage = "_LineTotal", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int LineTotal
        {
            get
            {
                return this._LineTotal;
            }
            set
            {
                if (this._LineTotal != value)
                {
                    this.OnLineTotalChanging(value);
                    this.SendPropertyChanging();
                    this._LineTotal = value;
                    this.SendPropertyChanged("LineTotal");
                    this.OnLineTotalChanged();
                }
            }
        }

        [Column(Name = @"MODIFIED_DATE", Storage = "_ModifiedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._ModifiedDate;
            }
            set
            {
                if (this._ModifiedDate != value)
                {
                    this.OnModifiedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModifiedDate = value;
                    this.SendPropertyChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }

        [Association(Name = "PartInfo_SalesDetail", Storage = "_PartInfo", ThisKey = "PartInfoId", IsForeignKey = true)]
        public PartInfo PartInfo
        {
            get
            {
                return this._PartInfo.Entity;
            }
            set
            {
                PartInfo previousValue = this._PartInfo.Entity;
                if ((previousValue != value) || (this._PartInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PartInfo.Entity = null;
                        previousValue.SalesDetails.Remove(this);
                    }
                    this._PartInfo.Entity = value;
                    if (value != null)
                    {
                        value.SalesDetails.Add(this);
                        this._PartInfoId = value.PartInfoId;
                    }
                    else
                    {
                        this._PartInfoId = default(long);
                    }
                    this.SendPropertyChanged("PartInfo");
                }
            }
        }

        [Association(Name = "SalesHeader_SalesDetail", Storage = "_SalesHeader", ThisKey = "SalesHeaderId", IsForeignKey = true)]
        public SalesHeader SalesHeader
        {
            get
            {
                return this._SalesHeader.Entity;
            }
            set
            {
                SalesHeader previousValue = this._SalesHeader.Entity;
                if ((previousValue != value) || (this._SalesHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SalesHeader.Entity = null;
                        previousValue.SalesDetails.Remove(this);
                    }
                    this._SalesHeader.Entity = value;
                    if (value != null)
                    {
                        value.SalesDetails.Add(this);
                        this._SalesHeaderId = value.SalesHeaderId;
                    }
                    else
                    {
                        this._SalesHeaderId = default(long);
                    }
                    this.SendPropertyChanged("SalesHeader");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_SALES_HEADER")]
    public partial class SalesHeader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _SalesHeaderId;

        private string _DealerCode;

        private System.Nullable<long> _CustomerId;

        private System.Nullable<System.DateTime> _SalesDate;

        private string _Status;

        private string _SalesOrderNumber;

        private string _CustomerName;

        private string _SalesPerson;

        private int _SubTotal;

        private int _TaxAmount;

        private int _Discount;

        private System.DateTime _ModifiedDate;

        private long _WarehouseId;

        private System.DateTime _OrderDate;

        private string _ManualVoucherNumber;

        private string _SalesComment;

        private EntityRef<Customer> _Customer;

        private EntitySet<SalesDetail> _SalesDetails;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSalesHeaderIdChanging(long value);
        partial void OnSalesHeaderIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnCustomerIdChanging(System.Nullable<long> value);
        partial void OnCustomerIdChanged();
        partial void OnSalesDateChanging(System.Nullable<System.DateTime> value);
        partial void OnSalesDateChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnSalesOrderNumberChanging(string value);
        partial void OnSalesOrderNumberChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnSalesPersonChanging(string value);
        partial void OnSalesPersonChanged();
        partial void OnSubTotalChanging(int value);
        partial void OnSubTotalChanged();
        partial void OnTaxAmountChanging(int value);
        partial void OnTaxAmountChanged();
        partial void OnDiscountChanging(int value);
        partial void OnDiscountChanged();
        partial void OnModifiedDateChanging(System.DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnWarehouseIdChanging(long value);
        partial void OnWarehouseIdChanged();
        partial void OnOrderDateChanging(System.DateTime value);
        partial void OnOrderDateChanged();
        partial void OnManualVoucherNumberChanging(string value);
        partial void OnManualVoucherNumberChanged();
        partial void OnSalesCommentChanging(string value);
        partial void OnSalesCommentChanged();
        #endregion

        public SalesHeader()
        {
            this._Customer = default(EntityRef<Customer>);
            this._SalesDetails = new EntitySet<SalesDetail>(new Action<SalesDetail>(this.attach_SalesDetails), new Action<SalesDetail>(this.detach_SalesDetails));
            this._Warehouse = default(EntityRef<Warehouse>);
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"SALES_HEADER_ID", Storage = "_SalesHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long SalesHeaderId
        {
            get
            {
                return this._SalesHeaderId;
            }
            set
            {
                if (this._SalesHeaderId != value)
                {
                    this.OnSalesHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._SalesHeaderId = value;
                    this.SendPropertyChanged("SalesHeaderId");
                    this.OnSalesHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"CUSTOMER_ID", Storage = "_CustomerId", DbType = "NUMBER(10)")]
        public System.Nullable<long> CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    if (this._Customer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

        [Column(Name = @"SALES_DATE", Storage = "_SalesDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> SalesDate
        {
            get
            {
                return this._SalesDate;
            }
            set
            {
                if (this._SalesDate != value)
                {
                    this.OnSalesDateChanging(value);
                    this.SendPropertyChanging();
                    this._SalesDate = value;
                    this.SendPropertyChanged("SalesDate");
                    this.OnSalesDateChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"SALES_ORDER_NUMBER", Storage = "_SalesOrderNumber", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
        public string SalesOrderNumber
        {
            get
            {
                return this._SalesOrderNumber;
            }
            set
            {
                if (this._SalesOrderNumber != value)
                {
                    this.OnSalesOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._SalesOrderNumber = value;
                    this.SendPropertyChanged("SalesOrderNumber");
                    this.OnSalesOrderNumberChanged();
                }
            }
        }

        [Column(Name = @"CUSTOMER_NAME", Storage = "_CustomerName", DbType = "NVARCHAR2(150)")]
        public string CustomerName
        {
            get
            {
                return this._CustomerName;
            }
            set
            {
                if (this._CustomerName != value)
                {
                    this.OnCustomerNameChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerName = value;
                    this.SendPropertyChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }

        [Column(Name = @"SALES_PERSON", Storage = "_SalesPerson", CanBeNull = false, DbType = "NVARCHAR2(765) NOT NULL")]
        public string SalesPerson
        {
            get
            {
                return this._SalesPerson;
            }
            set
            {
                if (this._SalesPerson != value)
                {
                    this.OnSalesPersonChanging(value);
                    this.SendPropertyChanging();
                    this._SalesPerson = value;
                    this.SendPropertyChanged("SalesPerson");
                    this.OnSalesPersonChanged();
                }
            }
        }

        [Column(Name = @"SUB_TOTAL", Storage = "_SubTotal", CanBeNull = false, DbType = "NUMBER(19) NOT NULL")]
        public int SubTotal
        {
            get
            {
                return this._SubTotal;
            }
            set
            {
                if (this._SubTotal != value)
                {
                    this.OnSubTotalChanging(value);
                    this.SendPropertyChanging();
                    this._SubTotal = value;
                    this.SendPropertyChanged("SubTotal");
                    this.OnSubTotalChanged();
                }
            }
        }

        [Column(Name = @"TAX_AMOUNT", Storage = "_TaxAmount", CanBeNull = false, DbType = "NUMBER(19) NOT NULL")]
        public int TaxAmount
        {
            get
            {
                return this._TaxAmount;
            }
            set
            {
                if (this._TaxAmount != value)
                {
                    this.OnTaxAmountChanging(value);
                    this.SendPropertyChanging();
                    this._TaxAmount = value;
                    this.SendPropertyChanged("TaxAmount");
                    this.OnTaxAmountChanged();
                }
            }
        }

        [Column(Name = @"DISCOUNT", Storage = "_Discount", CanBeNull = false, DbType = "NUMBER(19) NOT NULL")]
        public int Discount
        {
            get
            {
                return this._Discount;
            }
            set
            {
                if (this._Discount != value)
                {
                    this.OnDiscountChanging(value);
                    this.SendPropertyChanging();
                    this._Discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }

        [Column(Name = @"MODIFIED_DATE", Storage = "_ModifiedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._ModifiedDate;
            }
            set
            {
                if (this._ModifiedDate != value)
                {
                    this.OnModifiedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModifiedDate = value;
                    this.SendPropertyChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }

        [Column(Name = @"WAREHOUSE_ID", Storage = "_WarehouseId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long WarehouseId
        {
            get
            {
                return this._WarehouseId;
            }
            set
            {
                if (this._WarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._WarehouseId = value;
                    this.SendPropertyChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"Order_Date", Storage = "_OrderDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

        [Column(Name = @"Manual_Voucher_Number", Storage = "_ManualVoucherNumber", DbType = "varchar(50)")]
        public string ManualVoucherNumber
        {
            get
            {
                return this._ManualVoucherNumber;
            }
            set
            {
                if (this._ManualVoucherNumber != value)
                {
                    this.OnManualVoucherNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ManualVoucherNumber = value;
                    this.SendPropertyChanged("ManualVoucherNumber");
                    this.OnManualVoucherNumberChanged();
                }
            }
        }

        [Column(Name = @"Sales_Comment", Storage = "_SalesComment", DbType = "NVARCHAR2(768)")]
        public string SalesComment
        {
            get
            {
                return this._SalesComment;
            }
            set
            {
                if (this._SalesComment != value)
                {
                    this.OnSalesCommentChanging(value);
                    this.SendPropertyChanging();
                    this._SalesComment = value;
                    this.SendPropertyChanged("SalesComment");
                    this.OnSalesCommentChanged();
                }
            }
        }

        [Association(Name = "Customer_SalesHeader", Storage = "_Customer", ThisKey = "CustomerId", IsForeignKey = true)]
        public Customer Customer
        {
            get
            {
                return this._Customer.Entity;
            }
            set
            {
                Customer previousValue = this._Customer.Entity;
                if ((previousValue != value) || (this._Customer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Customer.Entity = null;
                        previousValue.SalesHeaders.Remove(this);
                    }
                    this._Customer.Entity = value;
                    if (value != null)
                    {
                        value.SalesHeaders.Add(this);
                        this._CustomerId = value.CustomerId;
                    }
                    else
                    {
                        this._CustomerId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Customer");
                }
            }
        }

        [Association(Name = "SalesHeader_SalesDetail", Storage = "_SalesDetails", OtherKey = "SalesHeaderId")]
        public EntitySet<SalesDetail> SalesDetails
        {
            get
            {
                return this._SalesDetails;
            }
            set
            {
                this._SalesDetails.Assign(value);
            }
        }

        [Association(Name = "Warehouse_SalesHeader", Storage = "_Warehouse", ThisKey = "WarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.SalesHeaders.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        value.SalesHeaders.Add(this);
                        this._WarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._WarehouseId = default(long);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

        [Association(Name = "Dealer_SalesHeader", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.SalesHeaders.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.SalesHeaders.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SalesDetails(SalesDetail entity)
        {
            this.SendPropertyChanging("SalesDetails");
            entity.SalesHeader = this;
        }

        private void detach_SalesDetails(SalesDetail entity)
        {
            this.SendPropertyChanging("SalesDetails");
            entity.SalesHeader = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_SYSTEM_DATA")]
    public partial class SystemData : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Code;

        private string _Type;

        private string _Term;

        private EntitySet<TransactionHistory> _TransactionHistories;

        private EntitySet<OrderHeader> _OrderHeaders;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnTermChanging(string value);
        partial void OnTermChanged();
        #endregion

        public SystemData()
        {
            this._TransactionHistories = new EntitySet<TransactionHistory>(new Action<TransactionHistory>(this.attach_TransactionHistories), new Action<TransactionHistory>(this.detach_TransactionHistories));
            this._OrderHeaders = new EntitySet<OrderHeader>(new Action<OrderHeader>(this.attach_OrderHeaders), new Action<OrderHeader>(this.detach_OrderHeaders));
            OnCreated();
        }

        [Column(Name = @"CODE", Storage = "_Code", CanBeNull = false, DbType = "CHAR(2) NOT NULL", IsPrimaryKey = true)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [Column(Name = @"TYPE", Storage = "_Type", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"TERM", Storage = "_Term", CanBeNull = false, DbType = "NVARCHAR2(150) NOT NULL")]
        public string Term
        {
            get
            {
                return this._Term;
            }
            set
            {
                if (this._Term != value)
                {
                    this.OnTermChanging(value);
                    this.SendPropertyChanging();
                    this._Term = value;
                    this.SendPropertyChanged("Term");
                    this.OnTermChanged();
                }
            }
        }

        [Association(Name = "SystemData_TransactionHistory", Storage = "_TransactionHistories", OtherKey = "TransactionCode")]
        public EntitySet<TransactionHistory> TransactionHistories
        {
            get
            {
                return this._TransactionHistories;
            }
            set
            {
                this._TransactionHistories.Assign(value);
            }
        }

        [Association(Name = "SystemData_OrderHeader", Storage = "_OrderHeaders", OtherKey = "Status")]
        public EntitySet<OrderHeader> OrderHeaders
        {
            get
            {
                return this._OrderHeaders;
            }
            set
            {
                this._OrderHeaders.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.SystemData = this;
        }

        private void detach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.SystemData = null;
        }

        private void attach_OrderHeaders(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders");
            entity.SystemData = this;
        }

        private void detach_OrderHeaders(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders");
            entity.SystemData = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_TRANSACTION_HISTORY")]
    public partial class TransactionHistory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TransactionHistoryId;

        private string _DealerCode;

        private string _InvoiceNumber;

        private System.DateTime _TransactionDate;

        private string _TransactionCode;

        private System.Nullable<long> _VendorId;

        private int _Quantity;

        private int _ActualCost;

        private string _CreatedBy;

        private System.DateTime _CreatedDate;

        private string _TransactionComment;

        private long _PartInfoId;

        private long _WarehouseId;

        private System.Nullable<long> _SecondaryWarehouseId;

        private EntityRef<PartInfo> _PartInfo;

        private EntityRef<SystemData> _SystemData;

        private EntityRef<Vendor> _Vendor;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<Warehouse> _Warehouse1;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTransactionHistoryIdChanging(long value);
        partial void OnTransactionHistoryIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnInvoiceNumberChanging(string value);
        partial void OnInvoiceNumberChanged();
        partial void OnTransactionDateChanging(System.DateTime value);
        partial void OnTransactionDateChanged();
        partial void OnTransactionCodeChanging(string value);
        partial void OnTransactionCodeChanged();
        partial void OnVendorIdChanging(System.Nullable<long> value);
        partial void OnVendorIdChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnActualCostChanging(int value);
        partial void OnActualCostChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnTransactionCommentChanging(string value);
        partial void OnTransactionCommentChanged();
        partial void OnPartInfoIdChanging(long value);
        partial void OnPartInfoIdChanged();
        partial void OnWarehouseIdChanging(long value);
        partial void OnWarehouseIdChanged();
        partial void OnSecondaryWarehouseIdChanging(System.Nullable<long> value);
        partial void OnSecondaryWarehouseIdChanged();
        #endregion

        public TransactionHistory()
        {
            this._PartInfo = default(EntityRef<PartInfo>);
            this._SystemData = default(EntityRef<SystemData>);
            this._Vendor = default(EntityRef<Vendor>);
            this._Warehouse = default(EntityRef<Warehouse>);
            this._Warehouse1 = default(EntityRef<Warehouse>);
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"TRANSACTION_HISTORY_ID", Storage = "_TransactionHistoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long TransactionHistoryId
        {
            get
            {
                return this._TransactionHistoryId;
            }
            set
            {
                if (this._TransactionHistoryId != value)
                {
                    this.OnTransactionHistoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionHistoryId = value;
                    this.SendPropertyChanged("TransactionHistoryId");
                    this.OnTransactionHistoryIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"INVOICE_NUMBER", Storage = "_InvoiceNumber", DbType = "VARCHAR2(50)")]
        public string InvoiceNumber
        {
            get
            {
                return this._InvoiceNumber;
            }
            set
            {
                if (this._InvoiceNumber != value)
                {
                    this.OnInvoiceNumberChanging(value);
                    this.SendPropertyChanging();
                    this._InvoiceNumber = value;
                    this.SendPropertyChanged("InvoiceNumber");
                    this.OnInvoiceNumberChanged();
                }
            }
        }

        [Column(Name = @"TRANSACTION_DATE", Storage = "_TransactionDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

        [Column(Name = @"TRANSACTION_CODE", Storage = "_TransactionCode", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string TransactionCode
        {
            get
            {
                return this._TransactionCode;
            }
            set
            {
                if (this._TransactionCode != value)
                {
                    if (this._SystemData.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTransactionCodeChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionCode = value;
                    this.SendPropertyChanged("TransactionCode");
                    this.OnTransactionCodeChanged();
                }
            }
        }

        [Column(Name = @"VENDOR_ID", Storage = "_VendorId", DbType = "NUMBER(10)")]
        public System.Nullable<long> VendorId
        {
            get
            {
                return this._VendorId;
            }
            set
            {
                if (this._VendorId != value)
                {
                    if (this._Vendor.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnVendorIdChanging(value);
                    this.SendPropertyChanging();
                    this._VendorId = value;
                    this.SendPropertyChanged("VendorId");
                    this.OnVendorIdChanged();
                }
            }
        }

        [Column(Name = @"QUANTITY", Storage = "_Quantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

        [Column(Name = @"ACTUAL_COST", Storage = "_ActualCost", CanBeNull = false, DbType = "NUMBER(19) NOT NULL")]
        public int ActualCost
        {
            get
            {
                return this._ActualCost;
            }
            set
            {
                if (this._ActualCost != value)
                {
                    this.OnActualCostChanging(value);
                    this.SendPropertyChanging();
                    this._ActualCost = value;
                    this.SendPropertyChanged("ActualCost");
                    this.OnActualCostChanged();
                }
            }
        }

        [Column(Name = @"CREATED_BY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(768) NOT NULL")]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"TRANSACTION_COMMENT", Storage = "_TransactionComment", DbType = "NVARCHAR2(750)")]
        public string TransactionComment
        {
            get
            {
                return this._TransactionComment;
            }
            set
            {
                if (this._TransactionComment != value)
                {
                    this.OnTransactionCommentChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionComment = value;
                    this.SendPropertyChanged("TransactionComment");
                    this.OnTransactionCommentChanged();
                }
            }
        }

        [Column(Name = @"PART_INFO_ID", Storage = "_PartInfoId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long PartInfoId
        {
            get
            {
                return this._PartInfoId;
            }
            set
            {
                if (this._PartInfoId != value)
                {
                    if (this._PartInfo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPartInfoIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartInfoId = value;
                    this.SendPropertyChanged("PartInfoId");
                    this.OnPartInfoIdChanged();
                }
            }
        }

        [Column(Name = @"WAREHOUSE_ID", Storage = "_WarehouseId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long WarehouseId
        {
            get
            {
                return this._WarehouseId;
            }
            set
            {
                if (this._WarehouseId != value)
                {
                    if (this._Warehouse1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._WarehouseId = value;
                    this.SendPropertyChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"Secondary_Warehouse_Id", Storage = "_SecondaryWarehouseId", DbType = "NUMBER(10)")]
        public System.Nullable<long> SecondaryWarehouseId
        {
            get
            {
                return this._SecondaryWarehouseId;
            }
            set
            {
                if (this._SecondaryWarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSecondaryWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._SecondaryWarehouseId = value;
                    this.SendPropertyChanged("SecondaryWarehouseId");
                    this.OnSecondaryWarehouseIdChanged();
                }
            }
        }

        [Association(Name = "PartInfo_TransactionHistory", Storage = "_PartInfo", ThisKey = "PartInfoId", IsForeignKey = true)]
        public PartInfo PartInfo
        {
            get
            {
                return this._PartInfo.Entity;
            }
            set
            {
                PartInfo previousValue = this._PartInfo.Entity;
                if ((previousValue != value) || (this._PartInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PartInfo.Entity = null;
                        previousValue.TransactionHistories.Remove(this);
                    }
                    this._PartInfo.Entity = value;
                    if (value != null)
                    {
                        value.TransactionHistories.Add(this);
                        this._PartInfoId = value.PartInfoId;
                    }
                    else
                    {
                        this._PartInfoId = default(long);
                    }
                    this.SendPropertyChanged("PartInfo");
                }
            }
        }

        [Association(Name = "SystemData_TransactionHistory", Storage = "_SystemData", ThisKey = "TransactionCode", IsForeignKey = true)]
        public SystemData SystemData
        {
            get
            {
                return this._SystemData.Entity;
            }
            set
            {
                SystemData previousValue = this._SystemData.Entity;
                if ((previousValue != value) || (this._SystemData.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SystemData.Entity = null;
                        previousValue.TransactionHistories.Remove(this);
                    }
                    this._SystemData.Entity = value;
                    if (value != null)
                    {
                        value.TransactionHistories.Add(this);
                        this._TransactionCode = value.Code;
                    }
                    else
                    {
                        this._TransactionCode = default(string);
                    }
                    this.SendPropertyChanged("SystemData");
                }
            }
        }

        [Association(Name = "Vendor_TransactionHistory", Storage = "_Vendor", ThisKey = "VendorId", IsForeignKey = true)]
        public Vendor Vendor
        {
            get
            {
                return this._Vendor.Entity;
            }
            set
            {
                Vendor previousValue = this._Vendor.Entity;
                if ((previousValue != value) || (this._Vendor.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Vendor.Entity = null;
                        previousValue.TransactionHistories.Remove(this);
                    }
                    this._Vendor.Entity = value;
                    if (value != null)
                    {
                        value.TransactionHistories.Add(this);
                        this._VendorId = value.VendorId;
                    }
                    else
                    {
                        this._VendorId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Vendor");
                }
            }
        }

        [Association(Name = "Warehouse_TransactionHistory", Storage = "_Warehouse", ThisKey = "SecondaryWarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.TransactionHistories.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        value.TransactionHistories.Add(this);
                        this._SecondaryWarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._SecondaryWarehouseId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

        [Association(Name = "Warehouse_TransactionHistory1", Storage = "_Warehouse1", ThisKey = "WarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse1
        {
            get
            {
                return this._Warehouse1.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse1.Entity;
                if ((previousValue != value) || (this._Warehouse1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse1.Entity = null;
                        previousValue.TransactionHistories1.Remove(this);
                    }
                    this._Warehouse1.Entity = value;
                    if (value != null)
                    {
                        value.TransactionHistories1.Add(this);
                        this._WarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._WarehouseId = default(long);
                    }
                    this.SendPropertyChanged("Warehouse1");
                }
            }
        }

        [Association(Name = "Dealer_TransactionHistory", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.TransactionHistories.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.TransactionHistories.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_VENDOR")]
    public partial class Vendor : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _VendorId;

        private string _DealerCode;

        private System.Nullable<long> _ContactId;

        private string _Code;

        private string _Name;

        private EntityRef<Contact> _Contact;

        private EntitySet<TransactionHistory> _TransactionHistories;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnVendorIdChanging(long value);
        partial void OnVendorIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnContactIdChanging(System.Nullable<long> value);
        partial void OnContactIdChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Vendor()
        {
            this._Contact = default(EntityRef<Contact>);
            this._TransactionHistories = new EntitySet<TransactionHistory>(new Action<TransactionHistory>(this.attach_TransactionHistories), new Action<TransactionHistory>(this.detach_TransactionHistories));
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"VENDOR_ID", Storage = "_VendorId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long VendorId
        {
            get
            {
                return this._VendorId;
            }
            set
            {
                if (this._VendorId != value)
                {
                    this.OnVendorIdChanging(value);
                    this.SendPropertyChanging();
                    this._VendorId = value;
                    this.SendPropertyChanged("VendorId");
                    this.OnVendorIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"CONTACT_ID", Storage = "_ContactId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ContactId
        {
            get
            {
                return this._ContactId;
            }
            set
            {
                if (this._ContactId != value)
                {
                    if (this._Contact.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContactId = value;
                    this.SendPropertyChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }

        [Column(Name = @"CODE", Storage = "_Code", CanBeNull = false, DbType = "CHAR(30) NOT NULL")]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [Column(Name = @"NAME", Storage = "_Name", CanBeNull = false, DbType = "NVARCHAR2(750) NOT NULL")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Association(Name = "Contact_Vendor", Storage = "_Contact", ThisKey = "ContactId", IsForeignKey = true)]
        public Contact Contact
        {
            get
            {
                return this._Contact.Entity;
            }
            set
            {
                Contact previousValue = this._Contact.Entity;
                if ((previousValue != value) || (this._Contact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contact.Entity = null;
                        previousValue.Vendors.Remove(this);
                    }
                    this._Contact.Entity = value;
                    if (value != null)
                    {
                        value.Vendors.Add(this);
                        this._ContactId = value.ContactId;
                    }
                    else
                    {
                        this._ContactId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contact");
                }
            }
        }

        [Association(Name = "Vendor_TransactionHistory", Storage = "_TransactionHistories", OtherKey = "VendorId")]
        public EntitySet<TransactionHistory> TransactionHistories
        {
            get
            {
                return this._TransactionHistories;
            }
            set
            {
                this._TransactionHistories.Assign(value);
            }
        }

        [Association(Name = "Dealer_Vendor", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.Vendors.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.Vendors.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.Vendor = this;
        }

        private void detach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.Vendor = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_WAREHOUSE")]
    public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _WarehouseId;

        private string _DealerCode;

        private string _Code;

        private string _Address;

        private string _Type;

        private string _Status;

        private EntitySet<Inventory> _Inventories;

        private EntitySet<PartSafety> _PartSafeties;

        private EntitySet<ReceiveHeader> _ReceiveHeaders;

        private EntitySet<SalesHeader> _SalesHeaders;

        private EntitySet<TransactionHistory> _TransactionHistories;

        private EntitySet<TransactionHistory> _TransactionHistories1;

        private EntitySet<TransferHeader> _TransferHeaders;

        private EntitySet<TransferHeader> _TransferHeaders1;

        private EntitySet<InventoryLock> _InventoryLocks;

        private EntityRef<Dealer> _Dealer;

        private EntitySet<CycleCountHeader> _CycleCountHeaders;

        private EntitySet<OrderHeader> _OrderHeaders;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnWarehouseIdChanging(long value);
        partial void OnWarehouseIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        #endregion

        public Warehouse()
        {
            this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
            this._PartSafeties = new EntitySet<PartSafety>(new Action<PartSafety>(this.attach_PartSafeties), new Action<PartSafety>(this.detach_PartSafeties));
            this._ReceiveHeaders = new EntitySet<ReceiveHeader>(new Action<ReceiveHeader>(this.attach_ReceiveHeaders), new Action<ReceiveHeader>(this.detach_ReceiveHeaders));
            this._SalesHeaders = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeaders), new Action<SalesHeader>(this.detach_SalesHeaders));
            this._TransactionHistories = new EntitySet<TransactionHistory>(new Action<TransactionHistory>(this.attach_TransactionHistories), new Action<TransactionHistory>(this.detach_TransactionHistories));
            this._TransactionHistories1 = new EntitySet<TransactionHistory>(new Action<TransactionHistory>(this.attach_TransactionHistories1), new Action<TransactionHistory>(this.detach_TransactionHistories1));
            this._TransferHeaders = new EntitySet<TransferHeader>(new Action<TransferHeader>(this.attach_TransferHeaders), new Action<TransferHeader>(this.detach_TransferHeaders));
            this._TransferHeaders1 = new EntitySet<TransferHeader>(new Action<TransferHeader>(this.attach_TransferHeaders1), new Action<TransferHeader>(this.detach_TransferHeaders1));
            this._InventoryLocks = new EntitySet<InventoryLock>(new Action<InventoryLock>(this.attach_InventoryLocks), new Action<InventoryLock>(this.detach_InventoryLocks));
            this._Dealer = default(EntityRef<Dealer>);
            this._CycleCountHeaders = new EntitySet<CycleCountHeader>(new Action<CycleCountHeader>(this.attach_CycleCountHeaders), new Action<CycleCountHeader>(this.detach_CycleCountHeaders));
            this._OrderHeaders = new EntitySet<OrderHeader>(new Action<OrderHeader>(this.attach_OrderHeaders), new Action<OrderHeader>(this.detach_OrderHeaders));
            OnCreated();
        }

        [Column(Name = @"WAREHOUSE_ID", Storage = "_WarehouseId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long WarehouseId
        {
            get
            {
                return this._WarehouseId;
            }
            set
            {
                if (this._WarehouseId != value)
                {
                    this.OnWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._WarehouseId = value;
                    this.SendPropertyChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"CODE", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        [Column(Name = @"ADDRESS", Storage = "_Address", CanBeNull = false, DbType = "NVARCHAR2(765) NOT NULL")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [Column(Name = @"TYPE", Storage = "_Type", CanBeNull = false, DbType = "char(1) not null")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", DbType = "char(2)")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Association(Name = "Warehouse_Inventory", Storage = "_Inventories", OtherKey = "WarehouseId")]
        public EntitySet<Inventory> Inventories
        {
            get
            {
                return this._Inventories;
            }
            set
            {
                this._Inventories.Assign(value);
            }
        }

        [Association(Name = "Warehouse_PartSafety", Storage = "_PartSafeties", OtherKey = "WarehouseId")]
        public EntitySet<PartSafety> PartSafeties
        {
            get
            {
                return this._PartSafeties;
            }
            set
            {
                this._PartSafeties.Assign(value);
            }
        }

        [Association(Name = "Warehouse_ReceiveHeader", Storage = "_ReceiveHeaders", OtherKey = "WarehouseId")]
        public EntitySet<ReceiveHeader> ReceiveHeaders
        {
            get
            {
                return this._ReceiveHeaders;
            }
            set
            {
                this._ReceiveHeaders.Assign(value);
            }
        }

        [Association(Name = "Warehouse_SalesHeader", Storage = "_SalesHeaders", OtherKey = "WarehouseId")]
        public EntitySet<SalesHeader> SalesHeaders
        {
            get
            {
                return this._SalesHeaders;
            }
            set
            {
                this._SalesHeaders.Assign(value);
            }
        }

        [Association(Name = "Warehouse_TransactionHistory", Storage = "_TransactionHistories", OtherKey = "SecondaryWarehouseId")]
        public EntitySet<TransactionHistory> TransactionHistories
        {
            get
            {
                return this._TransactionHistories;
            }
            set
            {
                this._TransactionHistories.Assign(value);
            }
        }

        [Association(Name = "Warehouse_TransactionHistory1", Storage = "_TransactionHistories1", OtherKey = "WarehouseId")]
        public EntitySet<TransactionHistory> TransactionHistories1
        {
            get
            {
                return this._TransactionHistories1;
            }
            set
            {
                this._TransactionHistories1.Assign(value);
            }
        }

        [Association(Name = "Warehouse_TransferHeader", Storage = "_TransferHeaders", OtherKey = "FromWarehouseId")]
        public EntitySet<TransferHeader> TransferHeaders
        {
            get
            {
                return this._TransferHeaders;
            }
            set
            {
                this._TransferHeaders.Assign(value);
            }
        }

        [Association(Name = "Warehouse_TransferHeader1", Storage = "_TransferHeaders1", OtherKey = "ToWarehouseId")]
        public EntitySet<TransferHeader> TransferHeaders1
        {
            get
            {
                return this._TransferHeaders1;
            }
            set
            {
                this._TransferHeaders1.Assign(value);
            }
        }

        [Association(Name = "Warehouse_InventoryLock", Storage = "_InventoryLocks", OtherKey = "WarehouseId")]
        public EntitySet<InventoryLock> InventoryLocks
        {
            get
            {
                return this._InventoryLocks;
            }
            set
            {
                this._InventoryLocks.Assign(value);
            }
        }

        [Association(Name = "Dealer_Warehouse", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.Warehouses.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.Warehouses.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        [Association(Name = "Warehouse_CycleCountHeader", Storage = "_CycleCountHeaders", OtherKey = "WarehouseId")]
        public EntitySet<CycleCountHeader> CycleCountHeaders
        {
            get
            {
                return this._CycleCountHeaders;
            }
            set
            {
                this._CycleCountHeaders.Assign(value);
            }
        }

        [Association(Name = "Warehouse_OrderHeader", Storage = "_OrderHeaders", OtherKey = "ToLocation")]
        public EntitySet<OrderHeader> OrderHeaders
        {
            get
            {
                return this._OrderHeaders;
            }
            set
            {
                this._OrderHeaders.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Inventories(Inventory entity)
        {
            this.SendPropertyChanging("Inventories");
            entity.Warehouse = this;
        }

        private void detach_Inventories(Inventory entity)
        {
            this.SendPropertyChanging("Inventories");
            entity.Warehouse = null;
        }

        private void attach_PartSafeties(PartSafety entity)
        {
            this.SendPropertyChanging("PartSafeties");
            entity.Warehouse = this;
        }

        private void detach_PartSafeties(PartSafety entity)
        {
            this.SendPropertyChanging("PartSafeties");
            entity.Warehouse = null;
        }

        private void attach_ReceiveHeaders(ReceiveHeader entity)
        {
            this.SendPropertyChanging("ReceiveHeaders");
            entity.Warehouse = this;
        }

        private void detach_ReceiveHeaders(ReceiveHeader entity)
        {
            this.SendPropertyChanging("ReceiveHeaders");
            entity.Warehouse = null;
        }

        private void attach_SalesHeaders(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeaders");
            entity.Warehouse = this;
        }

        private void detach_SalesHeaders(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeaders");
            entity.Warehouse = null;
        }

        private void attach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.Warehouse = this;
        }

        private void detach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.Warehouse = null;
        }

        private void attach_TransactionHistories1(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories1");
            entity.Warehouse1 = this;
        }

        private void detach_TransactionHistories1(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories1");
            entity.Warehouse1 = null;
        }

        private void attach_TransferHeaders(TransferHeader entity)
        {
            this.SendPropertyChanging("TransferHeaders");
            entity.Warehouse = this;
        }

        private void detach_TransferHeaders(TransferHeader entity)
        {
            this.SendPropertyChanging("TransferHeaders");
            entity.Warehouse = null;
        }

        private void attach_TransferHeaders1(TransferHeader entity)
        {
            this.SendPropertyChanging("TransferHeaders1");
            entity.Warehouse1 = this;
        }

        private void detach_TransferHeaders1(TransferHeader entity)
        {
            this.SendPropertyChanging("TransferHeaders1");
            entity.Warehouse1 = null;
        }

        private void attach_InventoryLocks(InventoryLock entity)
        {
            this.SendPropertyChanging("InventoryLocks");
            entity.Warehouse = this;
        }

        private void detach_InventoryLocks(InventoryLock entity)
        {
            this.SendPropertyChanging("InventoryLocks");
            entity.Warehouse = null;
        }

        private void attach_CycleCountHeaders(CycleCountHeader entity)
        {
            this.SendPropertyChanging("CycleCountHeaders");
            entity.Warehouse = this;
        }

        private void detach_CycleCountHeaders(CycleCountHeader entity)
        {
            this.SendPropertyChanging("CycleCountHeaders");
            entity.Warehouse = null;
        }

        private void attach_OrderHeaders(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders");
            entity.Warehouse = this;
        }

        private void detach_OrderHeaders(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders");
            entity.Warehouse = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_TRANSFER_DETAIL")]
    public partial class TransferDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TransferDetailId;

        private long _TransferHeaderId;

        private long _PartInfoId;

        private string _PartCode;

        private int _Quantity;

        private string _PartComment;

        private EntityRef<PartInfo> _PartInfo;

        private EntityRef<TransferHeader> _TransferHeader;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTransferDetailIdChanging(long value);
        partial void OnTransferDetailIdChanged();
        partial void OnTransferHeaderIdChanging(long value);
        partial void OnTransferHeaderIdChanged();
        partial void OnPartInfoIdChanging(long value);
        partial void OnPartInfoIdChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnPartCommentChanging(string value);
        partial void OnPartCommentChanged();
        #endregion

        public TransferDetail()
        {
            this._PartInfo = default(EntityRef<PartInfo>);
            this._TransferHeader = default(EntityRef<TransferHeader>);
            OnCreated();
        }

        [Column(Name = @"TRANSFER_DETAIL_ID", Storage = "_TransferDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long TransferDetailId
        {
            get
            {
                return this._TransferDetailId;
            }
            set
            {
                if (this._TransferDetailId != value)
                {
                    this.OnTransferDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransferDetailId = value;
                    this.SendPropertyChanged("TransferDetailId");
                    this.OnTransferDetailIdChanged();
                }
            }
        }

        [Column(Name = @"TRANSFER_HEADER_ID", Storage = "_TransferHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long TransferHeaderId
        {
            get
            {
                return this._TransferHeaderId;
            }
            set
            {
                if (this._TransferHeaderId != value)
                {
                    if (this._TransferHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTransferHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransferHeaderId = value;
                    this.SendPropertyChanged("TransferHeaderId");
                    this.OnTransferHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"PART_INFO_ID", Storage = "_PartInfoId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long PartInfoId
        {
            get
            {
                return this._PartInfoId;
            }
            set
            {
                if (this._PartInfoId != value)
                {
                    if (this._PartInfo.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPartInfoIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartInfoId = value;
                    this.SendPropertyChanged("PartInfoId");
                    this.OnPartInfoIdChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", DbType = "VARCHAR2(40)")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"QUANTITY", Storage = "_Quantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

        [Column(Name = @"Part_Comment", Storage = "_PartComment", DbType = "nvarchar2(768)")]
        public string PartComment
        {
            get
            {
                return this._PartComment;
            }
            set
            {
                if (this._PartComment != value)
                {
                    this.OnPartCommentChanging(value);
                    this.SendPropertyChanging();
                    this._PartComment = value;
                    this.SendPropertyChanged("PartComment");
                    this.OnPartCommentChanged();
                }
            }
        }

        [Association(Name = "PartInfo_TransferDetail", Storage = "_PartInfo", ThisKey = "PartInfoId", IsForeignKey = true)]
        public PartInfo PartInfo
        {
            get
            {
                return this._PartInfo.Entity;
            }
            set
            {
                PartInfo previousValue = this._PartInfo.Entity;
                if ((previousValue != value) || (this._PartInfo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PartInfo.Entity = null;
                        previousValue.TransferDetails.Remove(this);
                    }
                    this._PartInfo.Entity = value;
                    if (value != null)
                    {
                        value.TransferDetails.Add(this);
                        this._PartInfoId = value.PartInfoId;
                    }
                    else
                    {
                        this._PartInfoId = default(long);
                    }
                    this.SendPropertyChanged("PartInfo");
                }
            }
        }

        [Association(Name = "TransferHeader_TransferDetail", Storage = "_TransferHeader", ThisKey = "TransferHeaderId", IsForeignKey = true)]
        public TransferHeader TransferHeader
        {
            get
            {
                return this._TransferHeader.Entity;
            }
            set
            {
                TransferHeader previousValue = this._TransferHeader.Entity;
                if ((previousValue != value) || (this._TransferHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._TransferHeader.Entity = null;
                        previousValue.TransferDetails.Remove(this);
                    }
                    this._TransferHeader.Entity = value;
                    if (value != null)
                    {
                        value.TransferDetails.Add(this);
                        this._TransferHeaderId = value.TransferHeaderId;
                    }
                    else
                    {
                        this._TransferHeaderId = default(long);
                    }
                    this.SendPropertyChanged("TransferHeader");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_TRANSFER_HEADER")]
    public partial class TransferHeader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TransferHeaderId;

        private string _DealerCode;

        private System.DateTime _CreatedDate;

        private string _CreatedBy;

        private long _FromWarehouseId;

        private long _ToWarehouseId;

        private string _Status;

        private System.Nullable<System.DateTime> _TransferDate;

        private string _TransferComment;

        private string _VoucherNumber;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<Warehouse> _Warehouse1;

        private EntitySet<TransferDetail> _TransferDetails;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTransferHeaderIdChanging(long value);
        partial void OnTransferHeaderIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnFromWarehouseIdChanging(long value);
        partial void OnFromWarehouseIdChanged();
        partial void OnToWarehouseIdChanging(long value);
        partial void OnToWarehouseIdChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTransferDateChanging(System.Nullable<System.DateTime> value);
        partial void OnTransferDateChanged();
        partial void OnTransferCommentChanging(string value);
        partial void OnTransferCommentChanged();
        partial void OnVoucherNumberChanging(string value);
        partial void OnVoucherNumberChanged();
        #endregion

        public TransferHeader()
        {
            this._Warehouse = default(EntityRef<Warehouse>);
            this._Warehouse1 = default(EntityRef<Warehouse>);
            this._TransferDetails = new EntitySet<TransferDetail>(new Action<TransferDetail>(this.attach_TransferDetails), new Action<TransferDetail>(this.detach_TransferDetails));
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"TRANSFER_HEADER_ID", Storage = "_TransferHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long TransferHeaderId
        {
            get
            {
                return this._TransferHeaderId;
            }
            set
            {
                if (this._TransferHeaderId != value)
                {
                    this.OnTransferHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransferHeaderId = value;
                    this.SendPropertyChanged("TransferHeaderId");
                    this.OnTransferHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"CREATED_BY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(768) NOT NULL")]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

        [Column(Name = @"FROM_WAREHOUSE_ID", Storage = "_FromWarehouseId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long FromWarehouseId
        {
            get
            {
                return this._FromWarehouseId;
            }
            set
            {
                if (this._FromWarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFromWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._FromWarehouseId = value;
                    this.SendPropertyChanged("FromWarehouseId");
                    this.OnFromWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"TO_WAREHOUSE_ID", Storage = "_ToWarehouseId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long ToWarehouseId
        {
            get
            {
                return this._ToWarehouseId;
            }
            set
            {
                if (this._ToWarehouseId != value)
                {
                    if (this._Warehouse1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnToWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._ToWarehouseId = value;
                    this.SendPropertyChanged("ToWarehouseId");
                    this.OnToWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"Transfer_Date", Storage = "_TransferDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> TransferDate
        {
            get
            {
                return this._TransferDate;
            }
            set
            {
                if (this._TransferDate != value)
                {
                    this.OnTransferDateChanging(value);
                    this.SendPropertyChanging();
                    this._TransferDate = value;
                    this.SendPropertyChanged("TransferDate");
                    this.OnTransferDateChanged();
                }
            }
        }

        [Column(Name = @"Transfer_Comment", Storage = "_TransferComment", DbType = "nvarchar2(768)")]
        public string TransferComment
        {
            get
            {
                return this._TransferComment;
            }
            set
            {
                if (this._TransferComment != value)
                {
                    this.OnTransferCommentChanging(value);
                    this.SendPropertyChanging();
                    this._TransferComment = value;
                    this.SendPropertyChanged("TransferComment");
                    this.OnTransferCommentChanged();
                }
            }
        }

        [Column(Name = @"Voucher_Number", Storage = "_VoucherNumber", DbType = "varchar2(30)")]
        public string VoucherNumber
        {
            get
            {
                return this._VoucherNumber;
            }
            set
            {
                if (this._VoucherNumber != value)
                {
                    this.OnVoucherNumberChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherNumber = value;
                    this.SendPropertyChanged("VoucherNumber");
                    this.OnVoucherNumberChanged();
                }
            }
        }

        [Association(Name = "Warehouse_TransferHeader", Storage = "_Warehouse", ThisKey = "FromWarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.TransferHeaders.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        value.TransferHeaders.Add(this);
                        this._FromWarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._FromWarehouseId = default(long);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

        [Association(Name = "Warehouse_TransferHeader1", Storage = "_Warehouse1", ThisKey = "ToWarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse1
        {
            get
            {
                return this._Warehouse1.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse1.Entity;
                if ((previousValue != value) || (this._Warehouse1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse1.Entity = null;
                        previousValue.TransferHeaders1.Remove(this);
                    }
                    this._Warehouse1.Entity = value;
                    if (value != null)
                    {
                        value.TransferHeaders1.Add(this);
                        this._ToWarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._ToWarehouseId = default(long);
                    }
                    this.SendPropertyChanged("Warehouse1");
                }
            }
        }

        [Association(Name = "TransferHeader_TransferDetail", Storage = "_TransferDetails", OtherKey = "TransferHeaderId")]
        public EntitySet<TransferDetail> TransferDetails
        {
            get
            {
                return this._TransferDetails;
            }
            set
            {
                this._TransferDetails.Assign(value);
            }
        }

        [Association(Name = "Dealer_TransferHeader", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.TransferHeaders.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.TransferHeaders.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_TransferDetails(TransferDetail entity)
        {
            this.SendPropertyChanging("TransferDetails");
            entity.TransferHeader = this;
        }

        private void detach_TransferDetails(TransferDetail entity)
        {
            this.SendPropertyChanging("TransferDetails");
            entity.TransferHeader = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_INVENTORY_LOCK")]
    public partial class InventoryLock : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _InventoryLockId;

        private int _Month;

        private int _Year;

        private string _DealerCode;

        private System.Nullable<long> _WarehouseId;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInventoryLockIdChanging(long value);
        partial void OnInventoryLockIdChanged();
        partial void OnMonthChanging(int value);
        partial void OnMonthChanged();
        partial void OnYearChanging(int value);
        partial void OnYearChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnWarehouseIdChanging(System.Nullable<long> value);
        partial void OnWarehouseIdChanged();
        #endregion

        public InventoryLock()
        {
            this._Warehouse = default(EntityRef<Warehouse>);
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"INVENTORY_LOCK_ID", Storage = "_InventoryLockId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long InventoryLockId
        {
            get
            {
                return this._InventoryLockId;
            }
            set
            {
                if (this._InventoryLockId != value)
                {
                    this.OnInventoryLockIdChanging(value);
                    this.SendPropertyChanging();
                    this._InventoryLockId = value;
                    this.SendPropertyChanged("InventoryLockId");
                    this.OnInventoryLockIdChanged();
                }
            }
        }

        [Column(Name = @"MONTH", Storage = "_Month", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int Month
        {
            get
            {
                return this._Month;
            }
            set
            {
                if (this._Month != value)
                {
                    this.OnMonthChanging(value);
                    this.SendPropertyChanging();
                    this._Month = value;
                    this.SendPropertyChanged("Month");
                    this.OnMonthChanged();
                }
            }
        }

        [Column(Name = @"YEAR", Storage = "_Year", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int Year
        {
            get
            {
                return this._Year;
            }
            set
            {
                if (this._Year != value)
                {
                    this.OnYearChanging(value);
                    this.SendPropertyChanging();
                    this._Year = value;
                    this.SendPropertyChanged("Year");
                    this.OnYearChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"WAREHOUSE_ID", Storage = "_WarehouseId", DbType = "NUMBER(10)")]
        public System.Nullable<long> WarehouseId
        {
            get
            {
                return this._WarehouseId;
            }
            set
            {
                if (this._WarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._WarehouseId = value;
                    this.SendPropertyChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }

        [Association(Name = "Warehouse_InventoryLock", Storage = "_Warehouse", ThisKey = "WarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.InventoryLocks.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        value.InventoryLocks.Add(this);
                        this._WarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._WarehouseId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

        [Association(Name = "Dealer_InventoryLock", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.InventoryLocks.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.InventoryLocks.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.VIEW_ALL_TC_VDN_FILE")]
    public partial class PartModel : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _Model;

        private string _PartCode;

        private System.Nullable<System.DateTime> _EffectiveDate;

        private System.Nullable<System.DateTime> _EndDate;

        private System.Nullable<System.DateTime> _CreatedDate;

        private string _DatabaseCode;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnEffectiveDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEffectiveDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreatedDateChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        #endregion

        public PartModel()
        {
            OnCreated();
        }

        [Column(Name = @"PARENT", Storage = "_Model", DbType = "VARCHAR2(30)", UpdateCheck = UpdateCheck.Never)]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

        [Column(Name = @"CHILD", Storage = "_PartCode", DbType = "VARCHAR2(30)", UpdateCheck = UpdateCheck.Never)]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"EFFECTIVE", Storage = "_EffectiveDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> EffectiveDate
        {
            get
            {
                return this._EffectiveDate;
            }
            set
            {
                if (this._EffectiveDate != value)
                {
                    this.OnEffectiveDateChanging(value);
                    this.SendPropertyChanging();
                    this._EffectiveDate = value;
                    this.SendPropertyChanged("EffectiveDate");
                    this.OnEffectiveDateChanged();
                }
            }
        }

        [Column(Name = @"END_DATE", Storage = "_EndDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        [Column(Name = @"CREATEDATE", Storage = "_CreatedDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"DATABASECODE", Storage = "_DatabaseCode", DbType = "CHAR(3)", UpdateCheck = UpdateCheck.Never)]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.TC_VDP_FILE")]
    public partial class IOrderHeader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _VDMSOrderId;

        private string _TipTopOrderNumber;

        private string _DealerCode;

        private string _DeliveryCode;

        private string _InvoiceCode;

        private System.DateTime _OrderDate;

        private System.Nullable<System.DateTime> _QuotationDate;

        private System.Nullable<System.DateTime> _PaymentDate;

        private System.Nullable<System.DateTime> _DeliveryDate;

        private System.Nullable<System.DateTime> _ShippingDate;

        private string _OrderType;

        private string _Flag;

        private string _TipTopProcess;

        private string _OrderComment;

        private string _DatabaseCode;

        private string _TC_VDP16;

        private System.Nullable<double> _TC_VDP17;

        private System.Nullable<System.DateTime> _TC_VDP18;

        private EntitySet<IOrderDetail> _IOrderDetails;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnVDMSOrderIdChanging(long value);
        partial void OnVDMSOrderIdChanged();
        partial void OnTipTopOrderNumberChanging(string value);
        partial void OnTipTopOrderNumberChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnDeliveryCodeChanging(string value);
        partial void OnDeliveryCodeChanged();
        partial void OnInvoiceCodeChanging(string value);
        partial void OnInvoiceCodeChanged();
        partial void OnOrderDateChanging(System.DateTime value);
        partial void OnOrderDateChanged();
        partial void OnQuotationDateChanging(System.Nullable<System.DateTime> value);
        partial void OnQuotationDateChanged();
        partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPaymentDateChanged();
        partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDeliveryDateChanged();
        partial void OnShippingDateChanging(System.Nullable<System.DateTime> value);
        partial void OnShippingDateChanged();
        partial void OnOrderTypeChanging(string value);
        partial void OnOrderTypeChanged();
        partial void OnFlagChanging(string value);
        partial void OnFlagChanged();
        partial void OnTipTopProcessChanging(string value);
        partial void OnTipTopProcessChanged();
        partial void OnOrderCommentChanging(string value);
        partial void OnOrderCommentChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnTC_VDP16Changing(string value);
        partial void OnTC_VDP16Changed();
        partial void OnTC_VDP17Changing(System.Nullable<double> value);
        partial void OnTC_VDP17Changed();
        partial void OnTC_VDP18Changing(System.Nullable<System.DateTime> value);
        partial void OnTC_VDP18Changed();
        #endregion

        public IOrderHeader()
        {
            this._IOrderDetails = new EntitySet<IOrderDetail>(new Action<IOrderDetail>(this.attach_IOrderDetails), new Action<IOrderDetail>(this.detach_IOrderDetails));
            OnCreated();
        }

        [Column(Name = @"TC_VDP01", Storage = "_VDMSOrderId", CanBeNull = false, DbType = "NUMBER(19) NOT NULL", IsPrimaryKey = true)]
        public long VDMSOrderId
        {
            get
            {
                return this._VDMSOrderId;
            }
            set
            {
                if (this._VDMSOrderId != value)
                {
                    this.OnVDMSOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._VDMSOrderId = value;
                    this.SendPropertyChanged("VDMSOrderId");
                    this.OnVDMSOrderIdChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP02", Storage = "_TipTopOrderNumber", DbType = "VARCHAR2(30)")]
        public string TipTopOrderNumber
        {
            get
            {
                return this._TipTopOrderNumber;
            }
            set
            {
                if (this._TipTopOrderNumber != value)
                {
                    this.OnTipTopOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._TipTopOrderNumber = value;
                    this.SendPropertyChanged("TipTopOrderNumber");
                    this.OnTipTopOrderNumberChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP03", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP04", Storage = "_DeliveryCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DeliveryCode
        {
            get
            {
                return this._DeliveryCode;
            }
            set
            {
                if (this._DeliveryCode != value)
                {
                    this.OnDeliveryCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryCode = value;
                    this.SendPropertyChanged("DeliveryCode");
                    this.OnDeliveryCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP05", Storage = "_InvoiceCode", DbType = "VARCHAR2(30)")]
        public string InvoiceCode
        {
            get
            {
                return this._InvoiceCode;
            }
            set
            {
                if (this._InvoiceCode != value)
                {
                    this.OnInvoiceCodeChanging(value);
                    this.SendPropertyChanging();
                    this._InvoiceCode = value;
                    this.SendPropertyChanged("InvoiceCode");
                    this.OnInvoiceCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP06", Storage = "_OrderDate", CanBeNull = false, DbType = "TIMESTAMP(6) NOT NULL")]
        public System.DateTime OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP07", Storage = "_QuotationDate", DbType = "TIMESTAMP(6)")]
        public System.Nullable<System.DateTime> QuotationDate
        {
            get
            {
                return this._QuotationDate;
            }
            set
            {
                if (this._QuotationDate != value)
                {
                    this.OnQuotationDateChanging(value);
                    this.SendPropertyChanging();
                    this._QuotationDate = value;
                    this.SendPropertyChanged("QuotationDate");
                    this.OnQuotationDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP08", Storage = "_PaymentDate", DbType = "TIMESTAMP(6)")]
        public System.Nullable<System.DateTime> PaymentDate
        {
            get
            {
                return this._PaymentDate;
            }
            set
            {
                if (this._PaymentDate != value)
                {
                    this.OnPaymentDateChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentDate = value;
                    this.SendPropertyChanged("PaymentDate");
                    this.OnPaymentDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP09", Storage = "_DeliveryDate", DbType = "TIMESTAMP(6)")]
        public System.Nullable<System.DateTime> DeliveryDate
        {
            get
            {
                return this._DeliveryDate;
            }
            set
            {
                if (this._DeliveryDate != value)
                {
                    this.OnDeliveryDateChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryDate = value;
                    this.SendPropertyChanged("DeliveryDate");
                    this.OnDeliveryDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP10", Storage = "_ShippingDate", DbType = "TIMESTAMP(6)")]
        public System.Nullable<System.DateTime> ShippingDate
        {
            get
            {
                return this._ShippingDate;
            }
            set
            {
                if (this._ShippingDate != value)
                {
                    this.OnShippingDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingDate = value;
                    this.SendPropertyChanged("ShippingDate");
                    this.OnShippingDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP11", Storage = "_OrderType", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string OrderType
        {
            get
            {
                return this._OrderType;
            }
            set
            {
                if (this._OrderType != value)
                {
                    this.OnOrderTypeChanging(value);
                    this.SendPropertyChanging();
                    this._OrderType = value;
                    this.SendPropertyChanged("OrderType");
                    this.OnOrderTypeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP12", Storage = "_Flag", DbType = "CHAR(2)")]
        public string Flag
        {
            get
            {
                return this._Flag;
            }
            set
            {
                if (this._Flag != value)
                {
                    this.OnFlagChanging(value);
                    this.SendPropertyChanging();
                    this._Flag = value;
                    this.SendPropertyChanged("Flag");
                    this.OnFlagChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP13", Storage = "_TipTopProcess", DbType = "CHAR(1)")]
        public string TipTopProcess
        {
            get
            {
                return this._TipTopProcess;
            }
            set
            {
                if (this._TipTopProcess != value)
                {
                    this.OnTipTopProcessChanging(value);
                    this.SendPropertyChanging();
                    this._TipTopProcess = value;
                    this.SendPropertyChanged("TipTopProcess");
                    this.OnTipTopProcessChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP14", Storage = "_OrderComment", DbType = "VARCHAR2(250)")]
        public string OrderComment
        {
            get
            {
                return this._OrderComment;
            }
            set
            {
                if (this._OrderComment != value)
                {
                    this.OnOrderCommentChanging(value);
                    this.SendPropertyChanging();
                    this._OrderComment = value;
                    this.SendPropertyChanged("OrderComment");
                    this.OnOrderCommentChanged();
                }
            }
        }

        [Column(Name = @"TC_VDP15", Storage = "_DatabaseCode", DbType = "CHAR(3)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Storage = "_TC_VDP16", DbType = "VARCHAR2(200)")]
        public string TC_VDP16
        {
            get
            {
                return this._TC_VDP16;
            }
            set
            {
                if (this._TC_VDP16 != value)
                {
                    this.OnTC_VDP16Changing(value);
                    this.SendPropertyChanging();
                    this._TC_VDP16 = value;
                    this.SendPropertyChanged("TC_VDP16");
                    this.OnTC_VDP16Changed();
                }
            }
        }

        [Column(Storage = "_TC_VDP17", DbType = "NUMBER(10)")]
        public System.Nullable<double> TC_VDP17
        {
            get
            {
                return this._TC_VDP17;
            }
            set
            {
                if (this._TC_VDP17 != value)
                {
                    this.OnTC_VDP17Changing(value);
                    this.SendPropertyChanging();
                    this._TC_VDP17 = value;
                    this.SendPropertyChanged("TC_VDP17");
                    this.OnTC_VDP17Changed();
                }
            }
        }

        [Column(Storage = "_TC_VDP18", DbType = "TIMESTAMP(6)")]
        public System.Nullable<System.DateTime> TC_VDP18
        {
            get
            {
                return this._TC_VDP18;
            }
            set
            {
                if (this._TC_VDP18 != value)
                {
                    this.OnTC_VDP18Changing(value);
                    this.SendPropertyChanging();
                    this._TC_VDP18 = value;
                    this.SendPropertyChanged("TC_VDP18");
                    this.OnTC_VDP18Changed();
                }
            }
        }

        [Association(Name = "IOrderHeader_IOrderDetail", Storage = "_IOrderDetails", OtherKey = "VDMSOrderId")]
        public EntitySet<IOrderDetail> IOrderDetails
        {
            get
            {
                return this._IOrderDetails;
            }
            set
            {
                this._IOrderDetails.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_IOrderDetails(IOrderDetail entity)
        {
            this.SendPropertyChanging("IOrderDetails");
            entity.IOrderHeader = this;
        }

        private void detach_IOrderDetails(IOrderDetail entity)
        {
            this.SendPropertyChanging("IOrderDetails");
            entity.IOrderHeader = null;
        }
    }

    [Table(Name = @"VDMS.TC_VDQ_FILE")]
    public partial class IOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _VDMSOrderId;

        private int _LineNumber;

        private string _PartCode;

        private System.Nullable<int> _OrderQuantity;

        private System.Nullable<int> _ConfirmQuantity;

        private long _Price;

        private string _TC_VDQ07;

        private System.Nullable<double> _TC_VDQ08;

        private System.Nullable<System.DateTime> _TC_VDQ09;

        private string _TC_VDQ10;

        private string _TC_VDQ11;

        private System.Nullable<int> _OriginalQty;

        private System.Nullable<char> _Quo_Status;

        private EntityRef<IOrderHeader> _IOrderHeader;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnVDMSOrderIdChanging(long value);
        partial void OnVDMSOrderIdChanged();
        partial void OnLineNumberChanging(int value);
        partial void OnLineNumberChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnOrderQuantityChanging(System.Nullable<int> value);
        partial void OnOrderQuantityChanged();
        partial void OnConfirmQuantityChanging(System.Nullable<int> value);
        partial void OnConfirmQuantityChanged();
        partial void OnPriceChanging(long value);
        partial void OnPriceChanged();
        partial void OnTC_VDQ07Changing(string value);
        partial void OnTC_VDQ07Changed();
        partial void OnTC_VDQ08Changing(System.Nullable<double> value);
        partial void OnTC_VDQ08Changed();
        partial void OnTC_VDQ09Changing(System.Nullable<System.DateTime> value);
        partial void OnTC_VDQ09Changed();
        partial void OnTC_VDQ10Changing(string value);
        partial void OnTC_VDQ10Changed();
        partial void OnTC_VDQ11Changing(string value);
        partial void OnTC_VDQ11Changed();
        partial void OnOriginalQtyChanging(System.Nullable<int> value);
        partial void OnOriginalQtyChanged();
        partial void OnQuo_StatusChanging(System.Nullable<int> value);
        partial void OnQuo_StatusChanged();

        #endregion

        public IOrderDetail()
        {
            this._IOrderHeader = default(EntityRef<IOrderHeader>);
            OnCreated();
        }

        [Column(Name = @"TC_VDQ01", Storage = "_VDMSOrderId", CanBeNull = false, DbType = "NUMBER(19) NOT NULL", IsPrimaryKey = true)]
        public long VDMSOrderId
        {
            get
            {
                return this._VDMSOrderId;
            }
            set
            {
                if (this._VDMSOrderId != value)
                {
                    if (this._IOrderHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnVDMSOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._VDMSOrderId = value;
                    this.SendPropertyChanged("VDMSOrderId");
                    this.OnVDMSOrderIdChanged();
                }
            }
        }

        [Column(Name = @"TC_VDQ02", Storage = "_LineNumber", CanBeNull = false, DbType = "NUMBER(38) NOT NULL", IsPrimaryKey = true)]
        public int LineNumber
        {
            get
            {
                return this._LineNumber;
            }
            set
            {
                if (this._LineNumber != value)
                {
                    this.OnLineNumberChanging(value);
                    this.SendPropertyChanging();
                    this._LineNumber = value;
                    this.SendPropertyChanged("LineNumber");
                    this.OnLineNumberChanged();
                }
            }
        }

        [Column(Name = @"TC_VDQ03", Storage = "_PartCode", DbType = "VARCHAR2(30)")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDQ04", Storage = "_OrderQuantity", DbType = "NUMBER(38)")]
        public System.Nullable<int> OrderQuantity
        {
            get
            {
                return this._OrderQuantity;
            }
            set
            {
                if (this._OrderQuantity != value)
                {
                    this.OnOrderQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._OrderQuantity = value;
                    this.SendPropertyChanged("OrderQuantity");
                    this.OnOrderQuantityChanged();
                }
            }
        }

        [Column(Name = @"TC_VDQ05", Storage = "_ConfirmQuantity", DbType = "NUMBER(38)")]
        public System.Nullable<int> ConfirmQuantity
        {
            get
            {
                return this._ConfirmQuantity;
            }
            set
            {
                if (this._ConfirmQuantity != value)
                {
                    this.OnConfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmQuantity = value;
                    this.SendPropertyChanged("ConfirmQuantity");
                    this.OnConfirmQuantityChanged();
                }
            }
        }

        [Column(Name = @"TC_VDQ06", Storage = "_Price", CanBeNull = false, DbType = "NUMBER(19) NOT NULL")]
        public long Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

        [Column(Storage = "_TC_VDQ07", DbType = "VARCHAR2(299)")]
        public string TC_VDQ07
        {
            get
            {
                return this._TC_VDQ07;
            }
            set
            {
                if (this._TC_VDQ07 != value)
                {
                    this.OnTC_VDQ07Changing(value);
                    this.SendPropertyChanging();
                    this._TC_VDQ07 = value;
                    this.SendPropertyChanged("TC_VDQ07");
                    this.OnTC_VDQ07Changed();
                }
            }
        }

        [Column(Storage = "_TC_VDQ08", DbType = "NUMBER(10)")]
        public System.Nullable<double> TC_VDQ08
        {
            get
            {
                return this._TC_VDQ08;
            }
            set
            {
                if (this._TC_VDQ08 != value)
                {
                    this.OnTC_VDQ08Changing(value);
                    this.SendPropertyChanging();
                    this._TC_VDQ08 = value;
                    this.SendPropertyChanged("TC_VDQ08");
                    this.OnTC_VDQ08Changed();
                }
            }
        }

        [Column(Storage = "_TC_VDQ09", DbType = "TIMESTAMP(6)")]
        public System.Nullable<System.DateTime> TC_VDQ09
        {
            get
            {
                return this._TC_VDQ09;
            }
            set
            {
                if (this._TC_VDQ09 != value)
                {
                    this.OnTC_VDQ09Changing(value);
                    this.SendPropertyChanging();
                    this._TC_VDQ09 = value;
                    this.SendPropertyChanged("TC_VDQ09");
                    this.OnTC_VDQ09Changed();
                }
            }
        }

        [Column(Storage = "_TC_VDQ10", DbType = "varchar2(1)")]
        public string TC_VDQ10
        {
            get
            {
                return this._TC_VDQ10;
            }
            set
            {
                if (this._TC_VDQ10 != value)
                {
                    this.OnTC_VDQ10Changing(value);
                    this.SendPropertyChanging();
                    this._TC_VDQ10 = value;
                    this.SendPropertyChanged("TC_VDQ10");
                    this.OnTC_VDQ10Changed();
                }
            }
        }

        [Column(Storage = "_TC_VDQ11", DbType = "varchar2(250)")]
        public string TC_VDQ11
        {
            get
            {
                return this._TC_VDQ11;
            }
            set
            {
                if (this._TC_VDQ11 != value)
                {
                    this.OnTC_VDQ11Changing(value);
                    this.SendPropertyChanging();
                    this._TC_VDQ11 = value;
                    this.SendPropertyChanged("TC_VDQ11");
                    this.OnTC_VDQ11Changed();
                }
            }
        }

        [Column(Name = @"TC_VDQ12", Storage = "_OriginalQty", DbType = "NUMBER(38)")]
        public System.Nullable<int> OriginalQty
        {
            get
            {
                return this._OriginalQty;
            }
            set 
            {
                if (this._OriginalQty != value)
                {
                    this.OnOriginalQtyChanging(value);
                    this.SendPropertyChanging();
                    this._OriginalQty = value;
                    this.SendPropertyChanged("OriginalQty");
                    this.OnOriginalQtyChanged();
                }
            }
        }

        [Column(Name = @"TC_VDQ13", Storage = "_Quo_Status", DbType = "CHAR(1)")]
        public System.Nullable<char> Quo_Status
        {
            get
            {
                return this._Quo_Status;
            }
            set
            {
                if (this._Quo_Status != value)
                {
                    this.OnQuo_StatusChanging(value);
                    this.SendPropertyChanging();
                    this._Quo_Status = value;
                    this.SendPropertyChanged("Quo_Status");
                    this.OnQuo_StatusChanged();
                }
            }
        }

        [Association(Name = "IOrderHeader_IOrderDetail", Storage = "_IOrderHeader", ThisKey = "VDMSOrderId", IsForeignKey = true)]
        public IOrderHeader IOrderHeader
        {
            get
            {
                return this._IOrderHeader.Entity;
            }
            set
            {
                IOrderHeader previousValue = this._IOrderHeader.Entity;
                if ((previousValue != value) || (this._IOrderHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._IOrderHeader.Entity = null;
                        previousValue.IOrderDetails.Remove(this);
                    }
                    this._IOrderHeader.Entity = value;
                    if (value != null)
                    {
                        value.IOrderDetails.Add(this);
                        this._VDMSOrderId = value.VDMSOrderId;
                    }
                    else
                    {
                        this._VDMSOrderId = default(long);
                    }
                    this.SendPropertyChanged("IOrderHeader");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.TC_VDR_FILE")]
    public partial class IShipping : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _VDMSOrderId;

        private int _LineNumber;

        private string _IssueNumber;

        private string _PartCode;

        private int _ShippingQuantity;

        private System.DateTime _ShippingDate;

        private string _Flag;

        private string _NotGoodNumber;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnVDMSOrderIdChanging(long value);
        partial void OnVDMSOrderIdChanged();
        partial void OnLineNumberChanging(int value);
        partial void OnLineNumberChanged();
        partial void OnIssueNumberChanging(string value);
        partial void OnIssueNumberChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnShippingQuantityChanging(int value);
        partial void OnShippingQuantityChanged();
        partial void OnShippingDateChanging(System.DateTime value);
        partial void OnShippingDateChanged();
        partial void OnFlagChanging(string value);
        partial void OnFlagChanged();
        partial void OnNotGoodNumberChanging(string value);
        partial void OnNotGoodNumberChanged();
        #endregion

        public IShipping()
        {
            OnCreated();
        }

        [Column(Name = @"TC_VDR01", Storage = "_VDMSOrderId", CanBeNull = false, DbType = "NUMBER(19) NOT NULL", IsPrimaryKey = true)]
        public long VDMSOrderId
        {
            get
            {
                return this._VDMSOrderId;
            }
            set
            {
                if (this._VDMSOrderId != value)
                {
                    this.OnVDMSOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._VDMSOrderId = value;
                    this.SendPropertyChanged("VDMSOrderId");
                    this.OnVDMSOrderIdChanged();
                }
            }
        }

        [Column(Name = @"TC_VDR02", Storage = "_LineNumber", CanBeNull = false, DbType = "NUMBER(38) NOT NULL", IsPrimaryKey = true)]
        public int LineNumber
        {
            get
            {
                return this._LineNumber;
            }
            set
            {
                if (this._LineNumber != value)
                {
                    this.OnLineNumberChanging(value);
                    this.SendPropertyChanging();
                    this._LineNumber = value;
                    this.SendPropertyChanged("LineNumber");
                    this.OnLineNumberChanged();
                }
            }
        }

        [Column(Name = @"TC_VDR03", Storage = "_IssueNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string IssueNumber
        {
            get
            {
                return this._IssueNumber;
            }
            set
            {
                if (this._IssueNumber != value)
                {
                    this.OnIssueNumberChanging(value);
                    this.SendPropertyChanging();
                    this._IssueNumber = value;
                    this.SendPropertyChanged("IssueNumber");
                    this.OnIssueNumberChanged();
                }
            }
        }

        [Column(Name = @"TC_VDR04", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDR05", Storage = "_ShippingQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int ShippingQuantity
        {
            get
            {
                return this._ShippingQuantity;
            }
            set
            {
                if (this._ShippingQuantity != value)
                {
                    this.OnShippingQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingQuantity = value;
                    this.SendPropertyChanged("ShippingQuantity");
                    this.OnShippingQuantityChanged();
                }
            }
        }

        [Column(Name = @"TC_VDR06", Storage = "_ShippingDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ShippingDate
        {
            get
            {
                return this._ShippingDate;
            }
            set
            {
                if (this._ShippingDate != value)
                {
                    this.OnShippingDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingDate = value;
                    this.SendPropertyChanged("ShippingDate");
                    this.OnShippingDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDR07", Storage = "_Flag", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string Flag
        {
            get
            {
                return this._Flag;
            }
            set
            {
                if (this._Flag != value)
                {
                    this.OnFlagChanging(value);
                    this.SendPropertyChanging();
                    this._Flag = value;
                    this.SendPropertyChanged("Flag");
                    this.OnFlagChanged();
                }
            }
        }

        [Column(Name = @"TC_VDR08", Storage = "_NotGoodNumber", DbType = "varchar2(30)")]
        public string NotGoodNumber
        {
            get
            {
                return this._NotGoodNumber;
            }
            set
            {
                if (this._NotGoodNumber != value)
                {
                    this.OnNotGoodNumberChanging(value);
                    this.SendPropertyChanging();
                    this._NotGoodNumber = value;
                    this.SendPropertyChanged("NotGoodNumber");
                    this.OnNotGoodNumberChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_FAVORITE")]
    public partial class Favorite : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _FavoriteId;

        private string _DealerCode;

        private int _Rank;

        private string _Type;

        private string _PartType;

        private string _PartCode;

        private EntityRef<Dealer> _Dealer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnFavoriteIdChanging(double value);
        partial void OnFavoriteIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnRankChanging(int value);
        partial void OnRankChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnPartTypeChanging(string value);
        partial void OnPartTypeChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        #endregion

        public Favorite()
        {
            this._Dealer = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"FAVORITE_ID", Storage = "_FavoriteId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public double FavoriteId
        {
            get
            {
                return this._FavoriteId;
            }
            set
            {
                if (this._FavoriteId != value)
                {
                    this.OnFavoriteIdChanging(value);
                    this.SendPropertyChanging();
                    this._FavoriteId = value;
                    this.SendPropertyChanged("FavoriteId");
                    this.OnFavoriteIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"RANK", Storage = "_Rank", CanBeNull = false, DbType = "NUMBER(5) NOT NULL")]
        public int Rank
        {
            get
            {
                return this._Rank;
            }
            set
            {
                if (this._Rank != value)
                {
                    this.OnRankChanging(value);
                    this.SendPropertyChanging();
                    this._Rank = value;
                    this.SendPropertyChanged("Rank");
                    this.OnRankChanged();
                }
            }
        }

        [Column(Name = @"TYPE", Storage = "_Type", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Name = @"PART_TYPE", Storage = "_PartType", CanBeNull = false, DbType = "VARCHAR2(1) NOT NULL")]
        public string PartType
        {
            get
            {
                return this._PartType;
            }
            set
            {
                if (this._PartType != value)
                {
                    this.OnPartTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PartType = value;
                    this.SendPropertyChanged("PartType");
                    this.OnPartTypeChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Association(Name = "Dealer_Favorite", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.Favorites.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.Favorites.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_DEALER")]
    public partial class Dealer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _DealerCode;

        private string _ParentCode;

        private System.Nullable<long> _ContactId;

        private string _DealerName;

        private string _DealerType;

        private string _Address;

        private string _DatabaseCode;

        private string _AreaCode;

        private int _ReceiveSpan;

        private long _DefaultWarehouseId;

        private int _OrderDateControl;

        private long _DefaultVWarehouseId;

        private System.Nullable<bool> _Quo_CF_Status;

        private EntitySet<Accessory> _Accessories;

        private EntitySet<Category> _Categories;

        private EntityRef<Contact> _Contact;

        private EntitySet<Customer> _Customers;

        private EntitySet<Inventory> _Inventories;

        private EntitySet<NGFormHeader> _NGFormHeaders;

        private EntitySet<PartInfo> _PartInfos;

        private EntitySet<ReceiveHeader> _ReceiveHeaders;

        private EntitySet<SalesHeader> _SalesHeaders;

        private EntitySet<TransactionHistory> _TransactionHistories;

        private EntitySet<Vendor> _Vendors;

        private EntitySet<Warehouse> _Warehouses;

        private EntitySet<TransferHeader> _TransferHeaders;

        private EntitySet<InventoryLock> _InventoryLocks;

        private EntitySet<Favorite> _Favorites;

        private EntitySet<Dealer> _Dealers;

        private EntityRef<Dealer> _Dealer1;

        private EntitySet<CycleCountHeader> _CycleCountHeaders;

        private EntitySet<OrderHeader> _OrderHeaders;

        private EntitySet<OrderHeader> _OrderHeaders1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnParentCodeChanging(string value);
        partial void OnParentCodeChanged();
        partial void OnContactIdChanging(System.Nullable<long> value);
        partial void OnContactIdChanged();
        partial void OnDealerNameChanging(string value);
        partial void OnDealerNameChanged();
        partial void OnDealerTypeChanging(string value);
        partial void OnDealerTypeChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnAreaCodeChanging(string value);
        partial void OnAreaCodeChanged();
        partial void OnReceiveSpanChanging(int value);
        partial void OnReceiveSpanChanged();
        partial void OnDefaultWarehouseIdChanging(long value);
        partial void OnDefaultWarehouseIdChanged();
        partial void OnOrderDateControlChanging(int value);
        partial void OnOrderDateControlChanged();
        partial void OnDefaultVWarehouseIdChanging(long value);
        partial void OnDefaultVWarehouseIdChanged();
        partial void OnQuo_CF_StatusChanging(System.Nullable<bool> value);
        partial void OnQuo_CF_StatusChanged();
        #endregion

        public Dealer()
        {
            this._Accessories = new EntitySet<Accessory>(new Action<Accessory>(this.attach_Accessories), new Action<Accessory>(this.detach_Accessories));
            this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
            this._Contact = default(EntityRef<Contact>);
            this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
            this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
            this._NGFormHeaders = new EntitySet<NGFormHeader>(new Action<NGFormHeader>(this.attach_NGFormHeaders), new Action<NGFormHeader>(this.detach_NGFormHeaders));
            this._PartInfos = new EntitySet<PartInfo>(new Action<PartInfo>(this.attach_PartInfos), new Action<PartInfo>(this.detach_PartInfos));
            this._ReceiveHeaders = new EntitySet<ReceiveHeader>(new Action<ReceiveHeader>(this.attach_ReceiveHeaders), new Action<ReceiveHeader>(this.detach_ReceiveHeaders));
            this._SalesHeaders = new EntitySet<SalesHeader>(new Action<SalesHeader>(this.attach_SalesHeaders), new Action<SalesHeader>(this.detach_SalesHeaders));
            this._TransactionHistories = new EntitySet<TransactionHistory>(new Action<TransactionHistory>(this.attach_TransactionHistories), new Action<TransactionHistory>(this.detach_TransactionHistories));
            this._Vendors = new EntitySet<Vendor>(new Action<Vendor>(this.attach_Vendors), new Action<Vendor>(this.detach_Vendors));
            this._Warehouses = new EntitySet<Warehouse>(new Action<Warehouse>(this.attach_Warehouses), new Action<Warehouse>(this.detach_Warehouses));
            this._TransferHeaders = new EntitySet<TransferHeader>(new Action<TransferHeader>(this.attach_TransferHeaders), new Action<TransferHeader>(this.detach_TransferHeaders));
            this._InventoryLocks = new EntitySet<InventoryLock>(new Action<InventoryLock>(this.attach_InventoryLocks), new Action<InventoryLock>(this.detach_InventoryLocks));
            this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
            this._Dealers = new EntitySet<Dealer>(new Action<Dealer>(this.attach_Dealers), new Action<Dealer>(this.detach_Dealers));
            this._Dealer1 = default(EntityRef<Dealer>);
            this._CycleCountHeaders = new EntitySet<CycleCountHeader>(new Action<CycleCountHeader>(this.attach_CycleCountHeaders), new Action<CycleCountHeader>(this.detach_CycleCountHeaders));
            this._OrderHeaders = new EntitySet<OrderHeader>(new Action<OrderHeader>(this.attach_OrderHeaders), new Action<OrderHeader>(this.detach_OrderHeaders));
            this._OrderHeaders1 = new EntitySet<OrderHeader>(new Action<OrderHeader>(this.attach_OrderHeaders1), new Action<OrderHeader>(this.detach_OrderHeaders1));
            OnCreated();
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL", IsPrimaryKey = true)]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"PARENT_CODE", Storage = "_ParentCode", DbType = "VARCHAR2(30)")]
        public string ParentCode
        {
            get
            {
                return this._ParentCode;
            }
            set
            {
                if (this._ParentCode != value)
                {
                    if (this._Dealer1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ParentCode = value;
                    this.SendPropertyChanged("ParentCode");
                    this.OnParentCodeChanged();
                }
            }
        }

        [Column(Name = @"CONTACT_ID", Storage = "_ContactId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ContactId
        {
            get
            {
                return this._ContactId;
            }
            set
            {
                if (this._ContactId != value)
                {
                    if (this._Contact.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContactId = value;
                    this.SendPropertyChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_NAME", Storage = "_DealerName", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string DealerName
        {
            get
            {
                return this._DealerName;
            }
            set
            {
                if (this._DealerName != value)
                {
                    this.OnDealerNameChanging(value);
                    this.SendPropertyChanging();
                    this._DealerName = value;
                    this.SendPropertyChanged("DealerName");
                    this.OnDealerNameChanged();
                }
            }
        }

        [Column(Name = @"DEALER_TYPE", Storage = "_DealerType", DbType = "CHAR(2)")]
        public string DealerType
        {
            get
            {
                return this._DealerType;
            }
            set
            {
                if (this._DealerType != value)
                {
                    this.OnDealerTypeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerType = value;
                    this.SendPropertyChanged("DealerType");
                    this.OnDealerTypeChanged();
                }
            }
        }

        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "NVARCHAR2(512)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [Column(Name = @"DATABASE_CODE", Storage = "_DatabaseCode", CanBeNull = false, DbType = "VARCHAR2(10) NOT NULL")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Name = @"AREA_CODE", Storage = "_AreaCode", CanBeNull = false, DbType = "VARCHAR2(25) NOT NULL")]
        public string AreaCode
        {
            get
            {
                return this._AreaCode;
            }
            set
            {
                if (this._AreaCode != value)
                {
                    this.OnAreaCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AreaCode = value;
                    this.SendPropertyChanged("AreaCode");
                    this.OnAreaCodeChanged();
                }
            }
        }

        [Column(Name = @"RECEIVE_SPAN", Storage = "_ReceiveSpan", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int ReceiveSpan
        {
            get
            {
                return this._ReceiveSpan;
            }
            set
            {
                if (this._ReceiveSpan != value)
                {
                    this.OnReceiveSpanChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiveSpan = value;
                    this.SendPropertyChanged("ReceiveSpan");
                    this.OnReceiveSpanChanged();
                }
            }
        }

        [Column(Name = @"DEFAULT_WAREHOUSE_ID", Storage = "_DefaultWarehouseId", CanBeNull = false, DbType = "NUMBER(10) not null")]
        public long DefaultWarehouseId
        {
            get
            {
                return this._DefaultWarehouseId;
            }
            set
            {
                if (this._DefaultWarehouseId != value)
                {
                    this.OnDefaultWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefaultWarehouseId = value;
                    this.SendPropertyChanged("DefaultWarehouseId");
                    this.OnDefaultWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"Order_Date_Control", Storage = "_OrderDateControl", CanBeNull = false, DbType = "number(10) not null")]
        public int OrderDateControl
        {
            get
            {
                return this._OrderDateControl;
            }
            set
            {
                if (this._OrderDateControl != value)
                {
                    this.OnOrderDateControlChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDateControl = value;
                    this.SendPropertyChanged("OrderDateControl");
                    this.OnOrderDateControlChanged();
                }
            }
        }

        [Column(Name = @"Default_V_Warehouse_Id", Storage = "_DefaultVWarehouseId", CanBeNull = false, DbType = "number(19) not null")]
        public long DefaultVWarehouseId
        {
            get
            {
                return this._DefaultVWarehouseId;
            }
            set
            {
                if (this._DefaultVWarehouseId != value)
                {
                    this.OnDefaultVWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefaultVWarehouseId = value;
                    this.SendPropertyChanged("DefaultVWarehouseId");
                    this.OnDefaultVWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"Quo_CF_Status", Storage = "_Quo_CF_Status", DbType = "number(1)")]
        public System.Nullable<bool> Quo_CF_Status
        {
            get
            {
                return this._Quo_CF_Status;
            }
            set
            {
                if (this._Quo_CF_Status != value)
                {
                    this.OnQuo_CF_StatusChanging(value);
                    this.SendPropertyChanging();
                    this._Quo_CF_Status = value;
                    this.SendPropertyChanged("QuoCFStatus");
                    this.OnQuo_CF_StatusChanged();
                }
            }
        }

        [Association(Name = "Dealer_Accessory", Storage = "_Accessories", OtherKey = "DealerCode")]
        public EntitySet<Accessory> Accessories
        {
            get
            {
                return this._Accessories;
            }
            set
            {
                this._Accessories.Assign(value);
            }
        }

        [Association(Name = "Dealer_Category", Storage = "_Categories", OtherKey = "DealerCode")]
        public EntitySet<Category> Categories
        {
            get
            {
                return this._Categories;
            }
            set
            {
                this._Categories.Assign(value);
            }
        }

        [Association(Name = "Contact_Dealer", Storage = "_Contact", ThisKey = "ContactId", IsForeignKey = true)]
        public Contact Contact
        {
            get
            {
                return this._Contact.Entity;
            }
            set
            {
                Contact previousValue = this._Contact.Entity;
                if ((previousValue != value) || (this._Contact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Contact.Entity = null;
                        previousValue.Dealers.Remove(this);
                    }
                    this._Contact.Entity = value;
                    if (value != null)
                    {
                        value.Dealers.Add(this);
                        this._ContactId = value.ContactId;
                    }
                    else
                    {
                        this._ContactId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("Contact");
                }
            }
        }

        [Association(Name = "Dealer_Customer", Storage = "_Customers", OtherKey = "DealerCode")]
        public EntitySet<Customer> Customers
        {
            get
            {
                return this._Customers;
            }
            set
            {
                this._Customers.Assign(value);
            }
        }

        [Association(Name = "Dealer_Inventory", Storage = "_Inventories", OtherKey = "DealerCode")]
        public EntitySet<Inventory> Inventories
        {
            get
            {
                return this._Inventories;
            }
            set
            {
                this._Inventories.Assign(value);
            }
        }

        [Association(Name = "Dealer_NGFormHeader", Storage = "_NGFormHeaders", OtherKey = "DealerCode")]
        public EntitySet<NGFormHeader> NGFormHeaders
        {
            get
            {
                return this._NGFormHeaders;
            }
            set
            {
                this._NGFormHeaders.Assign(value);
            }
        }

        [Association(Name = "Dealer_PartInfo", Storage = "_PartInfos", OtherKey = "DealerCode")]
        public EntitySet<PartInfo> PartInfos
        {
            get
            {
                return this._PartInfos;
            }
            set
            {
                this._PartInfos.Assign(value);
            }
        }

        [Association(Name = "Dealer_ReceiveHeader", Storage = "_ReceiveHeaders", OtherKey = "DealerCode")]
        public EntitySet<ReceiveHeader> ReceiveHeaders
        {
            get
            {
                return this._ReceiveHeaders;
            }
            set
            {
                this._ReceiveHeaders.Assign(value);
            }
        }

        [Association(Name = "Dealer_SalesHeader", Storage = "_SalesHeaders", OtherKey = "DealerCode")]
        public EntitySet<SalesHeader> SalesHeaders
        {
            get
            {
                return this._SalesHeaders;
            }
            set
            {
                this._SalesHeaders.Assign(value);
            }
        }

        [Association(Name = "Dealer_TransactionHistory", Storage = "_TransactionHistories", OtherKey = "DealerCode")]
        public EntitySet<TransactionHistory> TransactionHistories
        {
            get
            {
                return this._TransactionHistories;
            }
            set
            {
                this._TransactionHistories.Assign(value);
            }
        }

        [Association(Name = "Dealer_Vendor", Storage = "_Vendors", OtherKey = "DealerCode")]
        public EntitySet<Vendor> Vendors
        {
            get
            {
                return this._Vendors;
            }
            set
            {
                this._Vendors.Assign(value);
            }
        }

        [Association(Name = "Dealer_Warehouse", Storage = "_Warehouses", OtherKey = "DealerCode")]
        public EntitySet<Warehouse> Warehouses
        {
            get
            {
                return this._Warehouses;
            }
            set
            {
                this._Warehouses.Assign(value);
            }
        }

        [Association(Name = "Dealer_TransferHeader", Storage = "_TransferHeaders", OtherKey = "DealerCode")]
        public EntitySet<TransferHeader> TransferHeaders
        {
            get
            {
                return this._TransferHeaders;
            }
            set
            {
                this._TransferHeaders.Assign(value);
            }
        }

        [Association(Name = "Dealer_InventoryLock", Storage = "_InventoryLocks", OtherKey = "DealerCode")]
        public EntitySet<InventoryLock> InventoryLocks
        {
            get
            {
                return this._InventoryLocks;
            }
            set
            {
                this._InventoryLocks.Assign(value);
            }
        }

        [Association(Name = "Dealer_Favorite", Storage = "_Favorites", OtherKey = "DealerCode")]
        public EntitySet<Favorite> Favorites
        {
            get
            {
                return this._Favorites;
            }
            set
            {
                this._Favorites.Assign(value);
            }
        }

        [Association(Name = "Dealer_Dealer", Storage = "_Dealers", OtherKey = "ParentCode")]
        public EntitySet<Dealer> Dealers
        {
            get
            {
                return this._Dealers;
            }
            set
            {
                this._Dealers.Assign(value);
            }
        }

        [Association(Name = "Dealer_Dealer", Storage = "_Dealer1", ThisKey = "ParentCode", IsForeignKey = true)]
        public Dealer Dealer1
        {
            get
            {
                return this._Dealer1.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer1.Entity;
                if ((previousValue != value) || (this._Dealer1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer1.Entity = null;
                        previousValue.Dealers.Remove(this);
                    }
                    this._Dealer1.Entity = value;
                    if (value != null)
                    {
                        value.Dealers.Add(this);
                        this._ParentCode = value.DealerCode;
                    }
                    else
                    {
                        this._ParentCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer1");
                }
            }
        }

        [Association(Name = "Dealer_CycleCountHeader", Storage = "_CycleCountHeaders", OtherKey = "DealerCode")]
        public EntitySet<CycleCountHeader> CycleCountHeaders
        {
            get
            {
                return this._CycleCountHeaders;
            }
            set
            {
                this._CycleCountHeaders.Assign(value);
            }
        }

        [Association(Name = "Dealer_OrderHeader", Storage = "_OrderHeaders", OtherKey = "ToDealer")]
        public EntitySet<OrderHeader> OrderHeaders
        {
            get
            {
                return this._OrderHeaders;
            }
            set
            {
                this._OrderHeaders.Assign(value);
            }
        }

        [Association(Name = "Dealer_OrderHeader1", Storage = "_OrderHeaders1", OtherKey = "DealerCode")]
        public EntitySet<OrderHeader> OrderHeaders1
        {
            get
            {
                return this._OrderHeaders1;
            }
            set
            {
                this._OrderHeaders1.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Accessories(Accessory entity)
        {
            this.SendPropertyChanging("Accessories");
            entity.Dealer = this;
        }

        private void detach_Accessories(Accessory entity)
        {
            this.SendPropertyChanging("Accessories");
            entity.Dealer = null;
        }

        private void attach_Categories(Category entity)
        {
            this.SendPropertyChanging("Categories");
            entity.Dealer = this;
        }

        private void detach_Categories(Category entity)
        {
            this.SendPropertyChanging("Categories");
            entity.Dealer = null;
        }

        private void attach_Customers(Customer entity)
        {
            this.SendPropertyChanging("Customers");
            entity.Dealer = this;
        }

        private void detach_Customers(Customer entity)
        {
            this.SendPropertyChanging("Customers");
            entity.Dealer = null;
        }

        private void attach_Inventories(Inventory entity)
        {
            this.SendPropertyChanging("Inventories");
            entity.Dealer = this;
        }

        private void detach_Inventories(Inventory entity)
        {
            this.SendPropertyChanging("Inventories");
            entity.Dealer = null;
        }

        private void attach_NGFormHeaders(NGFormHeader entity)
        {
            this.SendPropertyChanging("NGFormHeaders");
            entity.Dealer = this;
        }

        private void detach_NGFormHeaders(NGFormHeader entity)
        {
            this.SendPropertyChanging("NGFormHeaders");
            entity.Dealer = null;
        }

        private void attach_PartInfos(PartInfo entity)
        {
            this.SendPropertyChanging("PartInfos");
            entity.Dealer = this;
        }

        private void detach_PartInfos(PartInfo entity)
        {
            this.SendPropertyChanging("PartInfos");
            entity.Dealer = null;
        }

        private void attach_ReceiveHeaders(ReceiveHeader entity)
        {
            this.SendPropertyChanging("ReceiveHeaders");
            entity.Dealer = this;
        }

        private void detach_ReceiveHeaders(ReceiveHeader entity)
        {
            this.SendPropertyChanging("ReceiveHeaders");
            entity.Dealer = null;
        }

        private void attach_SalesHeaders(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeaders");
            entity.Dealer = this;
        }

        private void detach_SalesHeaders(SalesHeader entity)
        {
            this.SendPropertyChanging("SalesHeaders");
            entity.Dealer = null;
        }

        private void attach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.Dealer = this;
        }

        private void detach_TransactionHistories(TransactionHistory entity)
        {
            this.SendPropertyChanging("TransactionHistories");
            entity.Dealer = null;
        }

        private void attach_Vendors(Vendor entity)
        {
            this.SendPropertyChanging("Vendors");
            entity.Dealer = this;
        }

        private void detach_Vendors(Vendor entity)
        {
            this.SendPropertyChanging("Vendors");
            entity.Dealer = null;
        }

        private void attach_Warehouses(Warehouse entity)
        {
            this.SendPropertyChanging("Warehouses");
            entity.Dealer = this;
        }

        private void detach_Warehouses(Warehouse entity)
        {
            this.SendPropertyChanging("Warehouses");
            entity.Dealer = null;
        }

        private void attach_TransferHeaders(TransferHeader entity)
        {
            this.SendPropertyChanging("TransferHeaders");
            entity.Dealer = this;
        }

        private void detach_TransferHeaders(TransferHeader entity)
        {
            this.SendPropertyChanging("TransferHeaders");
            entity.Dealer = null;
        }

        private void attach_InventoryLocks(InventoryLock entity)
        {
            this.SendPropertyChanging("InventoryLocks");
            entity.Dealer = this;
        }

        private void detach_InventoryLocks(InventoryLock entity)
        {
            this.SendPropertyChanging("InventoryLocks");
            entity.Dealer = null;
        }

        private void attach_Favorites(Favorite entity)
        {
            this.SendPropertyChanging("Favorites");
            entity.Dealer = this;
        }

        private void detach_Favorites(Favorite entity)
        {
            this.SendPropertyChanging("Favorites");
            entity.Dealer = null;
        }

        private void attach_Dealers(Dealer entity)
        {
            this.SendPropertyChanging("Dealers");
            entity.Dealer1 = this;
        }

        private void detach_Dealers(Dealer entity)
        {
            this.SendPropertyChanging("Dealers");
            entity.Dealer1 = null;
        }

        private void attach_CycleCountHeaders(CycleCountHeader entity)
        {
            this.SendPropertyChanging("CycleCountHeaders");
            entity.Dealer = this;
        }

        private void detach_CycleCountHeaders(CycleCountHeader entity)
        {
            this.SendPropertyChanging("CycleCountHeaders");
            entity.Dealer = null;
        }

        private void attach_OrderHeaders(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders");
            entity.Dealer = this;
        }

        private void detach_OrderHeaders(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders");
            entity.Dealer = null;
        }

        private void attach_OrderHeaders1(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders1");
            entity.Dealer1 = this;
        }

        private void detach_OrderHeaders1(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders1");
            entity.Dealer1 = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_N_G_FORM_DETAIL")]
    public partial class NGFormDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _NGFormDetailId;

        private long _NGFormHeaderId;

        private string _PartCode;

        private string _PartStatus;

        private int _RequestQuantity;

        private int _ApprovedQuantity;

        private string _BrokenCode;

        private string _DealerComment;

        private string _L1Comment;

        private string _L2Comment;

        private string _L3Comment;

        private bool _Passed;

        private string _TransactionComment;

        private int _ProblemAgainQuantity;

        private EntityRef<NGFormHeader> _NGFormHeader;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNGFormDetailIdChanging(long value);
        partial void OnNGFormDetailIdChanged();
        partial void OnNGFormHeaderIdChanging(long value);
        partial void OnNGFormHeaderIdChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnPartStatusChanging(string value);
        partial void OnPartStatusChanged();
        partial void OnRequestQuantityChanging(int value);
        partial void OnRequestQuantityChanged();
        partial void OnApprovedQuantityChanging(int value);
        partial void OnApprovedQuantityChanged();
        partial void OnBrokenCodeChanging(string value);
        partial void OnBrokenCodeChanged();
        partial void OnDealerCommentChanging(string value);
        partial void OnDealerCommentChanged();
        partial void OnL1CommentChanging(string value);
        partial void OnL1CommentChanged();
        partial void OnL2CommentChanging(string value);
        partial void OnL2CommentChanged();
        partial void OnL3CommentChanging(string value);
        partial void OnL3CommentChanged();
        partial void OnPassedChanging(bool value);
        partial void OnPassedChanged();
        partial void OnTransactionCommentChanging(string value);
        partial void OnTransactionCommentChanged();
        partial void OnProblemAgainQuantityChanging(int value);
        partial void OnProblemAgainQuantityChanged();
        #endregion

        public NGFormDetail()
        {
            this._NGFormHeader = default(EntityRef<NGFormHeader>);
            OnCreated();
        }

        [Column(Name = @"N_G_FORM_DETAIL_ID", Storage = "_NGFormDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long NGFormDetailId
        {
            get
            {
                return this._NGFormDetailId;
            }
            set
            {
                if (this._NGFormDetailId != value)
                {
                    this.OnNGFormDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._NGFormDetailId = value;
                    this.SendPropertyChanged("NGFormDetailId");
                    this.OnNGFormDetailIdChanged();
                }
            }
        }

        [Column(Name = @"N_G_FORM_HEADER_ID", Storage = "_NGFormHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long NGFormHeaderId
        {
            get
            {
                return this._NGFormHeaderId;
            }
            set
            {
                if (this._NGFormHeaderId != value)
                {
                    if (this._NGFormHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnNGFormHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._NGFormHeaderId = value;
                    this.SendPropertyChanged("NGFormHeaderId");
                    this.OnNGFormHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"PART_STATUS", Storage = "_PartStatus", DbType = "CHAR(1)")]
        public string PartStatus
        {
            get
            {
                return this._PartStatus;
            }
            set
            {
                if (this._PartStatus != value)
                {
                    this.OnPartStatusChanging(value);
                    this.SendPropertyChanging();
                    this._PartStatus = value;
                    this.SendPropertyChanged("PartStatus");
                    this.OnPartStatusChanged();
                }
            }
        }

        [Column(Name = @"REQUEST_QUANTITY", Storage = "_RequestQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int RequestQuantity
        {
            get
            {
                return this._RequestQuantity;
            }
            set
            {
                if (this._RequestQuantity != value)
                {
                    this.OnRequestQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._RequestQuantity = value;
                    this.SendPropertyChanged("RequestQuantity");
                    this.OnRequestQuantityChanged();
                }
            }
        }

        [Column(Name = @"APPROVED_QUANTITY", Storage = "_ApprovedQuantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int ApprovedQuantity
        {
            get
            {
                return this._ApprovedQuantity;
            }
            set
            {
                if (this._ApprovedQuantity != value)
                {
                    this.OnApprovedQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ApprovedQuantity = value;
                    this.SendPropertyChanged("ApprovedQuantity");
                    this.OnApprovedQuantityChanged();
                }
            }
        }

        [Column(Name = @"BROKEN_CODE", Storage = "_BrokenCode", DbType = "VARCHAR2(30)")]
        public string BrokenCode
        {
            get
            {
                return this._BrokenCode;
            }
            set
            {
                if (this._BrokenCode != value)
                {
                    this.OnBrokenCodeChanging(value);
                    this.SendPropertyChanging();
                    this._BrokenCode = value;
                    this.SendPropertyChanged("BrokenCode");
                    this.OnBrokenCodeChanged();
                }
            }
        }

        [Column(Name = @"DEALER_COMMENT", Storage = "_DealerComment", CanBeNull = false, DbType = "NVARCHAR2(500) NOT NULL")]
        public string DealerComment
        {
            get
            {
                return this._DealerComment;
            }
            set
            {
                if (this._DealerComment != value)
                {
                    this.OnDealerCommentChanging(value);
                    this.SendPropertyChanging();
                    this._DealerComment = value;
                    this.SendPropertyChanged("DealerComment");
                    this.OnDealerCommentChanged();
                }
            }
        }

        [Column(Name = @"L1_COMMENT", Storage = "_L1Comment", DbType = "NVARCHAR2(500)")]
        public string L1Comment
        {
            get
            {
                return this._L1Comment;
            }
            set
            {
                if (this._L1Comment != value)
                {
                    this.OnL1CommentChanging(value);
                    this.SendPropertyChanging();
                    this._L1Comment = value;
                    this.SendPropertyChanged("L1Comment");
                    this.OnL1CommentChanged();
                }
            }
        }

        [Column(Name = @"L2_COMMENT", Storage = "_L2Comment", DbType = "NVARCHAR2(500)")]
        public string L2Comment
        {
            get
            {
                return this._L2Comment;
            }
            set
            {
                if (this._L2Comment != value)
                {
                    this.OnL2CommentChanging(value);
                    this.SendPropertyChanging();
                    this._L2Comment = value;
                    this.SendPropertyChanged("L2Comment");
                    this.OnL2CommentChanged();
                }
            }
        }

        [Column(Name = @"L3_COMMENT", Storage = "_L3Comment", DbType = "NVARCHAR2(500)")]
        public string L3Comment
        {
            get
            {
                return this._L3Comment;
            }
            set
            {
                if (this._L3Comment != value)
                {
                    this.OnL3CommentChanging(value);
                    this.SendPropertyChanging();
                    this._L3Comment = value;
                    this.SendPropertyChanged("L3Comment");
                    this.OnL3CommentChanged();
                }
            }
        }

        [Column(Name = @"PASSED", Storage = "_Passed", CanBeNull = false, DbType = "NUMBER(1)")]
        public bool Passed
        {
            get
            {
                return this._Passed;
            }
            set
            {
                if (this._Passed != value)
                {
                    this.OnPassedChanging(value);
                    this.SendPropertyChanging();
                    this._Passed = value;
                    this.SendPropertyChanged("Passed");
                    this.OnPassedChanged();
                }
            }
        }

        [Column(Name = @"TRANSACTION_COMMENT", Storage = "_TransactionComment", DbType = "NVARCHAR2(500)")]
        public string TransactionComment
        {
            get
            {
                return this._TransactionComment;
            }
            set
            {
                if (this._TransactionComment != value)
                {
                    this.OnTransactionCommentChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionComment = value;
                    this.SendPropertyChanged("TransactionComment");
                    this.OnTransactionCommentChanged();
                }
            }
        }

        [Column(Name = @"PROBLEM_AGAIN_QUANTITY", Storage = "_ProblemAgainQuantity", CanBeNull = false, DbType = "NUMBER(10)")]
        public int ProblemAgainQuantity
        {
            get
            {
                return this._ProblemAgainQuantity;
            }
            set
            {
                if (this._ProblemAgainQuantity != value)
                {
                    this.OnProblemAgainQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ProblemAgainQuantity = value;
                    this.SendPropertyChanged("ProblemAgainQuantity");
                    this.OnProblemAgainQuantityChanged();
                }
            }
        }

        [Association(Name = "NGFormHeader_NGFormDetail", Storage = "_NGFormHeader", ThisKey = "NGFormHeaderId", IsForeignKey = true)]
        public NGFormHeader NGFormHeader
        {
            get
            {
                return this._NGFormHeader.Entity;
            }
            set
            {
                NGFormHeader previousValue = this._NGFormHeader.Entity;
                if ((previousValue != value) || (this._NGFormHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._NGFormHeader.Entity = null;
                        previousValue.NGFormDetails.Remove(this);
                    }
                    this._NGFormHeader.Entity = value;
                    if (value != null)
                    {
                        value.NGFormDetails.Add(this);
                        this._NGFormHeaderId = value.NGFormHeaderId;
                    }
                    else
                    {
                        this._NGFormHeaderId = default(long);
                    }
                    this.SendPropertyChanged("NGFormHeader");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_CYCLE_COUNT_HEADER")]
    public partial class CycleCountHeader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CycleCountHeaderId;

        private string _DealerCode;

        private long _WarehouseId;

        private System.DateTime _CreatedTime;

        private string _CreatedBy;

        private System.DateTime _LastEditedDate;

        private System.DateTime _CycleDate;

        private string _Status;

        private string _TransactionComment;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<Dealer> _Dealer;

        private EntitySet<CycleCountDetail> _CycleCountDetails;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCycleCountHeaderIdChanging(long value);
        partial void OnCycleCountHeaderIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnWarehouseIdChanging(long value);
        partial void OnWarehouseIdChanged();
        partial void OnCreatedTimeChanging(System.DateTime value);
        partial void OnCreatedTimeChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnLastEditedDateChanging(System.DateTime value);
        partial void OnLastEditedDateChanged();
        partial void OnCycleDateChanging(System.DateTime value);
        partial void OnCycleDateChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTransactionCommentChanging(string value);
        partial void OnTransactionCommentChanged();
        #endregion

        public CycleCountHeader()
        {
            this._Warehouse = default(EntityRef<Warehouse>);
            this._Dealer = default(EntityRef<Dealer>);
            this._CycleCountDetails = new EntitySet<CycleCountDetail>(new Action<CycleCountDetail>(this.attach_CycleCountDetails), new Action<CycleCountDetail>(this.detach_CycleCountDetails));
            OnCreated();
        }

        [Column(Name = @"CYCLE_COUNT_HEADER_ID", Storage = "_CycleCountHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long CycleCountHeaderId
        {
            get
            {
                return this._CycleCountHeaderId;
            }
            set
            {
                if (this._CycleCountHeaderId != value)
                {
                    this.OnCycleCountHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._CycleCountHeaderId = value;
                    this.SendPropertyChanged("CycleCountHeaderId");
                    this.OnCycleCountHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"WAREHOUSE_ID", Storage = "_WarehouseId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long WarehouseId
        {
            get
            {
                return this._WarehouseId;
            }
            set
            {
                if (this._WarehouseId != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._WarehouseId = value;
                    this.SendPropertyChanged("WarehouseId");
                    this.OnWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"CREATED_TIME", Storage = "_CreatedTime", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedTime
        {
            get
            {
                return this._CreatedTime;
            }
            set
            {
                if (this._CreatedTime != value)
                {
                    this.OnCreatedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedTime = value;
                    this.SendPropertyChanged("CreatedTime");
                    this.OnCreatedTimeChanged();
                }
            }
        }

        [Column(Name = @"CREATED_BY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(768) NOT NULL")]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

        [Column(Name = @"LAST_EDITED_DATE", Storage = "_LastEditedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime LastEditedDate
        {
            get
            {
                return this._LastEditedDate;
            }
            set
            {
                if (this._LastEditedDate != value)
                {
                    this.OnLastEditedDateChanging(value);
                    this.SendPropertyChanging();
                    this._LastEditedDate = value;
                    this.SendPropertyChanged("LastEditedDate");
                    this.OnLastEditedDateChanged();
                }
            }
        }

        [Column(Name = @"CYCLE_DATE", Storage = "_CycleDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CycleDate
        {
            get
            {
                return this._CycleDate;
            }
            set
            {
                if (this._CycleDate != value)
                {
                    this.OnCycleDateChanging(value);
                    this.SendPropertyChanging();
                    this._CycleDate = value;
                    this.SendPropertyChanged("CycleDate");
                    this.OnCycleDateChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"TRANSACTION_COMMENT", Storage = "_TransactionComment", DbType = "NVARCHAR2(768)")]
        public string TransactionComment
        {
            get
            {
                return this._TransactionComment;
            }
            set
            {
                if (this._TransactionComment != value)
                {
                    this.OnTransactionCommentChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionComment = value;
                    this.SendPropertyChanged("TransactionComment");
                    this.OnTransactionCommentChanged();
                }
            }
        }

        [Association(Name = "Warehouse_CycleCountHeader", Storage = "_Warehouse", ThisKey = "WarehouseId", IsForeignKey = true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.CycleCountHeaders.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        value.CycleCountHeaders.Add(this);
                        this._WarehouseId = value.WarehouseId;
                    }
                    else
                    {
                        this._WarehouseId = default(long);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

        [Association(Name = "Dealer_CycleCountHeader", Storage = "_Dealer", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.CycleCountHeaders.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.CycleCountHeaders.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        [Association(Name = "CycleCountHeader_CycleCountDetail", Storage = "_CycleCountDetails", OtherKey = "CycleCountHeaderId")]
        public EntitySet<CycleCountDetail> CycleCountDetails
        {
            get
            {
                return this._CycleCountDetails;
            }
            set
            {
                this._CycleCountDetails.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CycleCountDetails(CycleCountDetail entity)
        {
            this.SendPropertyChanging("CycleCountDetails");
            entity.CycleCountHeader = this;
        }

        private void detach_CycleCountDetails(CycleCountDetail entity)
        {
            this.SendPropertyChanging("CycleCountDetails");
            entity.CycleCountHeader = null;
        }
    }

    [Table(Name = @"VDMS.V2_P_CYCLE_COUNT_DETAIL")]
    public partial class CycleCountDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _CycleCountDetailId;

        private long _CycleCountHeaderId;

        private string _PartCode;

        private int _Quantity;

        private string _ItemComment;

        private string _PartType;

        private EntityRef<CycleCountHeader> _CycleCountHeader;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCycleCountDetailIdChanging(long value);
        partial void OnCycleCountDetailIdChanged();
        partial void OnCycleCountHeaderIdChanging(long value);
        partial void OnCycleCountHeaderIdChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnItemCommentChanging(string value);
        partial void OnItemCommentChanged();
        partial void OnPartTypeChanging(string value);
        partial void OnPartTypeChanged();
        #endregion

        public CycleCountDetail()
        {
            this._CycleCountHeader = default(EntityRef<CycleCountHeader>);
            OnCreated();
        }

        [Column(Name = @"CYCLE_COUNT_DETAIL_ID", Storage = "_CycleCountDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long CycleCountDetailId
        {
            get
            {
                return this._CycleCountDetailId;
            }
            set
            {
                if (this._CycleCountDetailId != value)
                {
                    this.OnCycleCountDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._CycleCountDetailId = value;
                    this.SendPropertyChanged("CycleCountDetailId");
                    this.OnCycleCountDetailIdChanged();
                }
            }
        }

        [Column(Name = @"CYCLE_COUNT_HEADER_ID", Storage = "_CycleCountHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long CycleCountHeaderId
        {
            get
            {
                return this._CycleCountHeaderId;
            }
            set
            {
                if (this._CycleCountHeaderId != value)
                {
                    if (this._CycleCountHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCycleCountHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._CycleCountHeaderId = value;
                    this.SendPropertyChanged("CycleCountHeaderId");
                    this.OnCycleCountHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"QUANTITY", Storage = "_Quantity", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

        [Column(Name = @"ITEM_COMMENT", Storage = "_ItemComment", DbType = "NVARCHAR2(768)")]
        public string ItemComment
        {
            get
            {
                return this._ItemComment;
            }
            set
            {
                if (this._ItemComment != value)
                {
                    this.OnItemCommentChanging(value);
                    this.SendPropertyChanging();
                    this._ItemComment = value;
                    this.SendPropertyChanged("ItemComment");
                    this.OnItemCommentChanged();
                }
            }
        }

        [Column(Name = @"PART_TYPE", Storage = "_PartType", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string PartType
        {
            get
            {
                return this._PartType;
            }
            set
            {
                if (this._PartType != value)
                {
                    this.OnPartTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PartType = value;
                    this.SendPropertyChanged("PartType");
                    this.OnPartTypeChanged();
                }
            }
        }

        [Association(Name = "CycleCountHeader_CycleCountDetail", Storage = "_CycleCountHeader", ThisKey = "CycleCountHeaderId", IsForeignKey = true)]
        public CycleCountHeader CycleCountHeader
        {
            get
            {
                return this._CycleCountHeader.Entity;
            }
            set
            {
                CycleCountHeader previousValue = this._CycleCountHeader.Entity;
                if ((previousValue != value) || (this._CycleCountHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CycleCountHeader.Entity = null;
                        previousValue.CycleCountDetails.Remove(this);
                    }
                    this._CycleCountHeader.Entity = value;
                    if (value != null)
                    {
                        value.CycleCountDetails.Add(this);
                        this._CycleCountHeaderId = value.CycleCountHeaderId;
                    }
                    else
                    {
                        this._CycleCountHeaderId = default(long);
                    }
                    this.SendPropertyChanged("CycleCountHeader");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.VIEW_ALL_IMA_FILE")]
    public partial class Part : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _PartCode;

        private string _EnglishName;

        private string _VietnamName;

        private string _Category;

        private System.Nullable<System.DateTime> _CreatedDate;

        private string _Model;

        private string _DatabaseCode;

        private string _Status;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnEnglishNameChanging(string value);
        partial void OnEnglishNameChanged();
        partial void OnVietnamNameChanging(string value);
        partial void OnVietnamNameChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnCreatedDateChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        #endregion

        public Part()
        {
            OnCreated();
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", DbType = "VARCHAR2(30)")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"ENGLISH_NAME", Storage = "_EnglishName", DbType = "VARCHAR2(40)")]
        public string EnglishName
        {
            get
            {
                return this._EnglishName;
            }
            set
            {
                if (this._EnglishName != value)
                {
                    this.OnEnglishNameChanging(value);
                    this.SendPropertyChanging();
                    this._EnglishName = value;
                    this.SendPropertyChanged("EnglishName");
                    this.OnEnglishNameChanged();
                }
            }
        }

        [Column(Name = @"VIETNAM_NAME", Storage = "_VietnamName", DbType = "VARCHAR2(120)")]
        public string VietnamName
        {
            get
            {
                return this._VietnamName;
            }
            set
            {
                if (this._VietnamName != value)
                {
                    this.OnVietnamNameChanging(value);
                    this.SendPropertyChanging();
                    this._VietnamName = value;
                    this.SendPropertyChanged("VietnamName");
                    this.OnVietnamNameChanged();
                }
            }
        }

        [Column(Name = @"CATEGORY", Storage = "_Category", DbType = "VARCHAR2(4)")]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if (this._Category != value)
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"MODEL", Storage = "_Model", DbType = "VARCHAR2(10)")]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

        [Column(Name = @"DATABASE_CODE", Storage = "_DatabaseCode", DbType = "CHAR(3)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", DbType = "VARCHAR2(1)")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_ORDER_HEADER")]
    public partial class OrderHeader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _OrderHeaderId;

        private System.Nullable<long> _ReferenceId;

        private System.DateTime _CreatedDate;

        private string _CreatedBy;

        private string _Status;

        private string _OrderType;

        private string _OrderSource;

        private string _ToDealer;

        private string _DealerCode;

        private long _ToLocation;

        private System.DateTime _OrderDate;

        private System.Nullable<System.DateTime> _ConfirmDate;

        private System.Nullable<System.DateTime> _QuotationDate;

        private System.Nullable<System.DateTime> _PaymentDate;

        private System.Nullable<System.DateTime> _DeliveryDate;

        private System.Nullable<System.DateTime> _ShippingDate;

        private System.Nullable<System.DateTime> _AutoInStockDate;

        private bool _AlreadyInStock;

        private bool _CanUndoAutoReceive;

        private string _ChangeRemark;

        private string _TipTopNumber;

        private string _TipTopProcessed;

        private long _Amount;

        private bool _SentWarningOverQuotation;

        private System.Nullable<bool> _SentWarningOverShipping;

        private System.Nullable<long> _ReferenceRootId;

        private EntitySet<OrderDetail> _OrderDetails;

        private EntitySet<ReceiveDetail> _ReceiveDetails;

        private EntitySet<ReceiveHeader> _ReceiveHeaders;

        private EntityRef<SystemData> _SystemData;

        private EntityRef<Warehouse> _Warehouse;

        private EntityRef<Dealer> _Dealer;

        private EntityRef<Dealer> _Dealer1;

        private EntitySet<OrderHeader> _OrderHeaders;

        private EntityRef<OrderHeader> _OrderHeader1;

        private EntitySet<OrderHeader> _OrderHeaders1;

        private EntityRef<OrderHeader> _OrderHeader2;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnReferenceIdChanging(System.Nullable<long> value);
        partial void OnReferenceIdChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnOrderTypeChanging(string value);
        partial void OnOrderTypeChanged();
        partial void OnOrderSourceChanging(string value);
        partial void OnOrderSourceChanged();
        partial void OnToDealerChanging(string value);
        partial void OnToDealerChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnToLocationChanging(long value);
        partial void OnToLocationChanged();
        partial void OnOrderDateChanging(System.DateTime value);
        partial void OnOrderDateChanged();
        partial void OnConfirmDateChanging(System.Nullable<System.DateTime> value);
        partial void OnConfirmDateChanged();
        partial void OnQuotationDateChanging(System.Nullable<System.DateTime> value);
        partial void OnQuotationDateChanged();
        partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPaymentDateChanged();
        partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDeliveryDateChanged();
        partial void OnShippingDateChanging(System.Nullable<System.DateTime> value);
        partial void OnShippingDateChanged();
        partial void OnAutoInStockDateChanging(System.Nullable<System.DateTime> value);
        partial void OnAutoInStockDateChanged();
        partial void OnAlreadyInStockChanging(bool value);
        partial void OnAlreadyInStockChanged();
        partial void OnCanUndoAutoReceiveChanging(bool value);
        partial void OnCanUndoAutoReceiveChanged();
        partial void OnChangeRemarkChanging(string value);
        partial void OnChangeRemarkChanged();
        partial void OnTipTopNumberChanging(string value);
        partial void OnTipTopNumberChanged();
        partial void OnTipTopProcessedChanging(string value);
        partial void OnTipTopProcessedChanged();
        partial void OnAmountChanging(long value);
        partial void OnAmountChanged();
        partial void OnSentWarningOverQuotationChanging(bool value);
        partial void OnSentWarningOverQuotationChanged();
        partial void OnSentWarningOverShippingChanging(System.Nullable<bool> value);
        partial void OnSentWarningOverShippingChanged();
        partial void OnReferenceRootIdChanging(System.Nullable<long> value);
        partial void OnReferenceRootIdChanged();
        #endregion

        public OrderHeader()
        {
            this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
            this._ReceiveDetails = new EntitySet<ReceiveDetail>(new Action<ReceiveDetail>(this.attach_ReceiveDetails), new Action<ReceiveDetail>(this.detach_ReceiveDetails));
            this._ReceiveHeaders = new EntitySet<ReceiveHeader>(new Action<ReceiveHeader>(this.attach_ReceiveHeaders), new Action<ReceiveHeader>(this.detach_ReceiveHeaders));
            this._SystemData = default(EntityRef<SystemData>);
            this._Warehouse = default(EntityRef<Warehouse>);
            this._Dealer = default(EntityRef<Dealer>);
            this._Dealer1 = default(EntityRef<Dealer>);
            this._OrderHeaders = new EntitySet<OrderHeader>(new Action<OrderHeader>(this.attach_OrderHeaders), new Action<OrderHeader>(this.detach_OrderHeaders));
            this._OrderHeader1 = default(EntityRef<OrderHeader>);
            this._OrderHeaders1 = new EntitySet<OrderHeader>(new Action<OrderHeader>(this.attach_OrderHeaders1), new Action<OrderHeader>(this.detach_OrderHeaders1));
            this._OrderHeader2 = default(EntityRef<OrderHeader>);
            OnCreated();
        }

        [Column(Name = @"ORDER_HEADER_ID", Storage = "_OrderHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"REFERENCE_ID", Storage = "_ReferenceId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ReferenceId
        {
            get
            {
                return this._ReferenceId;
            }
            set
            {
                if (this._ReferenceId != value)
                {
                    if (this._OrderHeader1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnReferenceIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReferenceId = value;
                    this.SendPropertyChanged("ReferenceId");
                    this.OnReferenceIdChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"CREATED_BY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    if (this._SystemData.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"ORDER_TYPE", Storage = "_OrderType", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string OrderType
        {
            get
            {
                return this._OrderType;
            }
            set
            {
                if (this._OrderType != value)
                {
                    this.OnOrderTypeChanging(value);
                    this.SendPropertyChanging();
                    this._OrderType = value;
                    this.SendPropertyChanged("OrderType");
                    this.OnOrderTypeChanged();
                }
            }
        }

        [Column(Name = @"ORDER_SOURCE", Storage = "_OrderSource", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string OrderSource
        {
            get
            {
                return this._OrderSource;
            }
            set
            {
                if (this._OrderSource != value)
                {
                    this.OnOrderSourceChanging(value);
                    this.SendPropertyChanging();
                    this._OrderSource = value;
                    this.SendPropertyChanged("OrderSource");
                    this.OnOrderSourceChanged();
                }
            }
        }

        [Column(Name = @"TO_DEALER", Storage = "_ToDealer", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string ToDealer
        {
            get
            {
                return this._ToDealer;
            }
            set
            {
                if (this._ToDealer != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnToDealerChanging(value);
                    this.SendPropertyChanging();
                    this._ToDealer = value;
                    this.SendPropertyChanged("ToDealer");
                    this.OnToDealerChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"TO_LOCATION", Storage = "_ToLocation", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long ToLocation
        {
            get
            {
                return this._ToLocation;
            }
            set
            {
                if (this._ToLocation != value)
                {
                    if (this._Warehouse.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnToLocationChanging(value);
                    this.SendPropertyChanging();
                    this._ToLocation = value;
                    this.SendPropertyChanged("ToLocation");
                    this.OnToLocationChanged();
                }
            }
        }

        [Column(Name = @"ORDER_DATE", Storage = "_OrderDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

        [Column(Name = @"CONFIRM_DATE", Storage = "_ConfirmDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> ConfirmDate
        {
            get
            {
                return this._ConfirmDate;
            }
            set
            {
                if (this._ConfirmDate != value)
                {
                    this.OnConfirmDateChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmDate = value;
                    this.SendPropertyChanged("ConfirmDate");
                    this.OnConfirmDateChanged();
                }
            }
        }

        [Column(Name = @"QUOTATION_DATE", Storage = "_QuotationDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> QuotationDate
        {
            get
            {
                return this._QuotationDate;
            }
            set
            {
                if (this._QuotationDate != value)
                {
                    this.OnQuotationDateChanging(value);
                    this.SendPropertyChanging();
                    this._QuotationDate = value;
                    this.SendPropertyChanged("QuotationDate");
                    this.OnQuotationDateChanged();
                }
            }
        }

        [Column(Name = @"PAYMENT_DATE", Storage = "_PaymentDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> PaymentDate
        {
            get
            {
                return this._PaymentDate;
            }
            set
            {
                if (this._PaymentDate != value)
                {
                    this.OnPaymentDateChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentDate = value;
                    this.SendPropertyChanged("PaymentDate");
                    this.OnPaymentDateChanged();
                }
            }
        }

        [Column(Name = @"DELIVERY_DATE", Storage = "_DeliveryDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> DeliveryDate
        {
            get
            {
                return this._DeliveryDate;
            }
            set
            {
                if (this._DeliveryDate != value)
                {
                    this.OnDeliveryDateChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryDate = value;
                    this.SendPropertyChanged("DeliveryDate");
                    this.OnDeliveryDateChanged();
                }
            }
        }

        [Column(Name = @"SHIPPING_DATE", Storage = "_ShippingDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> ShippingDate
        {
            get
            {
                return this._ShippingDate;
            }
            set
            {
                if (this._ShippingDate != value)
                {
                    this.OnShippingDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingDate = value;
                    this.SendPropertyChanged("ShippingDate");
                    this.OnShippingDateChanged();
                }
            }
        }

        [Column(Name = @"AUTO_IN_STOCK_DATE", Storage = "_AutoInStockDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> AutoInStockDate
        {
            get
            {
                return this._AutoInStockDate;
            }
            set
            {
                if (this._AutoInStockDate != value)
                {
                    this.OnAutoInStockDateChanging(value);
                    this.SendPropertyChanging();
                    this._AutoInStockDate = value;
                    this.SendPropertyChanged("AutoInStockDate");
                    this.OnAutoInStockDateChanged();
                }
            }
        }

        [Column(Name = @"ALREADY_IN_STOCK", Storage = "_AlreadyInStock", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool AlreadyInStock
        {
            get
            {
                return this._AlreadyInStock;
            }
            set
            {
                if (this._AlreadyInStock != value)
                {
                    this.OnAlreadyInStockChanging(value);
                    this.SendPropertyChanging();
                    this._AlreadyInStock = value;
                    this.SendPropertyChanged("AlreadyInStock");
                    this.OnAlreadyInStockChanged();
                }
            }
        }

        [Column(Name = @"CAN_UNDO_AUTO_RECEIVE", Storage = "_CanUndoAutoReceive", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool CanUndoAutoReceive
        {
            get
            {
                return this._CanUndoAutoReceive;
            }
            set
            {
                if (this._CanUndoAutoReceive != value)
                {
                    this.OnCanUndoAutoReceiveChanging(value);
                    this.SendPropertyChanging();
                    this._CanUndoAutoReceive = value;
                    this.SendPropertyChanged("CanUndoAutoReceive");
                    this.OnCanUndoAutoReceiveChanged();
                }
            }
        }

        [Column(Name = @"CHANGE_REMARK", Storage = "_ChangeRemark", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string ChangeRemark
        {
            get
            {
                return this._ChangeRemark;
            }
            set
            {
                if (this._ChangeRemark != value)
                {
                    this.OnChangeRemarkChanging(value);
                    this.SendPropertyChanging();
                    this._ChangeRemark = value;
                    this.SendPropertyChanged("ChangeRemark");
                    this.OnChangeRemarkChanged();
                }
            }
        }

        [Column(Name = @"TIP_TOP_NUMBER", Storage = "_TipTopNumber", DbType = "VARCHAR2(10)")]
        public string TipTopNumber
        {
            get
            {
                return this._TipTopNumber;
            }
            set
            {
                if (this._TipTopNumber != value)
                {
                    this.OnTipTopNumberChanging(value);
                    this.SendPropertyChanging();
                    this._TipTopNumber = value;
                    this.SendPropertyChanged("TipTopNumber");
                    this.OnTipTopNumberChanged();
                }
            }
        }

        [Column(Name = @"TIP_TOP_PROCESSED", Storage = "_TipTopProcessed", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string TipTopProcessed
        {
            get
            {
                return this._TipTopProcessed;
            }
            set
            {
                if (this._TipTopProcessed != value)
                {
                    this.OnTipTopProcessedChanging(value);
                    this.SendPropertyChanging();
                    this._TipTopProcessed = value;
                    this.SendPropertyChanged("TipTopProcessed");
                    this.OnTipTopProcessedChanged();
                }
            }
        }

        [Column(Name = @"AMOUNT", Storage = "_Amount", CanBeNull = false, DbType = "NUMBER(19) NOT NULL")]
        public long Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Column(Name = @"SENT_WARNING_OVER_QUOTATION", Storage = "_SentWarningOverQuotation", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public bool SentWarningOverQuotation
        {
            get
            {
                return this._SentWarningOverQuotation;
            }
            set
            {
                if (this._SentWarningOverQuotation != value)
                {
                    this.OnSentWarningOverQuotationChanging(value);
                    this.SendPropertyChanging();
                    this._SentWarningOverQuotation = value;
                    this.SendPropertyChanged("SentWarningOverQuotation");
                    this.OnSentWarningOverQuotationChanged();
                }
            }
        }

        [Column(Name = @"SENT_WARNING_OVER_SHIPPING", Storage = "_SentWarningOverShipping", DbType = "NUMBER(1)")]
        public System.Nullable<bool> SentWarningOverShipping
        {
            get
            {
                return this._SentWarningOverShipping;
            }
            set
            {
                if (this._SentWarningOverShipping != value)
                {
                    this.OnSentWarningOverShippingChanging(value);
                    this.SendPropertyChanging();
                    this._SentWarningOverShipping = value;
                    this.SendPropertyChanged("SentWarningOverShipping");
                    this.OnSentWarningOverShippingChanged();
                }
            }
        }

        [Column(Name = @"REFERENCE_ROOT_ID", Storage = "_ReferenceRootId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ReferenceRootId
        {
            get
            {
                return this._ReferenceRootId;
            }
            set
            {
                if (this._ReferenceRootId != value)
                {
                    if (this._OrderHeader2.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnReferenceRootIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReferenceRootId = value;
                    this.SendPropertyChanged("ReferenceRootId");
                    this.OnReferenceRootIdChanged();
                }
            }
        }

        [Association(Name = "OrderHeader_OrderDetail", Storage = "_OrderDetails", OtherKey = "OrderHeaderId")]
        public EntitySet<OrderDetail> OrderDetails
        {
            get
            {
                return this._OrderDetails;
            }
            set
            {
                this._OrderDetails.Assign(value);
            }
        }

        [Association(Name = "OrderHeader_ReceiveDetail", Storage = "_ReceiveDetails", OtherKey = "OrderHeaderId")]
        public EntitySet<ReceiveDetail> ReceiveDetails
        {
            get
            {
                return this._ReceiveDetails;
            }
            set
            {
                this._ReceiveDetails.Assign(value);
            }
        }

        [Association(Name = "OrderHeader_ReceiveHeader", Storage = "_ReceiveHeaders", OtherKey = "OrderHeaderId")]
        public EntitySet<ReceiveHeader> ReceiveHeaders
        {
            get
            {
                return this._ReceiveHeaders;
            }
            set
            {
                this._ReceiveHeaders.Assign(value);
            }
        }

        [Association(Name = "SystemData_OrderHeader", Storage = "_SystemData", ThisKey = "Status", IsForeignKey = true)]
        public SystemData SystemData
        {
            get
            {
                return this._SystemData.Entity;
            }
            set
            {
                SystemData previousValue = this._SystemData.Entity;
                if ((previousValue != value) || (this._SystemData.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SystemData.Entity = null;
                        previousValue.OrderHeaders.Remove(this);
                    }
                    this._SystemData.Entity = value;
                    if (value != null)
                    {
                        value.OrderHeaders.Add(this);
                        this._Status = value.Code;
                    }
                    else
                    {
                        this._Status = default(string);
                    }
                    this.SendPropertyChanged("SystemData");
                }
            }
        }

        [Association(Name = "Warehouse_OrderHeader", Storage = "_Warehouse", ThisKey = "ToLocation", IsForeignKey = true)]
        public Warehouse Warehouse
        {
            get
            {
                return this._Warehouse.Entity;
            }
            set
            {
                Warehouse previousValue = this._Warehouse.Entity;
                if ((previousValue != value) || (this._Warehouse.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Warehouse.Entity = null;
                        previousValue.OrderHeaders.Remove(this);
                    }
                    this._Warehouse.Entity = value;
                    if (value != null)
                    {
                        value.OrderHeaders.Add(this);
                        this._ToLocation = value.WarehouseId;
                    }
                    else
                    {
                        this._ToLocation = default(long);
                    }
                    this.SendPropertyChanged("Warehouse");
                }
            }
        }

        [Association(Name = "Dealer_OrderHeader", Storage = "_Dealer", ThisKey = "ToDealer", IsForeignKey = true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.OrderHeaders.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.OrderHeaders.Add(this);
                        this._ToDealer = value.DealerCode;
                    }
                    else
                    {
                        this._ToDealer = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        [Association(Name = "Dealer_OrderHeader1", Storage = "_Dealer1", ThisKey = "DealerCode", IsForeignKey = true)]
        public Dealer Dealer1
        {
            get
            {
                return this._Dealer1.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer1.Entity;
                if ((previousValue != value) || (this._Dealer1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer1.Entity = null;
                        previousValue.OrderHeaders1.Remove(this);
                    }
                    this._Dealer1.Entity = value;
                    if (value != null)
                    {
                        value.OrderHeaders1.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer1");
                }
            }
        }

        [Association(Name = "OrderHeader_OrderHeader", Storage = "_OrderHeaders", OtherKey = "ReferenceId")]
        public EntitySet<OrderHeader> OrderHeaders
        {
            get
            {
                return this._OrderHeaders;
            }
            set
            {
                this._OrderHeaders.Assign(value);
            }
        }

        [Association(Name = "OrderHeader_OrderHeader", Storage = "_OrderHeader1", ThisKey = "ReferenceId", IsForeignKey = true)]
        public OrderHeader OrderHeader1
        {
            get
            {
                return this._OrderHeader1.Entity;
            }
            set
            {
                OrderHeader previousValue = this._OrderHeader1.Entity;
                if ((previousValue != value) || (this._OrderHeader1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._OrderHeader1.Entity = null;
                        previousValue.OrderHeaders.Remove(this);
                    }
                    this._OrderHeader1.Entity = value;
                    if (value != null)
                    {
                        value.OrderHeaders.Add(this);
                        this._ReferenceId = value.OrderHeaderId;
                    }
                    else
                    {
                        this._ReferenceId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("OrderHeader1");
                }
            }
        }

        [Association(Name = "OrderHeader_OrderHeader1", Storage = "_OrderHeaders1", OtherKey = "ReferenceRootId")]
        public EntitySet<OrderHeader> OrderHeaders1
        {
            get
            {
                return this._OrderHeaders1;
            }
            set
            {
                this._OrderHeaders1.Assign(value);
            }
        }

        [Association(Name = "OrderHeader_OrderHeader1", Storage = "_OrderHeader2", ThisKey = "ReferenceRootId", IsForeignKey = true)]
        public OrderHeader OrderHeader2
        {
            get
            {
                return this._OrderHeader2.Entity;
            }
            set
            {
                OrderHeader previousValue = this._OrderHeader2.Entity;
                if ((previousValue != value) || (this._OrderHeader2.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._OrderHeader2.Entity = null;
                        previousValue.OrderHeaders1.Remove(this);
                    }
                    this._OrderHeader2.Entity = value;
                    if (value != null)
                    {
                        value.OrderHeaders1.Add(this);
                        this._ReferenceRootId = value.OrderHeaderId;
                    }
                    else
                    {
                        this._ReferenceRootId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("OrderHeader2");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.OrderHeader = this;
        }

        private void detach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.OrderHeader = null;
        }

        private void attach_ReceiveDetails(ReceiveDetail entity)
        {
            this.SendPropertyChanging("ReceiveDetails");
            entity.OrderHeader = this;
        }

        private void detach_ReceiveDetails(ReceiveDetail entity)
        {
            this.SendPropertyChanging("ReceiveDetails");
            entity.OrderHeader = null;
        }

        private void attach_ReceiveHeaders(ReceiveHeader entity)
        {
            this.SendPropertyChanging("ReceiveHeaders");
            entity.OrderHeader = this;
        }

        private void detach_ReceiveHeaders(ReceiveHeader entity)
        {
            this.SendPropertyChanging("ReceiveHeaders");
            entity.OrderHeader = null;
        }

        private void attach_OrderHeaders(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders");
            entity.OrderHeader1 = this;
        }

        private void detach_OrderHeaders(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders");
            entity.OrderHeader1 = null;
        }

        private void attach_OrderHeaders1(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders1");
            entity.OrderHeader2 = this;
        }

        private void detach_OrderHeaders1(OrderHeader entity)
        {
            this.SendPropertyChanging("OrderHeaders1");
            entity.OrderHeader2 = null;
        }
    }

    [Table(Name = @"VDMS.VIEW_ALL_TC_SPM_FILE")]
    public partial class Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _EngineNumber;

        private string _Color;

        private System.Nullable<System.DateTime> _OutstockDate;

        private string _Model;

        private string _ItemCode;

        private string _DatabaseCode;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnEngineNumberChanging(string value);
        partial void OnEngineNumberChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnOutstockDateChanging(System.Nullable<System.DateTime> value);
        partial void OnOutstockDateChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        #endregion

        public Vehicle()
        {
            OnCreated();
        }

        [Column(Name = @"ENGINENUMBER", Storage = "_EngineNumber", DbType = "VARCHAR2(20)")]
        public string EngineNumber
        {
            get
            {
                return this._EngineNumber;
            }
            set
            {
                if (this._EngineNumber != value)
                {
                    this.OnEngineNumberChanging(value);
                    this.SendPropertyChanging();
                    this._EngineNumber = value;
                    this.SendPropertyChanged("EngineNumber");
                    this.OnEngineNumberChanged();
                }
            }
        }

        [Column(Name = @"COLOR", Storage = "_Color", DbType = "VARCHAR2(8)")]
        public string Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if (this._Color != value)
                {
                    this.OnColorChanging(value);
                    this.SendPropertyChanging();
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

        [Column(Name = @"OUTSTOCKDATE", Storage = "_OutstockDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> OutstockDate
        {
            get
            {
                return this._OutstockDate;
            }
            set
            {
                if (this._OutstockDate != value)
                {
                    this.OnOutstockDateChanging(value);
                    this.SendPropertyChanging();
                    this._OutstockDate = value;
                    this.SendPropertyChanged("OutstockDate");
                    this.OnOutstockDateChanged();
                }
            }
        }

        [Column(Name = @"MODEL", Storage = "_Model", DbType = "VARCHAR2(8)")]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

        [Column(Name = @"ITEMCODE", Storage = "_ItemCode", DbType = "VARCHAR2(30)")]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"DATABASECODE", Storage = "_DatabaseCode", DbType = "VARCHAR2(10)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_PART_SPECIFICATION")]
    public partial class PartSpecification : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _PartSpecId;

        private string _PartCode;

        private string _SpecNote;

        private string _PackBy;

        private string _PackUnit;

        private System.Nullable<int> _PackQuantity;

        private string _Status;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPartSpecIdChanging(long value);
        partial void OnPartSpecIdChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnSpecNoteChanging(string value);
        partial void OnSpecNoteChanged();
        partial void OnPackByChanging(string value);
        partial void OnPackByChanged();
        partial void OnPackUnitChanging(string value);
        partial void OnPackUnitChanged();
        partial void OnPackQuantityChanging(System.Nullable<int> value);
        partial void OnPackQuantityChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        #endregion

        public PartSpecification()
        {
            OnCreated();
        }

        [Column(Name = @"PART_SPEC_ID", Storage = "_PartSpecId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long PartSpecId
        {
            get
            {
                return this._PartSpecId;
            }
            set
            {
                if (this._PartSpecId != value)
                {
                    this.OnPartSpecIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartSpecId = value;
                    this.SendPropertyChanged("PartSpecId");
                    this.OnPartSpecIdChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"SPEC_NOTE", Storage = "_SpecNote", DbType = "NVARCHAR2(1020)")]
        public string SpecNote
        {
            get
            {
                return this._SpecNote;
            }
            set
            {
                if (this._SpecNote != value)
                {
                    this.OnSpecNoteChanging(value);
                    this.SendPropertyChanging();
                    this._SpecNote = value;
                    this.SendPropertyChanged("SpecNote");
                    this.OnSpecNoteChanged();
                }
            }
        }

        [Column(Name = @"PACK_BY", Storage = "_PackBy", DbType = "CHAR(5)")]
        public string PackBy
        {
            get
            {
                return this._PackBy;
            }
            set
            {
                if (this._PackBy != value)
                {
                    this.OnPackByChanging(value);
                    this.SendPropertyChanging();
                    this._PackBy = value;
                    this.SendPropertyChanged("PackBy");
                    this.OnPackByChanged();
                }
            }
        }

        [Column(Name = @"PACK_UNIT", Storage = "_PackUnit", DbType = "CHAR(5)")]
        public string PackUnit
        {
            get
            {
                return this._PackUnit;
            }
            set
            {
                if (this._PackUnit != value)
                {
                    this.OnPackUnitChanging(value);
                    this.SendPropertyChanging();
                    this._PackUnit = value;
                    this.SendPropertyChanged("PackUnit");
                    this.OnPackUnitChanged();
                }
            }
        }

        [Column(Name = @"PACK_QUANTITY", Storage = "_PackQuantity", DbType = "NUMBER(5)")]
        public System.Nullable<int> PackQuantity
        {
            get
            {
                return this._PackQuantity;
            }
            set
            {
                if (this._PackQuantity != value)
                {
                    this.OnPackQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._PackQuantity = value;
                    this.SendPropertyChanged("PackQuantity");
                    this.OnPackQuantityChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_PART_REPLACEMENT")]
    public partial class V2PPartReplacement : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _PartReplaceId;

        private string _PartCode;

        private string _ReplacePartCode;

        private System.DateTime _CreatedDate;

        private System.Nullable<System.DateTime> _EditedDate;

        private string _Status;

        private string _DatabaseCode;

        private string _OptCode;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPartReplaceIdChanging(long value);
        partial void OnPartReplaceIdChanged();
        partial void OnPartCodeChanging(string value);
        partial void OnPartCodeChanged();
        partial void OnReplacePartCodeChanging(string value);
        partial void OnReplacePartCodeChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnEditedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEditedDateChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnOptCodeChanging(string value);
        partial void OnOptCodeChanged();
        #endregion

        public V2PPartReplacement()
        {
            OnCreated();
        }

        [Column(Name = @"PART_REPLACE_ID", Storage = "_PartReplaceId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long PartReplaceId
        {
            get
            {
                return this._PartReplaceId;
            }
            set
            {
                if (this._PartReplaceId != value)
                {
                    this.OnPartReplaceIdChanging(value);
                    this.SendPropertyChanging();
                    this._PartReplaceId = value;
                    this.SendPropertyChanged("PartReplaceId");
                    this.OnPartReplaceIdChanged();
                }
            }
        }

        [Column(Name = @"PART_CODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string PartCode
        {
            get
            {
                return this._PartCode;
            }
            set
            {
                if (this._PartCode != value)
                {
                    this.OnPartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PartCode = value;
                    this.SendPropertyChanged("PartCode");
                    this.OnPartCodeChanged();
                }
            }
        }

        [Column(Name = @"REPLACE_PART_CODE", Storage = "_ReplacePartCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string ReplacePartCode
        {
            get
            {
                return this._ReplacePartCode;
            }
            set
            {
                if (this._ReplacePartCode != value)
                {
                    this.OnReplacePartCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ReplacePartCode = value;
                    this.SendPropertyChanged("ReplacePartCode");
                    this.OnReplacePartCodeChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"EDITED_DATE", Storage = "_EditedDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> EditedDate
        {
            get
            {
                return this._EditedDate;
            }
            set
            {
                if (this._EditedDate != value)
                {
                    this.OnEditedDateChanging(value);
                    this.SendPropertyChanging();
                    this._EditedDate = value;
                    this.SendPropertyChanged("EditedDate");
                    this.OnEditedDateChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"DATABASE_CODE", Storage = "_DatabaseCode", DbType = "VARCHAR2(10)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Name = @"OPT_CODE", Storage = "_OptCode", DbType = "VARCHAR2(30)")]
        public string OptCode
        {
            get
            {
                return this._OptCode;
            }
            set
            {
                if (this._OptCode != value)
                {
                    this.OnOptCodeChanging(value);
                    this.SendPropertyChanging();
                    this._OptCode = value;
                    this.SendPropertyChanged("OptCode");
                    this.OnOptCodeChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName)
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
