//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 4/15/2010 6:42:19 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace VDMS.II.Linq
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "VDMS")]
    [ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
    public partial class BonusDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertDealer(VDMS.Bonus.Entity.Dealer instance);
        partial void UpdateDealer(VDMS.Bonus.Entity.Dealer instance);
        partial void DeleteDealer(VDMS.Bonus.Entity.Dealer instance);
        partial void InsertBonusPlanHeader(VDMS.Bonus.Entity.BonusPlanHeader instance);
        partial void UpdateBonusPlanHeader(VDMS.Bonus.Entity.BonusPlanHeader instance);
        partial void DeleteBonusPlanHeader(VDMS.Bonus.Entity.BonusPlanHeader instance);
        partial void InsertBonusSource(VDMS.Bonus.Entity.BonusSource instance);
        partial void UpdateBonusSource(VDMS.Bonus.Entity.BonusSource instance);
        partial void DeleteBonusSource(VDMS.Bonus.Entity.BonusSource instance);
        partial void InsertBonusPlanDetail(VDMS.Bonus.Entity.BonusPlanDetail instance);
        partial void UpdateBonusPlanDetail(VDMS.Bonus.Entity.BonusPlanDetail instance);
        partial void DeleteBonusPlanDetail(VDMS.Bonus.Entity.BonusPlanDetail instance);
        partial void InsertBonus(VDMS.Bonus.Entity.Bonus instance);
        partial void UpdateBonus(VDMS.Bonus.Entity.Bonus instance);
        partial void DeleteBonus(VDMS.Bonus.Entity.Bonus instance);
        partial void InsertOrderHeader(VDMS.Bonus.Entity.OrderHeader instance);
        partial void UpdateOrderHeader(VDMS.Bonus.Entity.OrderHeader instance);
        partial void DeleteOrderHeader(VDMS.Bonus.Entity.OrderHeader instance);
        partial void InsertBonusTransaction(VDMS.Bonus.Entity.BonusTransaction instance);
        partial void UpdateBonusTransaction(VDMS.Bonus.Entity.BonusTransaction instance);
        partial void DeleteBonusTransaction(VDMS.Bonus.Entity.BonusTransaction instance);
        #endregion

        public BonusDataContext() :
        base(@"User Id=vdms;Password=vdms;Server=vdms;Home=orahome92;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public BonusDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BonusDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BonusDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public BonusDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<VDMS.Bonus.Entity.Dealer> Dealers
        {
            get
            {
                return this.GetTable<VDMS.Bonus.Entity.Dealer>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.Bonus.Entity.BonusPlanHeader> BonusPlanHeaders
        {
            get
            {
                return this.GetTable<VDMS.Bonus.Entity.BonusPlanHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.Bonus.Entity.BonusSource> BonusSources
        {
            get
            {
                return this.GetTable<VDMS.Bonus.Entity.BonusSource>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.Bonus.Entity.BonusPlanDetail> BonusPlanDetails
        {
            get
            {
                return this.GetTable<VDMS.Bonus.Entity.BonusPlanDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.Bonus.Entity.Bonus> Bonus
        {
            get
            {
                return this.GetTable<VDMS.Bonus.Entity.Bonus>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.Bonus.Entity.OrderHeader> SaleOrderheaders
        {
            get
            {
                return this.GetTable<VDMS.Bonus.Entity.OrderHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.Bonus.Entity.BonusTransaction> BonusTransactions
        {
            get
            {
                return this.GetTable<VDMS.Bonus.Entity.BonusTransaction>();
            }
        }
    }
}

namespace VDMS.Bonus.Entity
{

    [Table(Name = @"VDMS.V2_P_DEALER")]
    public partial class Dealer : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _DealerCode;

        private string _ParentCode;

        private System.Nullable<long> _ContactId;

        private string _DealerName;

        private string _DealerType;

        private string _Address;

        private string _DatabaseCode;

        private string _AreaCode;

        private int _ReceiveSpan;

        private long _DefaultWarehouseId;

        private long _DefaultVWarehouseId;

        private long _OrderDateControl;

        private EntitySet<Dealer> _Dealers;

        private EntityRef<Dealer> _Dealer1;

        private EntitySet<BonusPlanDetail> _BonusPlanDetails;

        private EntitySet<Bonus> _Bonus;

        private EntitySet<BonusTransaction> _BonusTransactions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnParentCodeChanging(string value);
        partial void OnParentCodeChanged();
        partial void OnContactIdChanging(System.Nullable<long> value);
        partial void OnContactIdChanged();
        partial void OnDealerNameChanging(string value);
        partial void OnDealerNameChanged();
        partial void OnDealerTypeChanging(string value);
        partial void OnDealerTypeChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnAreaCodeChanging(string value);
        partial void OnAreaCodeChanged();
        partial void OnReceiveSpanChanging(int value);
        partial void OnReceiveSpanChanged();
        partial void OnDefaultWarehouseIdChanging(long value);
        partial void OnDefaultWarehouseIdChanged();
        partial void OnDefaultVWarehouseIdChanging(long value);
        partial void OnDefaultVWarehouseIdChanged();
        partial void OnOrderDateControlChanging(long value);
        partial void OnOrderDateControlChanged();
        #endregion

        public Dealer()
        {
            this._Dealers = new EntitySet<Dealer>(new Action<Dealer>(this.attach_Dealers), new Action<Dealer>(this.detach_Dealers));
            this._Dealer1  = default(EntityRef<Dealer>);
            this._BonusPlanDetails = new EntitySet<BonusPlanDetail>(new Action<BonusPlanDetail>(this.attach_BonusPlanDetails), new Action<BonusPlanDetail>(this.detach_BonusPlanDetails));
            this._Bonus = new EntitySet<Bonus>(new Action<Bonus>(this.attach_Bonus), new Action<Bonus>(this.detach_Bonus));
            this._BonusTransactions = new EntitySet<BonusTransaction>(new Action<BonusTransaction>(this.attach_BonusTransactions), new Action<BonusTransaction>(this.detach_BonusTransactions));
            OnCreated();
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL", IsPrimaryKey = true)]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"PARENT_CODE", Storage = "_ParentCode", DbType = "VARCHAR2(30)")]
        public string ParentCode
        {
            get
            {
                return this._ParentCode;
            }
            set
            {
                if (this._ParentCode != value)
                {
                    if (this._Dealer1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ParentCode = value;
                    this.SendPropertyChanged("ParentCode");
                    this.OnParentCodeChanged();
                }
            }
        }

        [Column(Name = @"CONTACT_ID", Storage = "_ContactId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ContactId
        {
            get
            {
                return this._ContactId;
            }
            set
            {
                if (this._ContactId != value)
                {
                    this.OnContactIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContactId = value;
                    this.SendPropertyChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_NAME", Storage = "_DealerName", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string DealerName
        {
            get
            {
                return this._DealerName;
            }
            set
            {
                if (this._DealerName != value)
                {
                    this.OnDealerNameChanging(value);
                    this.SendPropertyChanging();
                    this._DealerName = value;
                    this.SendPropertyChanged("DealerName");
                    this.OnDealerNameChanged();
                }
            }
        }

        [Column(Name = @"DEALER_TYPE", Storage = "_DealerType", DbType = "CHAR(2)")]
        public string DealerType
        {
            get
            {
                return this._DealerType;
            }
            set
            {
                if (this._DealerType != value)
                {
                    this.OnDealerTypeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerType = value;
                    this.SendPropertyChanged("DealerType");
                    this.OnDealerTypeChanged();
                }
            }
        }

        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "NVARCHAR2(512)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [Column(Name = @"DATABASE_CODE", Storage = "_DatabaseCode", CanBeNull = false, DbType = "VARCHAR2(10) NOT NULL")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Name = @"AREA_CODE", Storage = "_AreaCode", CanBeNull = false, DbType = "VARCHAR2(25) NOT NULL")]
        public string AreaCode
        {
            get
            {
                return this._AreaCode;
            }
            set
            {
                if (this._AreaCode != value)
                {
                    this.OnAreaCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AreaCode = value;
                    this.SendPropertyChanged("AreaCode");
                    this.OnAreaCodeChanged();
                }
            }
        }

        [Column(Name = @"RECEIVE_SPAN", Storage = "_ReceiveSpan", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int ReceiveSpan
        {
            get
            {
                return this._ReceiveSpan;
            }
            set
            {
                if (this._ReceiveSpan != value)
                {
                    this.OnReceiveSpanChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiveSpan = value;
                    this.SendPropertyChanged("ReceiveSpan");
                    this.OnReceiveSpanChanged();
                }
            }
        }

        [Column(Name = @"DEFAULT_WAREHOUSE_ID", Storage = "_DefaultWarehouseId", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long DefaultWarehouseId
        {
            get
            {
                return this._DefaultWarehouseId;
            }
            set
            {
                if (this._DefaultWarehouseId != value)
                {
                    this.OnDefaultWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefaultWarehouseId = value;
                    this.SendPropertyChanged("DefaultWarehouseId");
                    this.OnDefaultWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"DEFAULT_V_WAREHOUSE_ID", Storage = "_DefaultVWarehouseId", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long DefaultVWarehouseId
        {
            get
            {
                return this._DefaultVWarehouseId;
            }
            set
            {
                if (this._DefaultVWarehouseId != value)
                {
                    this.OnDefaultVWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefaultVWarehouseId = value;
                    this.SendPropertyChanged("DefaultVWarehouseId");
                    this.OnDefaultVWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"ORDER_DATE_CONTROL", Storage = "_OrderDateControl", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long OrderDateControl
        {
            get
            {
                return this._OrderDateControl;
            }
            set
            {
                if (this._OrderDateControl != value)
                {
                    this.OnOrderDateControlChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDateControl = value;
                    this.SendPropertyChanged("OrderDateControl");
                    this.OnOrderDateControlChanged();
                }
            }
        }

        [Association(Name="Dealer_Dealer", Storage="_Dealers", OtherKey="ParentCode")]
        public EntitySet<Dealer> Dealers
        {
            get
            {
                return this._Dealers;
            }
            set
            {
                this._Dealers.Assign(value);
            }
        }

        [Association(Name="Dealer_Dealer", Storage="_Dealer1", ThisKey="ParentCode", IsForeignKey=true)]
        public Dealer Dealer1
        {
            get
            {
                return this._Dealer1.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer1.Entity;
                if ((previousValue != value) || (this._Dealer1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer1.Entity = null;
                        previousValue.Dealers.Remove(this);
                    }
                    this._Dealer1.Entity = value;
                    if (value != null)
                    {
                        value.Dealers.Add(this);
                        this._ParentCode = value.DealerCode;
                    }
                    else
                    {
                        this._ParentCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer1");
                }
            }
        }

        [Association(Name="Dealer_BonusPlanDetail", Storage="_BonusPlanDetails", OtherKey="DealerCode")]
        public EntitySet<BonusPlanDetail> BonusPlanDetails
        {
            get
            {
                return this._BonusPlanDetails;
            }
            set
            {
                this._BonusPlanDetails.Assign(value);
            }
        }

        [Association(Name="Dealer_Bonus", Storage="_Bonus", OtherKey="DealerCode")]
        public EntitySet<Bonus> Bonus
        {
            get
            {
                return this._Bonus;
            }
            set
            {
                this._Bonus.Assign(value);
            }
        }

        [Association(Name="Dealer_BonusTransaction", Storage="_BonusTransactions", OtherKey="DealerCode")]
        public EntitySet<BonusTransaction> BonusTransactions
        {
            get
            {
                return this._BonusTransactions;
            }
            set
            {
                this._BonusTransactions.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Dealers(Dealer entity)
        {
            this.SendPropertyChanging("Dealers");
            entity.Dealer1 = this;
        }
    
        private void detach_Dealers(Dealer entity)
        {
            this.SendPropertyChanging("Dealers");
            entity.Dealer1 = null;
        }

        private void attach_BonusPlanDetails(BonusPlanDetail entity)
        {
            this.SendPropertyChanging("BonusPlanDetails");
            entity.Dealer = this;
        }
    
        private void detach_BonusPlanDetails(BonusPlanDetail entity)
        {
            this.SendPropertyChanging("BonusPlanDetails");
            entity.Dealer = null;
        }

        private void attach_Bonus(Bonus entity)
        {
            this.SendPropertyChanging("Bonus");
            entity.Dealer = this;
        }
    
        private void detach_Bonus(Bonus entity)
        {
            this.SendPropertyChanging("Bonus");
            entity.Dealer = null;
        }

        private void attach_BonusTransactions(BonusTransaction entity)
        {
            this.SendPropertyChanging("BonusTransactions");
            entity.Dealer = this;
        }
    
        private void detach_BonusTransactions(BonusTransaction entity)
        {
            this.SendPropertyChanging("BonusTransactions");
            entity.Dealer = null;
        }
    }

    [Table(Name = @"VDMS.V2_DEALER_BONUS_PLAN_HEADER")]
    public partial class BonusPlanHeader : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _BonusPlanHeaderId;

        private string _BonusPlanName;

        private System.DateTime _CreatedDate;

        private System.DateTime _FromDate;

        private System.Nullable<System.DateTime> _ToDate;

        private string _UserName;

        private string _Status;

        private string _PlanType;

        private string _Description;

        private string _DatabaseCode;

        private EntitySet<BonusPlanDetail> _BonusPlanDetails;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBonusPlanHeaderIdChanging(long value);
        partial void OnBonusPlanHeaderIdChanged();
        partial void OnBonusPlanNameChanging(string value);
        partial void OnBonusPlanNameChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnFromDateChanging(System.DateTime value);
        partial void OnFromDateChanged();
        partial void OnToDateChanging(System.Nullable<System.DateTime> value);
        partial void OnToDateChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnPlanTypeChanging(string value);
        partial void OnPlanTypeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        #endregion

        public BonusPlanHeader()
        {
            this._BonusPlanDetails = new EntitySet<BonusPlanDetail>(new Action<BonusPlanDetail>(this.attach_BonusPlanDetails), new Action<BonusPlanDetail>(this.detach_BonusPlanDetails));
            OnCreated();
        }

        [Column(Name = @"BONUS_PLAN_HEADER_ID", Storage = "_BonusPlanHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long BonusPlanHeaderId
        {
            get
            {
                return this._BonusPlanHeaderId;
            }
            set
            {
                if (this._BonusPlanHeaderId != value)
                {
                    this.OnBonusPlanHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._BonusPlanHeaderId = value;
                    this.SendPropertyChanged("BonusPlanHeaderId");
                    this.OnBonusPlanHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"BONUS_PLAN_NAME", Storage = "_BonusPlanName", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string BonusPlanName
        {
            get
            {
                return this._BonusPlanName;
            }
            set
            {
                if (this._BonusPlanName != value)
                {
                    this.OnBonusPlanNameChanging(value);
                    this.SendPropertyChanging();
                    this._BonusPlanName = value;
                    this.SendPropertyChanged("BonusPlanName");
                    this.OnBonusPlanNameChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"FROM_DATE", Storage = "_FromDate", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime FromDate
        {
            get
            {
                return this._FromDate;
            }
            set
            {
                if (this._FromDate != value)
                {
                    this.OnFromDateChanging(value);
                    this.SendPropertyChanging();
                    this._FromDate = value;
                    this.SendPropertyChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }

        [Column(Name = @"TO_DATE", Storage = "_ToDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> ToDate
        {
            get
            {
                return this._ToDate;
            }
            set
            {
                if (this._ToDate != value)
                {
                    this.OnToDateChanging(value);
                    this.SendPropertyChanging();
                    this._ToDate = value;
                    this.SendPropertyChanged("ToDate");
                    this.OnToDateChanged();
                }
            }
        }

        [Column(Name = @"USER_NAME", Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", DbType = "CHAR(2)")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"PLAN_TYPE", Storage = "_PlanType", DbType = "CHAR(2)")]
        public string PlanType
        {
            get
            {
                return this._PlanType;
            }
            set
            {
                if (this._PlanType != value)
                {
                    this.OnPlanTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PlanType = value;
                    this.SendPropertyChanged("PlanType");
                    this.OnPlanTypeChanged();
                }
            }
        }

        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(1024)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = @"Database_Code", Storage = "_DatabaseCode", CanBeNull = false, DbType = "varchar2(30)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Association(Name="BonusPlanHeader_BonusPlanDetail", Storage="_BonusPlanDetails", OtherKey="BonusPlanHeaderId")]
        public EntitySet<BonusPlanDetail> BonusPlanDetails
        {
            get
            {
                return this._BonusPlanDetails;
            }
            set
            {
                this._BonusPlanDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BonusPlanDetails(BonusPlanDetail entity)
        {
            this.SendPropertyChanging("BonusPlanDetails");
            entity.BonusPlanHeader = this;
        }
    
        private void detach_BonusPlanDetails(BonusPlanDetail entity)
        {
            this.SendPropertyChanging("BonusPlanDetails");
            entity.BonusPlanHeader = null;
        }
    }

    [Table(Name = @"VDMS.V2_DEALER_BONUS_SOURCE")]
    public partial class BonusSource : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _BonusSourceId;

        private string _BonusSourceName;

        private string _Description;

        private EntitySet<BonusPlanDetail> _BonusPlanDetails;

        private EntitySet<BonusTransaction> _BonusTransactions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBonusSourceIdChanging(long value);
        partial void OnBonusSourceIdChanged();
        partial void OnBonusSourceNameChanging(string value);
        partial void OnBonusSourceNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public BonusSource()
        {
            this._BonusPlanDetails = new EntitySet<BonusPlanDetail>(new Action<BonusPlanDetail>(this.attach_BonusPlanDetails), new Action<BonusPlanDetail>(this.detach_BonusPlanDetails));
            this._BonusTransactions = new EntitySet<BonusTransaction>(new Action<BonusTransaction>(this.attach_BonusTransactions), new Action<BonusTransaction>(this.detach_BonusTransactions));
            OnCreated();
        }

        [Column(Name = @"BONUS_SOURCE_ID", Storage = "_BonusSourceId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long BonusSourceId
        {
            get
            {
                return this._BonusSourceId;
            }
            set
            {
                if (this._BonusSourceId != value)
                {
                    this.OnBonusSourceIdChanging(value);
                    this.SendPropertyChanging();
                    this._BonusSourceId = value;
                    this.SendPropertyChanged("BonusSourceId");
                    this.OnBonusSourceIdChanged();
                }
            }
        }

        [Column(Name = @"BONUS_SOURCE_NAME", Storage = "_BonusSourceName", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string BonusSourceName
        {
            get
            {
                return this._BonusSourceName;
            }
            set
            {
                if (this._BonusSourceName != value)
                {
                    this.OnBonusSourceNameChanging(value);
                    this.SendPropertyChanging();
                    this._BonusSourceName = value;
                    this.SendPropertyChanged("BonusSourceName");
                    this.OnBonusSourceNameChanged();
                }
            }
        }

        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(1024)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Association(Name="BonusSource_BonusPlanDetail", Storage="_BonusPlanDetails", OtherKey="BonusSourceId")]
        public EntitySet<BonusPlanDetail> BonusPlanDetails
        {
            get
            {
                return this._BonusPlanDetails;
            }
            set
            {
                this._BonusPlanDetails.Assign(value);
            }
        }

        [Association(Name="BonusSource_BonusTransaction", Storage="_BonusTransactions", OtherKey="BonusSourceId")]
        public EntitySet<BonusTransaction> BonusTransactions
        {
            get
            {
                return this._BonusTransactions;
            }
            set
            {
                this._BonusTransactions.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BonusPlanDetails(BonusPlanDetail entity)
        {
            this.SendPropertyChanging("BonusPlanDetails");
            entity.BonusSource = this;
        }
    
        private void detach_BonusPlanDetails(BonusPlanDetail entity)
        {
            this.SendPropertyChanging("BonusPlanDetails");
            entity.BonusSource = null;
        }

        private void attach_BonusTransactions(BonusTransaction entity)
        {
            this.SendPropertyChanging("BonusTransactions");
            entity.BonusSource = this;
        }
    
        private void detach_BonusTransactions(BonusTransaction entity)
        {
            this.SendPropertyChanging("BonusTransactions");
            entity.BonusSource = null;
        }
    }

    [Table(Name = @"VDMS.V2_DEALER_BONUS_PLAN_DETAIL")]
    public partial class BonusPlanDetail : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _BonusPlanDetailId;

        private long _BonusPlanHeaderId;

        private System.Nullable<long> _BonusSourceId;

        private string _DealerCode;

        private System.Nullable<System.DateTime> _BonusDate;

        private long _Amount;

        private System.DateTime _CreatedDate;

        private string _UserName;

        private string _Status;

        private string _PlanType;

        private string _Description;

        private EntityRef<Dealer> _Dealer;

        private EntityRef<BonusPlanHeader> _BonusPlanHeader;

        private EntityRef<BonusSource> _BonusSource;

        private EntitySet<BonusTransaction> _BonusTransactions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBonusPlanDetailIdChanging(long value);
        partial void OnBonusPlanDetailIdChanged();
        partial void OnBonusPlanHeaderIdChanging(long value);
        partial void OnBonusPlanHeaderIdChanged();
        partial void OnBonusSourceIdChanging(System.Nullable<long> value);
        partial void OnBonusSourceIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnBonusDateChanging(System.Nullable<System.DateTime> value);
        partial void OnBonusDateChanged();
        partial void OnAmountChanging(long value);
        partial void OnAmountChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnPlanTypeChanging(string value);
        partial void OnPlanTypeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public BonusPlanDetail()
        {
            this._Dealer  = default(EntityRef<Dealer>);
            this._BonusPlanHeader  = default(EntityRef<BonusPlanHeader>);
            this._BonusSource  = default(EntityRef<BonusSource>);
            this._BonusTransactions = new EntitySet<BonusTransaction>(new Action<BonusTransaction>(this.attach_BonusTransactions), new Action<BonusTransaction>(this.detach_BonusTransactions));
            OnCreated();
        }

        [Column(Name = @"BONUS_PLAN_DETAIL_ID", Storage = "_BonusPlanDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long BonusPlanDetailId
        {
            get
            {
                return this._BonusPlanDetailId;
            }
            set
            {
                if (this._BonusPlanDetailId != value)
                {
                    this.OnBonusPlanDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._BonusPlanDetailId = value;
                    this.SendPropertyChanged("BonusPlanDetailId");
                    this.OnBonusPlanDetailIdChanged();
                }
            }
        }

        [Column(Name = @"BONUS_PLAN_HEADER_ID", Storage = "_BonusPlanHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long BonusPlanHeaderId
        {
            get
            {
                return this._BonusPlanHeaderId;
            }
            set
            {
                if (this._BonusPlanHeaderId != value)
                {
                    if (this._BonusPlanHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBonusPlanHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._BonusPlanHeaderId = value;
                    this.SendPropertyChanged("BonusPlanHeaderId");
                    this.OnBonusPlanHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"BONUS_SOURCE_ID", Storage = "_BonusSourceId", DbType = "NUMBER(10)")]
        public System.Nullable<long> BonusSourceId
        {
            get
            {
                return this._BonusSourceId;
            }
            set
            {
                if (this._BonusSourceId != value)
                {
                    if (this._BonusSource.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBonusSourceIdChanging(value);
                    this.SendPropertyChanging();
                    this._BonusSourceId = value;
                    this.SendPropertyChanged("BonusSourceId");
                    this.OnBonusSourceIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"BONUS_DATE", Storage = "_BonusDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> BonusDate
        {
            get
            {
                return this._BonusDate;
            }
            set
            {
                if (this._BonusDate != value)
                {
                    this.OnBonusDateChanging(value);
                    this.SendPropertyChanging();
                    this._BonusDate = value;
                    this.SendPropertyChanged("BonusDate");
                    this.OnBonusDateChanged();
                }
            }
        }

        [Column(Name = @"AMOUNT", Storage = "_Amount", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"USER_NAME", Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"PLAN_TYPE", Storage = "_PlanType", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string PlanType
        {
            get
            {
                return this._PlanType;
            }
            set
            {
                if (this._PlanType != value)
                {
                    this.OnPlanTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PlanType = value;
                    this.SendPropertyChanged("PlanType");
                    this.OnPlanTypeChanged();
                }
            }
        }

        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(1024)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Association(Name="Dealer_BonusPlanDetail", Storage="_Dealer", ThisKey="DealerCode", IsForeignKey=true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.BonusPlanDetails.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.BonusPlanDetails.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        [Association(Name="BonusPlanHeader_BonusPlanDetail", Storage="_BonusPlanHeader", ThisKey="BonusPlanHeaderId", IsForeignKey=true)]
        public BonusPlanHeader BonusPlanHeader
        {
            get
            {
                return this._BonusPlanHeader.Entity;
            }
            set
            {
                BonusPlanHeader previousValue = this._BonusPlanHeader.Entity;
                if ((previousValue != value) || (this._BonusPlanHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._BonusPlanHeader.Entity = null;
                        previousValue.BonusPlanDetails.Remove(this);
                    }
                    this._BonusPlanHeader.Entity = value;
                    if (value != null)
                    {
                        value.BonusPlanDetails.Add(this);
                        this._BonusPlanHeaderId = value.BonusPlanHeaderId;
                    }
                    else
                    {
                        this._BonusPlanHeaderId = default(long);
                    }
                    this.SendPropertyChanged("BonusPlanHeader");
                }
            }
        }

        [Association(Name="BonusSource_BonusPlanDetail", Storage="_BonusSource", ThisKey="BonusSourceId", IsForeignKey=true)]
        public BonusSource BonusSource
        {
            get
            {
                return this._BonusSource.Entity;
            }
            set
            {
                BonusSource previousValue = this._BonusSource.Entity;
                if ((previousValue != value) || (this._BonusSource.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._BonusSource.Entity = null;
                        previousValue.BonusPlanDetails.Remove(this);
                    }
                    this._BonusSource.Entity = value;
                    if (value != null)
                    {
                        value.BonusPlanDetails.Add(this);
                        this._BonusSourceId = value.BonusSourceId;
                    }
                    else
                    {
                        this._BonusSourceId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("BonusSource");
                }
            }
        }

        [Association(Name="BonusPlanDetail_BonusTransaction", Storage="_BonusTransactions", OtherKey="BonusPlanDetailId")]
        public EntitySet<BonusTransaction> BonusTransactions
        {
            get
            {
                return this._BonusTransactions;
            }
            set
            {
                this._BonusTransactions.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BonusTransactions(BonusTransaction entity)
        {
            this.SendPropertyChanging("BonusTransactions");
            entity.BonusPlanDetail = this;
        }
    
        private void detach_BonusTransactions(BonusTransaction entity)
        {
            this.SendPropertyChanging("BonusTransactions");
            entity.BonusPlanDetail = null;
        }
    }

    [Table(Name = @"VDMS.V2_DEALER_BONUS")]
    public partial class Bonus : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _DealerCode;

        private long _Amount;

        private System.Nullable<System.DateTime> _LockDate;

        private EntityRef<Dealer> _Dealer;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnAmountChanging(long value);
        partial void OnAmountChanged();
        partial void OnLockDateChanging(System.Nullable<System.DateTime> value);
        partial void OnLockDateChanged();
        #endregion

        public Bonus()
        {
            this._Dealer  = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL", IsPrimaryKey = true)]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"AMOUNT", Storage = "_Amount", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Column(Name = @"LOCK_DATE", Storage = "_LockDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> LockDate
        {
            get
            {
                return this._LockDate;
            }
            set
            {
                if (this._LockDate != value)
                {
                    this.OnLockDateChanging(value);
                    this.SendPropertyChanging();
                    this._LockDate = value;
                    this.SendPropertyChanged("LockDate");
                    this.OnLockDateChanged();
                }
            }
        }

        [Association(Name="Dealer_Bonus", Storage="_Dealer", ThisKey="DealerCode", IsForeignKey=true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.Bonus.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.Bonus.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_ORDERHEADER")]
    public partial class OrderHeader : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _OrderHeaderId;

        private System.DateTime _CreatedDate;

        private string _CreatedBy;

        private System.DateTime _LastEditedDate;

        private string _LastEditedBy;

        private string _OrderNumber;

        private System.DateTime _OrderDate;

        private decimal _OrderTimes;

        private System.DateTime _ShippingDate;

        private string _ShippingTo;

        private int _Status;

        private string _DealerCode;

        private System.Nullable<long> _SubTotal;

        private System.Nullable<long> _TaxAmt;

        private System.Nullable<long> _Freight;

        private string _DealerComment;

        private string _VMEPComment;

        private System.Nullable<long> _ReferenceOrderId;

        private string _AreaCode;

        private string _DatabaseCode;

        private System.Nullable<int> _DeliveredStatus;

        private string _SecondaryShippingTo;

        private string _SecondaryShippingCode;

        private System.Nullable<System.DateTime> _StatisticDate;

        private long _PaymentAmount;

        private long _BonusAmount;

        private string _BonusStatus;

        private string _FinComment;

        private string _FinVoucher;

        private EntitySet<BonusTransaction> _BonusTransactions;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnLastEditedDateChanging(System.DateTime value);
        partial void OnLastEditedDateChanged();
        partial void OnLastEditedByChanging(string value);
        partial void OnLastEditedByChanged();
        partial void OnOrderNumberChanging(string value);
        partial void OnOrderNumberChanged();
        partial void OnOrderDateChanging(System.DateTime value);
        partial void OnOrderDateChanged();
        partial void OnOrderTimesChanging(decimal value);
        partial void OnOrderTimesChanged();
        partial void OnShippingDateChanging(System.DateTime value);
        partial void OnShippingDateChanged();
        partial void OnShippingToChanging(string value);
        partial void OnShippingToChanged();
        partial void OnStatusChanging(int value);
        partial void OnStatusChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnSubTotalChanging(System.Nullable<long> value);
        partial void OnSubTotalChanged();
        partial void OnTaxAmtChanging(System.Nullable<long> value);
        partial void OnTaxAmtChanged();
        partial void OnFreightChanging(System.Nullable<long> value);
        partial void OnFreightChanged();
        partial void OnDealerCommentChanging(string value);
        partial void OnDealerCommentChanged();
        partial void OnVMEPCommentChanging(string value);
        partial void OnVMEPCommentChanged();
        partial void OnReferenceOrderIdChanging(System.Nullable<long> value);
        partial void OnReferenceOrderIdChanged();
        partial void OnAreaCodeChanging(string value);
        partial void OnAreaCodeChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnDeliveredStatusChanging(System.Nullable<int> value);
        partial void OnDeliveredStatusChanged();
        partial void OnSecondaryShippingToChanging(string value);
        partial void OnSecondaryShippingToChanged();
        partial void OnSecondaryShippingCodeChanging(string value);
        partial void OnSecondaryShippingCodeChanged();
        partial void OnStatisticDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStatisticDateChanged();
        partial void OnPaymentAmountChanging(long value);
        partial void OnPaymentAmountChanged();
        partial void OnBonusAmountChanging(long value);
        partial void OnBonusAmountChanged();
        partial void OnBonusStatusChanging(string value);
        partial void OnBonusStatusChanged();
        partial void OnFinCommentChanging(string value);
        partial void OnFinCommentChanged();
        partial void OnFinVoucherChanging(string value);
        partial void OnFinVoucherChanged();
        #endregion

        public OrderHeader()
        {
            this._BonusTransactions = new EntitySet<BonusTransaction>(new Action<BonusTransaction>(this.attach_BonusTransactions), new Action<BonusTransaction>(this.detach_BonusTransactions));
            OnCreated();
        }

        [Column(Name = @"ORDERID", Storage = "_OrderHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"CREATEDDATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"CREATEDBY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

        [Column(Name = @"LASTEDITEDDATE", Storage = "_LastEditedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime LastEditedDate
        {
            get
            {
                return this._LastEditedDate;
            }
            set
            {
                if (this._LastEditedDate != value)
                {
                    this.OnLastEditedDateChanging(value);
                    this.SendPropertyChanging();
                    this._LastEditedDate = value;
                    this.SendPropertyChanged("LastEditedDate");
                    this.OnLastEditedDateChanged();
                }
            }
        }

        [Column(Name = @"LASTEDITEDBY", Storage = "_LastEditedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string LastEditedBy
        {
            get
            {
                return this._LastEditedBy;
            }
            set
            {
                if (this._LastEditedBy != value)
                {
                    this.OnLastEditedByChanging(value);
                    this.SendPropertyChanging();
                    this._LastEditedBy = value;
                    this.SendPropertyChanged("LastEditedBy");
                    this.OnLastEditedByChanged();
                }
            }
        }

        [Column(Name = @"ORDERNUMBER", Storage = "_OrderNumber", DbType = "VARCHAR2(30)")]
        public string OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if (this._OrderNumber != value)
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [Column(Name = @"ORDERDATE", Storage = "_OrderDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

        [Column(Name = @"ORDERTIMES", Storage = "_OrderTimes", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public decimal OrderTimes
        {
            get
            {
                return this._OrderTimes;
            }
            set
            {
                if (this._OrderTimes != value)
                {
                    this.OnOrderTimesChanging(value);
                    this.SendPropertyChanging();
                    this._OrderTimes = value;
                    this.SendPropertyChanged("OrderTimes");
                    this.OnOrderTimesChanged();
                }
            }
        }

        [Column(Name = @"SHIPPINGDATE", Storage = "_ShippingDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ShippingDate
        {
            get
            {
                return this._ShippingDate;
            }
            set
            {
                if (this._ShippingDate != value)
                {
                    this.OnShippingDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingDate = value;
                    this.SendPropertyChanged("ShippingDate");
                    this.OnShippingDateChanged();
                }
            }
        }

        [Column(Name = @"SHIPPINGTO", Storage = "_ShippingTo", DbType = "NVARCHAR2(512)")]
        public string ShippingTo
        {
            get
            {
                return this._ShippingTo;
            }
            set
            {
                if (this._ShippingTo != value)
                {
                    this.OnShippingToChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingTo = value;
                    this.SendPropertyChanged("ShippingTo");
                    this.OnShippingToChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"SUBTOTAL", Storage = "_SubTotal", DbType = "NUMBER(18)")]
        public System.Nullable<long> SubTotal
        {
            get
            {
                return this._SubTotal;
            }
            set
            {
                if (this._SubTotal != value)
                {
                    this.OnSubTotalChanging(value);
                    this.SendPropertyChanging();
                    this._SubTotal = value;
                    this.SendPropertyChanged("SubTotal");
                    this.OnSubTotalChanged();
                }
            }
        }

        [Column(Name = @"TAXAMT", Storage = "_TaxAmt", DbType = "NUMBER(18)")]
        public System.Nullable<long> TaxAmt
        {
            get
            {
                return this._TaxAmt;
            }
            set
            {
                if (this._TaxAmt != value)
                {
                    this.OnTaxAmtChanging(value);
                    this.SendPropertyChanging();
                    this._TaxAmt = value;
                    this.SendPropertyChanged("TaxAmt");
                    this.OnTaxAmtChanged();
                }
            }
        }

        [Column(Name = @"FREIGHT", Storage = "_Freight", DbType = "NUMBER(18)")]
        public System.Nullable<long> Freight
        {
            get
            {
                return this._Freight;
            }
            set
            {
                if (this._Freight != value)
                {
                    this.OnFreightChanging(value);
                    this.SendPropertyChanging();
                    this._Freight = value;
                    this.SendPropertyChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }

        [Column(Name = @"DEALERCOMMENT", Storage = "_DealerComment", DbType = "NVARCHAR2(4000)")]
        public string DealerComment
        {
            get
            {
                return this._DealerComment;
            }
            set
            {
                if (this._DealerComment != value)
                {
                    this.OnDealerCommentChanging(value);
                    this.SendPropertyChanging();
                    this._DealerComment = value;
                    this.SendPropertyChanged("DealerComment");
                    this.OnDealerCommentChanged();
                }
            }
        }

        [Column(Name = @"VMEPCOMMENT", Storage = "_VMEPComment", DbType = "NVARCHAR2(4000)")]
        public string VMEPComment
        {
            get
            {
                return this._VMEPComment;
            }
            set
            {
                if (this._VMEPComment != value)
                {
                    this.OnVMEPCommentChanging(value);
                    this.SendPropertyChanging();
                    this._VMEPComment = value;
                    this.SendPropertyChanged("VMEPComment");
                    this.OnVMEPCommentChanged();
                }
            }
        }

        [Column(Name = @"REFERENCEORDERID", Storage = "_ReferenceOrderId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ReferenceOrderId
        {
            get
            {
                return this._ReferenceOrderId;
            }
            set
            {
                if (this._ReferenceOrderId != value)
                {
                    this.OnReferenceOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReferenceOrderId = value;
                    this.SendPropertyChanged("ReferenceOrderId");
                    this.OnReferenceOrderIdChanged();
                }
            }
        }

        [Column(Name = @"AREACODE", Storage = "_AreaCode", CanBeNull = false, DbType = "VARCHAR2(10) NOT NULL")]
        public string AreaCode
        {
            get
            {
                return this._AreaCode;
            }
            set
            {
                if (this._AreaCode != value)
                {
                    this.OnAreaCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AreaCode = value;
                    this.SendPropertyChanged("AreaCode");
                    this.OnAreaCodeChanged();
                }
            }
        }

        [Column(Name = @"DATABASECODE", Storage = "_DatabaseCode", DbType = "VARCHAR2(10)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Name = @"DELIVEREDSTATUS", Storage = "_DeliveredStatus", DbType = "NUMBER(2)")]
        public System.Nullable<int> DeliveredStatus
        {
            get
            {
                return this._DeliveredStatus;
            }
            set
            {
                if (this._DeliveredStatus != value)
                {
                    this.OnDeliveredStatusChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveredStatus = value;
                    this.SendPropertyChanged("DeliveredStatus");
                    this.OnDeliveredStatusChanged();
                }
            }
        }

        [Column(Name = @"SECONDARYSHIPPINGTO", Storage = "_SecondaryShippingTo", DbType = "VARCHAR2(512)")]
        public string SecondaryShippingTo
        {
            get
            {
                return this._SecondaryShippingTo;
            }
            set
            {
                if (this._SecondaryShippingTo != value)
                {
                    this.OnSecondaryShippingToChanging(value);
                    this.SendPropertyChanging();
                    this._SecondaryShippingTo = value;
                    this.SendPropertyChanged("SecondaryShippingTo");
                    this.OnSecondaryShippingToChanged();
                }
            }
        }

        [Column(Name = @"SECONDARYSHIPPINGCODE", Storage = "_SecondaryShippingCode", DbType = "VARCHAR2(128)")]
        public string SecondaryShippingCode
        {
            get
            {
                return this._SecondaryShippingCode;
            }
            set
            {
                if (this._SecondaryShippingCode != value)
                {
                    this.OnSecondaryShippingCodeChanging(value);
                    this.SendPropertyChanging();
                    this._SecondaryShippingCode = value;
                    this.SendPropertyChanged("SecondaryShippingCode");
                    this.OnSecondaryShippingCodeChanged();
                }
            }
        }

        [Column(Name = @"STATISTICDATE", Storage = "_StatisticDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> StatisticDate
        {
            get
            {
                return this._StatisticDate;
            }
            set
            {
                if (this._StatisticDate != value)
                {
                    this.OnStatisticDateChanging(value);
                    this.SendPropertyChanging();
                    this._StatisticDate = value;
                    this.SendPropertyChanged("StatisticDate");
                    this.OnStatisticDateChanged();
                }
            }
        }

        [Column(Name = @"PAYMENTAMOUNT", Storage = "_PaymentAmount", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long PaymentAmount
        {
            get
            {
                return this._PaymentAmount;
            }
            set
            {
                if (this._PaymentAmount != value)
                {
                    this.OnPaymentAmountChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentAmount = value;
                    this.SendPropertyChanged("PaymentAmount");
                    this.OnPaymentAmountChanged();
                }
            }
        }

        [Column(Storage = "_BonusAmount", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long BonusAmount
        {
            get
            {
                return this._BonusAmount;
            }
            set
            {
                if (this._BonusAmount != value)
                {
                    this.OnBonusAmountChanging(value);
                    this.SendPropertyChanging();
                    this._BonusAmount = value;
                    this.SendPropertyChanged("BonusAmount");
                    this.OnBonusAmountChanged();
                }
            }
        }

        [Column(Name = @"BONUSSTATUS", Storage = "_BonusStatus", DbType = "CHAR(1)")]
        public string BonusStatus
        {
            get
            {
                return this._BonusStatus;
            }
            set
            {
                if (this._BonusStatus != value)
                {
                    this.OnBonusStatusChanging(value);
                    this.SendPropertyChanging();
                    this._BonusStatus = value;
                    this.SendPropertyChanged("BonusStatus");
                    this.OnBonusStatusChanged();
                }
            }
        }

        [Column(Name = @"FIN_COMMENT", Storage = "_FinComment", DbType = "NVARCHAR2(1024)")]
        public string FinComment
        {
            get
            {
                return this._FinComment;
            }
            set
            {
                if (this._FinComment != value)
                {
                    this.OnFinCommentChanging(value);
                    this.SendPropertyChanging();
                    this._FinComment = value;
                    this.SendPropertyChanged("FinComment");
                    this.OnFinCommentChanged();
                }
            }
        }

        [Column(Name = @"FIN_VOUCHER", Storage = "_FinVoucher", DbType = "VARCHAR2(30)")]
        public string FinVoucher
        {
            get
            {
                return this._FinVoucher;
            }
            set
            {
                if (this._FinVoucher != value)
                {
                    this.OnFinVoucherChanging(value);
                    this.SendPropertyChanging();
                    this._FinVoucher = value;
                    this.SendPropertyChanged("FinVoucher");
                    this.OnFinVoucherChanged();
                }
            }
        }

        [Association(Name="OrderHeader_BonusTransaction", Storage="_BonusTransactions", OtherKey="OrderId")]
        public EntitySet<BonusTransaction> BonusTransactions
        {
            get
            {
                return this._BonusTransactions;
            }
            set
            {
                this._BonusTransactions.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_BonusTransactions(BonusTransaction entity)
        {
            this.SendPropertyChanging("BonusTransactions");
            entity.OrderHeader = this;
        }
    
        private void detach_BonusTransactions(BonusTransaction entity)
        {
            this.SendPropertyChanging("BonusTransactions");
            entity.OrderHeader = null;
        }
    }

    [Table(Name = @"VDMS.V2_DEALER_BONUS_TRANSACTION")]
    public partial class BonusTransaction : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TransactionId;

        private System.Nullable<long> _BonusPlanDetailId;

        private System.Nullable<long> _OrderId;

        private string _DealerCode;

        private decimal _Amount;

        private System.DateTime _TransactionDate;

        private System.DateTime _CreatedDate;

        private string _UserName;

        private System.Nullable<long> _BonusSourceId;

        private string _TransactionType;

        private string _Status;

        private string _Description;

        private EntityRef<BonusSource> _BonusSource;

        private EntityRef<BonusPlanDetail> _BonusPlanDetail;

        private EntityRef<Dealer> _Dealer;

        private EntityRef<OrderHeader> _OrderHeader;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTransactionIdChanging(long value);
        partial void OnTransactionIdChanged();
        partial void OnBonusPlanDetailIdChanging(System.Nullable<long> value);
        partial void OnBonusPlanDetailIdChanged();
        partial void OnOrderIdChanging(System.Nullable<long> value);
        partial void OnOrderIdChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnTransactionDateChanging(System.DateTime value);
        partial void OnTransactionDateChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnBonusSourceIdChanging(System.Nullable<long> value);
        partial void OnBonusSourceIdChanged();
        partial void OnTransactionTypeChanging(string value);
        partial void OnTransactionTypeChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public BonusTransaction()
        {
            this._BonusSource  = default(EntityRef<BonusSource>);
            this._BonusPlanDetail  = default(EntityRef<BonusPlanDetail>);
            this._Dealer  = default(EntityRef<Dealer>);
            this._OrderHeader  = default(EntityRef<OrderHeader>);
            OnCreated();
        }

        [Column(Name = @"TRANSACTION_ID", Storage = "_TransactionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

        [Column(Name = @"BONUS_PLAN_DETAIL_ID", Storage = "_BonusPlanDetailId", DbType = "NUMBER(10)")]
        public System.Nullable<long> BonusPlanDetailId
        {
            get
            {
                return this._BonusPlanDetailId;
            }
            set
            {
                if (this._BonusPlanDetailId != value)
                {
                    if (this._BonusPlanDetail.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBonusPlanDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._BonusPlanDetailId = value;
                    this.SendPropertyChanged("BonusPlanDetailId");
                    this.OnBonusPlanDetailIdChanged();
                }
            }
        }

        [Column(Name = @"ORDER_ID", Storage = "_OrderId", DbType = "NUMBER(10)")]
        public System.Nullable<long> OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    if (this._OrderHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    if (this._Dealer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"AMOUNT", Storage = "_Amount", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Column(Name = @"TRANSACTION_DATE", Storage = "_TransactionDate", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"USER_NAME", Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

        [Column(Name = @"BONUS_SOURCE_ID", Storage = "_BonusSourceId", DbType = "NUMBER(10)")]
        public System.Nullable<long> BonusSourceId
        {
            get
            {
                return this._BonusSourceId;
            }
            set
            {
                if (this._BonusSourceId != value)
                {
                    if (this._BonusSource.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBonusSourceIdChanging(value);
                    this.SendPropertyChanging();
                    this._BonusSourceId = value;
                    this.SendPropertyChanged("BonusSourceId");
                    this.OnBonusSourceIdChanged();
                }
            }
        }

        [Column(Name = @"TRANSACTION_TYPE", Storage = "_TransactionType", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string TransactionType
        {
            get
            {
                return this._TransactionType;
            }
            set
            {
                if (this._TransactionType != value)
                {
                    this.OnTransactionTypeChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionType = value;
                    this.SendPropertyChanged("TransactionType");
                    this.OnTransactionTypeChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", DbType = "CHAR(2)")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"DESCRIPTION", Storage = "_Description", DbType = "NVARCHAR2(1024)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Association(Name="BonusSource_BonusTransaction", Storage="_BonusSource", ThisKey="BonusSourceId", IsForeignKey=true)]
        public BonusSource BonusSource
        {
            get
            {
                return this._BonusSource.Entity;
            }
            set
            {
                BonusSource previousValue = this._BonusSource.Entity;
                if ((previousValue != value) || (this._BonusSource.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._BonusSource.Entity = null;
                        previousValue.BonusTransactions.Remove(this);
                    }
                    this._BonusSource.Entity = value;
                    if (value != null)
                    {
                        value.BonusTransactions.Add(this);
                        this._BonusSourceId = value.BonusSourceId;
                    }
                    else
                    {
                        this._BonusSourceId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("BonusSource");
                }
            }
        }

        [Association(Name="BonusPlanDetail_BonusTransaction", Storage="_BonusPlanDetail", ThisKey="BonusPlanDetailId", IsForeignKey=true)]
        public BonusPlanDetail BonusPlanDetail
        {
            get
            {
                return this._BonusPlanDetail.Entity;
            }
            set
            {
                BonusPlanDetail previousValue = this._BonusPlanDetail.Entity;
                if ((previousValue != value) || (this._BonusPlanDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._BonusPlanDetail.Entity = null;
                        previousValue.BonusTransactions.Remove(this);
                    }
                    this._BonusPlanDetail.Entity = value;
                    if (value != null)
                    {
                        value.BonusTransactions.Add(this);
                        this._BonusPlanDetailId = value.BonusPlanDetailId;
                    }
                    else
                    {
                        this._BonusPlanDetailId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("BonusPlanDetail");
                }
            }
        }

        [Association(Name="Dealer_BonusTransaction", Storage="_Dealer", ThisKey="DealerCode", IsForeignKey=true)]
        public Dealer Dealer
        {
            get
            {
                return this._Dealer.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer.Entity;
                if ((previousValue != value) || (this._Dealer.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer.Entity = null;
                        previousValue.BonusTransactions.Remove(this);
                    }
                    this._Dealer.Entity = value;
                    if (value != null)
                    {
                        value.BonusTransactions.Add(this);
                        this._DealerCode = value.DealerCode;
                    }
                    else
                    {
                        this._DealerCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer");
                }
            }
        }

        [Association(Name="OrderHeader_BonusTransaction", Storage="_OrderHeader", ThisKey="OrderId", IsForeignKey=true)]
        public OrderHeader OrderHeader
        {
            get
            {
                return this._OrderHeader.Entity;
            }
            set
            {
                OrderHeader previousValue = this._OrderHeader.Entity;
                if ((previousValue != value) || (this._OrderHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._OrderHeader.Entity = null;
                        previousValue.BonusTransactions.Remove(this);
                    }
                    this._OrderHeader.Entity = value;
                    if (value != null)
                    {
                        value.BonusTransactions.Add(this);
                        this._OrderId = value.OrderHeaderId;
                    }
                    else
                    {
                        this._OrderId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("OrderHeader");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
