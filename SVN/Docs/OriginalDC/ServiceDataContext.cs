//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 7/25/2009 12:30:48 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace VDMS.I.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name = "VDMS")] 
	[ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))] 
	public partial class ServiceDataContext : Devart.Data.Linq.DataContext
	{
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertExchangePartDetail(VDMS.I.Entity.ExchangePartDetail instance);
		partial void UpdateExchangePartDetail(VDMS.I.Entity.ExchangePartDetail instance);
		partial void DeleteExchangePartDetail(VDMS.I.Entity.ExchangePartDetail instance);
		partial void InsertExchangePartHeader(VDMS.I.Entity.ExchangePartHeader instance);
		partial void UpdateExchangePartHeader(VDMS.I.Entity.ExchangePartHeader instance);
		partial void DeleteExchangePartHeader(VDMS.I.Entity.ExchangePartHeader instance);
		partial void InsertExchangeVoucherHeader(VDMS.I.Entity.ExchangeVoucherHeader instance);
		partial void UpdateExchangeVoucherHeader(VDMS.I.Entity.ExchangeVoucherHeader instance);
		partial void DeleteExchangeVoucherHeader(VDMS.I.Entity.ExchangeVoucherHeader instance);
		partial void InsertServiceDetail(VDMS.I.Entity.ServiceDetail instance);
		partial void UpdateServiceDetail(VDMS.I.Entity.ServiceDetail instance);
		partial void DeleteServiceDetail(VDMS.I.Entity.ServiceDetail instance);
		partial void InsertServiceHeader(VDMS.I.Entity.ServiceHeader instance);
		partial void UpdateServiceHeader(VDMS.I.Entity.ServiceHeader instance);
		partial void DeleteServiceHeader(VDMS.I.Entity.ServiceHeader instance);
		partial void InsertWarrantyInfo(VDMS.I.Entity.WarrantyInfo instance);
		partial void UpdateWarrantyInfo(VDMS.I.Entity.WarrantyInfo instance);
		partial void DeleteWarrantyInfo(VDMS.I.Entity.WarrantyInfo instance);
		partial void InsertCustomer(VDMS.I.Entity.Customer instance);
		partial void UpdateCustomer(VDMS.I.Entity.Customer instance);
		partial void DeleteCustomer(VDMS.I.Entity.Customer instance);
		partial void InsertBroken(VDMS.I.Entity.Broken instance);
		partial void UpdateBroken(VDMS.I.Entity.Broken instance);
		partial void DeleteBroken(VDMS.I.Entity.Broken instance);
		partial void InsertWarrantyCondition(VDMS.I.Entity.WarrantyCondition instance);
		partial void UpdateWarrantyCondition(VDMS.I.Entity.WarrantyCondition instance);
		partial void DeleteWarrantyCondition(VDMS.I.Entity.WarrantyCondition instance);
		partial void InsertInvoice(VDMS.I.Entity.Invoice instance);
		partial void UpdateInvoice(VDMS.I.Entity.Invoice instance);
		partial void DeleteInvoice(VDMS.I.Entity.Invoice instance);
		partial void InsertDataIteminstance(VDMS.I.Entity.DataIteminstance instance);
		partial void UpdateDataIteminstance(VDMS.I.Entity.DataIteminstance instance);
		partial void DeleteDataIteminstance(VDMS.I.Entity.DataIteminstance instance);
		partial void InsertSaleSellitem(VDMS.I.Entity.SaleSellitem instance);
		partial void UpdateSaleSellitem(VDMS.I.Entity.SaleSellitem instance);
		partial void DeleteSaleSellitem(VDMS.I.Entity.SaleSellitem instance);
		partial void InsertDataItem(VDMS.I.Entity.DataItem instance);
		partial void UpdateDataItem(VDMS.I.Entity.DataItem instance);
		partial void DeleteDataItem(VDMS.I.Entity.DataItem instance);
		#endregion

		public ServiceDataContext() :
				base(@"User Id=vdms;Password=vdms;Server=vdms;Home=orahome92;Unicode=True;Persist Security Info=True", mappingSource)
		{
			OnCreated();
		}

		public ServiceDataContext(string connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public ServiceDataContext(System.Data.IDbConnection connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public ServiceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public ServiceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.ExchangePartDetail> ExchangePartDetails
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.ExchangePartDetail>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.ExchangePartHeader> ExchangePartHeaders
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.ExchangePartHeader>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.ExchangeVoucherHeader> ExchangeVoucherHeaders
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.ExchangeVoucherHeader>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.ServiceDetail> ServiceDetails
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.ServiceDetail>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.ServiceHeader> ServiceHeaders
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.ServiceHeader>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.WarrantyInfo> WarrantyInfos
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.WarrantyInfo>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.Customer> Customers
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.Customer>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.Broken> Brokens
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.Broken>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.WarrantyCondition> WarrantyConditions
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.WarrantyCondition>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.Invoice> Invoices
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.Invoice>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.DataIteminstance> DataIteminstances
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.DataIteminstance>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.SaleSellitem> SaleSellitems
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.SaleSellitem>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.I.Entity.DataItem> DataItems
		{
			get
			{
				return this.GetTable<VDMS.I.Entity.DataItem>();
			}
		}
	}
	}

namespace VDMS.I.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;

	[Table(Name = @"VDMS.SER_EXCHANGEPARTDETAIL")]
	public partial class ExchangePartDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _ExchangePartDetailId;

		private string _PartCodeO;

		private string _PartCodeM;

		private long _BrokenId;

		private long _ExchangePartHeaderId;

		private string _SerialNumber;

		private decimal _UnitPriceM;

		private decimal _TotalFeeO;

		private decimal _TotalFeeM;

		private decimal _UnitPriceO;

		private int _PartQtyO;

		private int _PartQtyM;

		private string _VMEPComment;

		private EntityRef<ExchangePartHeader> _ExchangePartHeader;

		private EntityRef<Broken> _Broken;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnExchangePartDetailIdChanging(long value);
		partial void OnExchangePartDetailIdChanged();
		partial void OnPartCodeOChanging(string value);
		partial void OnPartCodeOChanged();
		partial void OnPartCodeMChanging(string value);
		partial void OnPartCodeMChanged();
		partial void OnBrokenIdChanging(long value);
		partial void OnBrokenIdChanged();
		partial void OnExchangePartHeaderIdChanging(long value);
		partial void OnExchangePartHeaderIdChanged();
		partial void OnSerialNumberChanging(string value);
		partial void OnSerialNumberChanged();
		partial void OnUnitPriceMChanging(decimal value);
		partial void OnUnitPriceMChanged();
		partial void OnTotalFeeOChanging(decimal value);
		partial void OnTotalFeeOChanged();
		partial void OnTotalFeeMChanging(decimal value);
		partial void OnTotalFeeMChanged();
		partial void OnUnitPriceOChanging(decimal value);
		partial void OnUnitPriceOChanged();
		partial void OnPartQtyOChanging(int value);
		partial void OnPartQtyOChanged();
		partial void OnPartQtyMChanging(int value);
		partial void OnPartQtyMChanged();
		partial void OnVMEPCommentChanging(string value);
		partial void OnVMEPCommentChanged();
		#endregion

		public ExchangePartDetail()
		{
			this._ExchangePartHeader = default(EntityRef<ExchangePartHeader>);
			this._Broken = default(EntityRef<Broken>);
			OnCreated();
		}

		[Column(Name = @"EXCHANGEPARTDETAILID", Storage = "_ExchangePartDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long ExchangePartDetailId
		{
			get
			{
				return this._ExchangePartDetailId;
			}
			set
			{
				if (this._ExchangePartDetailId != value)
				{
					this.OnExchangePartDetailIdChanging(value);
					this.SendPropertyChanging();
					this._ExchangePartDetailId = value;
					this.SendPropertyChanged("ExchangePartDetailId");
					this.OnExchangePartDetailIdChanged();
				}
			}
		}

		[Column(Name = @"PARTCODEO", Storage = "_PartCodeO", CanBeNull = false, DbType = "VARCHAR2(35) NOT NULL")]
		public string PartCodeO
		{
			get
			{
				return this._PartCodeO;
			}
			set
			{
				if (this._PartCodeO != value)
				{
					this.OnPartCodeOChanging(value);
					this.SendPropertyChanging();
					this._PartCodeO = value;
					this.SendPropertyChanged("PartCodeO");
					this.OnPartCodeOChanged();
				}
			}
		}

		[Column(Name = @"PARTCODEM", Storage = "_PartCodeM", CanBeNull = false, DbType = "VARCHAR2(35) NOT NULL")]
		public string PartCodeM
		{
			get
			{
				return this._PartCodeM;
			}
			set
			{
				if (this._PartCodeM != value)
				{
					this.OnPartCodeMChanging(value);
					this.SendPropertyChanging();
					this._PartCodeM = value;
					this.SendPropertyChanged("PartCodeM");
					this.OnPartCodeMChanged();
				}
			}
		}

		[Column(Name = @"BROKENID", Storage = "_BrokenId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long BrokenId
		{
			get
			{
				return this._BrokenId;
			}
			set
			{
				if (this._BrokenId != value)
				{
					if (this._Broken.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrokenIdChanging(value);
					this.SendPropertyChanging();
					this._BrokenId = value;
					this.SendPropertyChanged("BrokenId");
					this.OnBrokenIdChanged();
				}
			}
		}

		[Column(Name = @"EXCHANGEPARTHEADERID", Storage = "_ExchangePartHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long ExchangePartHeaderId
		{
			get
			{
				return this._ExchangePartHeaderId;
			}
			set
			{
				if (this._ExchangePartHeaderId != value)
				{
					if (this._ExchangePartHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExchangePartHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._ExchangePartHeaderId = value;
					this.SendPropertyChanged("ExchangePartHeaderId");
					this.OnExchangePartHeaderIdChanged();
				}
			}
		}

		[Column(Name = @"SERIALNUMBER", Storage = "_SerialNumber", DbType = "VARCHAR2(30)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if (this._SerialNumber != value)
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}

		[Column(Name = @"UNITPRICEM", Storage = "_UnitPriceM", CanBeNull = false, DbType = "NUMBER(20) NOT NULL")]
		public decimal UnitPriceM
		{
			get
			{
				return this._UnitPriceM;
			}
			set
			{
				if (this._UnitPriceM != value)
				{
					this.OnUnitPriceMChanging(value);
					this.SendPropertyChanging();
					this._UnitPriceM = value;
					this.SendPropertyChanged("UnitPriceM");
					this.OnUnitPriceMChanged();
				}
			}
		}

		[Column(Name = @"TOTALFEEO", Storage = "_TotalFeeO", CanBeNull = false, DbType = "NUMBER(20) NOT NULL")]
		public decimal TotalFeeO
		{
			get
			{
				return this._TotalFeeO;
			}
			set
			{
				if (this._TotalFeeO != value)
				{
					this.OnTotalFeeOChanging(value);
					this.SendPropertyChanging();
					this._TotalFeeO = value;
					this.SendPropertyChanged("TotalFeeO");
					this.OnTotalFeeOChanged();
				}
			}
		}

		[Column(Name = @"TOTALFEEM", Storage = "_TotalFeeM", CanBeNull = false, DbType = "NUMBER(20) NOT NULL")]
		public decimal TotalFeeM
		{
			get
			{
				return this._TotalFeeM;
			}
			set
			{
				if (this._TotalFeeM != value)
				{
					this.OnTotalFeeMChanging(value);
					this.SendPropertyChanging();
					this._TotalFeeM = value;
					this.SendPropertyChanged("TotalFeeM");
					this.OnTotalFeeMChanged();
				}
			}
		}

		[Column(Name = @"UNITPRICEO", Storage = "_UnitPriceO", CanBeNull = false, DbType = "NUMBER(20) NOT NULL")]
		public decimal UnitPriceO
		{
			get
			{
				return this._UnitPriceO;
			}
			set
			{
				if (this._UnitPriceO != value)
				{
					this.OnUnitPriceOChanging(value);
					this.SendPropertyChanging();
					this._UnitPriceO = value;
					this.SendPropertyChanged("UnitPriceO");
					this.OnUnitPriceOChanged();
				}
			}
		}

		[Column(Name = @"PARTQTYO", Storage = "_PartQtyO", CanBeNull = false, DbType = "NUMBER(5) NOT NULL")]
		public int PartQtyO
		{
			get
			{
				return this._PartQtyO;
			}
			set
			{
				if (this._PartQtyO != value)
				{
					this.OnPartQtyOChanging(value);
					this.SendPropertyChanging();
					this._PartQtyO = value;
					this.SendPropertyChanged("PartQtyO");
					this.OnPartQtyOChanged();
				}
			}
		}

		[Column(Name = @"PARTQTYM", Storage = "_PartQtyM", CanBeNull = false, DbType = "NUMBER(5) NOT NULL")]
		public int PartQtyM
		{
			get
			{
				return this._PartQtyM;
			}
			set
			{
				if (this._PartQtyM != value)
				{
					this.OnPartQtyMChanging(value);
					this.SendPropertyChanging();
					this._PartQtyM = value;
					this.SendPropertyChanged("PartQtyM");
					this.OnPartQtyMChanged();
				}
			}
		}

		[Column(Name = @"VMEPCOMMENT", Storage = "_VMEPComment", DbType = "NVARCHAR2(2048)")]
		public string VMEPComment
		{
			get
			{
				return this._VMEPComment;
			}
			set
			{
				if (this._VMEPComment != value)
				{
					this.OnVMEPCommentChanging(value);
					this.SendPropertyChanging();
					this._VMEPComment = value;
					this.SendPropertyChanged("VMEPComment");
					this.OnVMEPCommentChanged();
				}
			}
		}

		[Association(Name="ExchangePartHeader_ExchangePartDetail", Storage="_ExchangePartHeader", ThisKey="ExchangePartHeaderId", IsForeignKey=true)]
		public ExchangePartHeader ExchangePartHeader
		{
			get
			{
				return this._ExchangePartHeader.Entity;
			}
			set
			{
				ExchangePartHeader previousValue = this._ExchangePartHeader.Entity;
				if (((previousValue != value) 
							|| (this._ExchangePartHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExchangePartHeader.Entity = null;
						previousValue.ExchangePartDetails.Remove(this);
					}
					this._ExchangePartHeader.Entity = value;
					if ((value != null))
					{
						value.ExchangePartDetails.Add(this);
						this._ExchangePartHeaderId = value.ExchangePartHeaderId;
					}
					else
					{
						this._ExchangePartHeaderId = default(long); 
					}
					this.SendPropertyChanged("ExchangePartHeader");
				}
			}
		}

		[Association(Name="Broken_ExchangePartDetail", Storage="_Broken", ThisKey="BrokenId", IsForeignKey=true)]
		public Broken Broken
		{
			get
			{
				return this._Broken.Entity;
			}
			set
			{
				Broken previousValue = this._Broken.Entity;
				if (((previousValue != value) 
							|| (this._Broken.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Broken.Entity = null;
						previousValue.ExchangePartDetails.Remove(this);
					}
					this._Broken.Entity = value;
					if ((value != null))
					{
						value.ExchangePartDetails.Add(this);
						this._BrokenId = value.BrokenId;
					}
					else
					{
						this._BrokenId = default(long); 
					}
					this.SendPropertyChanged("Broken");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.SER_EXCHANGEPARTHEADER")]
	public partial class ExchangePartHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _ExchangePartHeaderId;

		private string _EngineNumber;

		private System.DateTime _DamagedDate;

		private double _KmCount;

		private System.DateTime _ExchangedDate;

		private string _DealerCode;

		private string _AreaCode;

		private decimal _FeeAmount;

		private int _Status;

		private int _Road;

		private int _Weather;

		private int _Speed;

		private int _Usage;

		private string _Engine;

		private string _Frame;

		private string _Electric;

		private string _Damaged;

		private string _Reason;

		private long _ServiceHeaderId;

		private long _CustomerId;

		private string _Comments;

		private string _VoucherNumber;

		private string _FrameNumber;

		private System.DateTime _PurchaseDate;

		private System.Nullable<System.DateTime> _ExportDate;

		private string _Model;

		private string _FinalVoucherNumber;

		private decimal _ProposeFeeAmount;

		private System.Nullable<System.DateTime> _LastProcessedDate;

		private EntitySet<ExchangePartDetail> _ExchangePartDetails;

		private EntityRef<ServiceHeader> _ServiceHeader;

		private EntityRef<Customer> _Customer;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnExchangePartHeaderIdChanging(long value);
		partial void OnExchangePartHeaderIdChanged();
		partial void OnEngineNumberChanging(string value);
		partial void OnEngineNumberChanged();
		partial void OnDamagedDateChanging(System.DateTime value);
		partial void OnDamagedDateChanged();
		partial void OnKmCountChanging(double value);
		partial void OnKmCountChanged();
		partial void OnExchangedDateChanging(System.DateTime value);
		partial void OnExchangedDateChanged();
		partial void OnDealerCodeChanging(string value);
		partial void OnDealerCodeChanged();
		partial void OnAreaCodeChanging(string value);
		partial void OnAreaCodeChanged();
		partial void OnFeeAmountChanging(decimal value);
		partial void OnFeeAmountChanged();
		partial void OnStatusChanging(int value);
		partial void OnStatusChanged();
		partial void OnRoadChanging(int value);
		partial void OnRoadChanged();
		partial void OnWeatherChanging(int value);
		partial void OnWeatherChanged();
		partial void OnSpeedChanging(int value);
		partial void OnSpeedChanged();
		partial void OnUsageChanging(int value);
		partial void OnUsageChanged();
		partial void OnEngineChanging(string value);
		partial void OnEngineChanged();
		partial void OnFrameChanging(string value);
		partial void OnFrameChanged();
		partial void OnElectricChanging(string value);
		partial void OnElectricChanged();
		partial void OnDamagedChanging(string value);
		partial void OnDamagedChanged();
		partial void OnReasonChanging(string value);
		partial void OnReasonChanged();
		partial void OnServiceHeaderIdChanging(long value);
		partial void OnServiceHeaderIdChanged();
		partial void OnCustomerIdChanging(long value);
		partial void OnCustomerIdChanged();
		partial void OnCommentsChanging(string value);
		partial void OnCommentsChanged();
		partial void OnVoucherNumberChanging(string value);
		partial void OnVoucherNumberChanged();
		partial void OnFrameNumberChanging(string value);
		partial void OnFrameNumberChanged();
		partial void OnPurchaseDateChanging(System.DateTime value);
		partial void OnPurchaseDateChanged();
		partial void OnExportDateChanging(System.Nullable<System.DateTime> value);
		partial void OnExportDateChanged();
		partial void OnModelChanging(string value);
		partial void OnModelChanged();
		partial void OnFinalVoucherNumberChanging(string value);
		partial void OnFinalVoucherNumberChanged();
		partial void OnProposeFeeAmountChanging(decimal value);
		partial void OnProposeFeeAmountChanged();
		partial void OnLastProcessedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnLastProcessedDateChanged();
		#endregion

		public ExchangePartHeader()
		{
			this._ExchangePartDetails = new EntitySet<ExchangePartDetail>(new Action<ExchangePartDetail>(this.attach_ExchangePartDetails), new Action<ExchangePartDetail>(this.detach_ExchangePartDetails));
			this._ServiceHeader = default(EntityRef<ServiceHeader>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}

		[Column(Name = @"EXCHANGEPARTHEADERID", Storage = "_ExchangePartHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long ExchangePartHeaderId
		{
			get
			{
				return this._ExchangePartHeaderId;
			}
			set
			{
				if (this._ExchangePartHeaderId != value)
				{
					this.OnExchangePartHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._ExchangePartHeaderId = value;
					this.SendPropertyChanged("ExchangePartHeaderId");
					this.OnExchangePartHeaderIdChanged();
				}
			}
		}

		[Column(Name = @"ENGINENUMBER", Storage = "_EngineNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string EngineNumber
		{
			get
			{
				return this._EngineNumber;
			}
			set
			{
				if (this._EngineNumber != value)
				{
					this.OnEngineNumberChanging(value);
					this.SendPropertyChanging();
					this._EngineNumber = value;
					this.SendPropertyChanged("EngineNumber");
					this.OnEngineNumberChanged();
				}
			}
		}

		[Column(Name = @"DAMAGEDDATE", Storage = "_DamagedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime DamagedDate
		{
			get
			{
				return this._DamagedDate;
			}
			set
			{
				if (this._DamagedDate != value)
				{
					this.OnDamagedDateChanging(value);
					this.SendPropertyChanging();
					this._DamagedDate = value;
					this.SendPropertyChanged("DamagedDate");
					this.OnDamagedDateChanged();
				}
			}
		}

		[Column(Name = @"KMCOUNT", Storage = "_KmCount", CanBeNull = false, DbType = "NUMBER(15) NOT NULL")]
		public double KmCount
		{
			get
			{
				return this._KmCount;
			}
			set
			{
				if (this._KmCount != value)
				{
					this.OnKmCountChanging(value);
					this.SendPropertyChanging();
					this._KmCount = value;
					this.SendPropertyChanged("KmCount");
					this.OnKmCountChanged();
				}
			}
		}

		[Column(Name = @"EXCHANGEDDATE", Storage = "_ExchangedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime ExchangedDate
		{
			get
			{
				return this._ExchangedDate;
			}
			set
			{
				if (this._ExchangedDate != value)
				{
					this.OnExchangedDateChanging(value);
					this.SendPropertyChanging();
					this._ExchangedDate = value;
					this.SendPropertyChanged("ExchangedDate");
					this.OnExchangedDateChanged();
				}
			}
		}

		[Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string DealerCode
		{
			get
			{
				return this._DealerCode;
			}
			set
			{
				if (this._DealerCode != value)
				{
					this.OnDealerCodeChanging(value);
					this.SendPropertyChanging();
					this._DealerCode = value;
					this.SendPropertyChanged("DealerCode");
					this.OnDealerCodeChanged();
				}
			}
		}

		[Column(Name = @"AREACODE", Storage = "_AreaCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if (this._AreaCode != value)
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}

		[Column(Name = @"FEEAMOUNT", Storage = "_FeeAmount", CanBeNull = false, DbType = "NUMBER(30) NOT NULL")]
		public decimal FeeAmount
		{
			get
			{
				return this._FeeAmount;
			}
			set
			{
				if (this._FeeAmount != value)
				{
					this.OnFeeAmountChanging(value);
					this.SendPropertyChanging();
					this._FeeAmount = value;
					this.SendPropertyChanged("FeeAmount");
					this.OnFeeAmountChanged();
				}
			}
		}

		[Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if (this._Status != value)
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}

		[Column(Name = @"ROAD", Storage = "_Road", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
		public int Road
		{
			get
			{
				return this._Road;
			}
			set
			{
				if (this._Road != value)
				{
					this.OnRoadChanging(value);
					this.SendPropertyChanging();
					this._Road = value;
					this.SendPropertyChanged("Road");
					this.OnRoadChanged();
				}
			}
		}

		[Column(Name = @"WEATHER", Storage = "_Weather", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
		public int Weather
		{
			get
			{
				return this._Weather;
			}
			set
			{
				if (this._Weather != value)
				{
					this.OnWeatherChanging(value);
					this.SendPropertyChanging();
					this._Weather = value;
					this.SendPropertyChanged("Weather");
					this.OnWeatherChanged();
				}
			}
		}

		[Column(Name = @"SPEED", Storage = "_Speed", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
		public int Speed
		{
			get
			{
				return this._Speed;
			}
			set
			{
				if (this._Speed != value)
				{
					this.OnSpeedChanging(value);
					this.SendPropertyChanging();
					this._Speed = value;
					this.SendPropertyChanged("Speed");
					this.OnSpeedChanged();
				}
			}
		}

		[Column(Name = @"USAGE", Storage = "_Usage", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
		public int Usage
		{
			get
			{
				return this._Usage;
			}
			set
			{
				if (this._Usage != value)
				{
					this.OnUsageChanging(value);
					this.SendPropertyChanging();
					this._Usage = value;
					this.SendPropertyChanged("Usage");
					this.OnUsageChanged();
				}
			}
		}

		[Column(Name = @"ENGINE", Storage = "_Engine", DbType = "NVARCHAR2(1024)")]
		public string Engine
		{
			get
			{
				return this._Engine;
			}
			set
			{
				if (this._Engine != value)
				{
					this.OnEngineChanging(value);
					this.SendPropertyChanging();
					this._Engine = value;
					this.SendPropertyChanged("Engine");
					this.OnEngineChanged();
				}
			}
		}

		[Column(Name = @"FRAME", Storage = "_Frame", DbType = "NVARCHAR2(1024)")]
		public string Frame
		{
			get
			{
				return this._Frame;
			}
			set
			{
				if (this._Frame != value)
				{
					this.OnFrameChanging(value);
					this.SendPropertyChanging();
					this._Frame = value;
					this.SendPropertyChanged("Frame");
					this.OnFrameChanged();
				}
			}
		}

		[Column(Name = @"ELECTRIC", Storage = "_Electric", DbType = "NVARCHAR2(1024)")]
		public string Electric
		{
			get
			{
				return this._Electric;
			}
			set
			{
				if (this._Electric != value)
				{
					this.OnElectricChanging(value);
					this.SendPropertyChanging();
					this._Electric = value;
					this.SendPropertyChanged("Electric");
					this.OnElectricChanged();
				}
			}
		}

		[Column(Name = @"DAMAGED", Storage = "_Damaged", CanBeNull = false, DbType = "NVARCHAR2(2048) NOT NULL")]
		public string Damaged
		{
			get
			{
				return this._Damaged;
			}
			set
			{
				if (this._Damaged != value)
				{
					this.OnDamagedChanging(value);
					this.SendPropertyChanging();
					this._Damaged = value;
					this.SendPropertyChanged("Damaged");
					this.OnDamagedChanged();
				}
			}
		}

		[Column(Name = @"REASON", Storage = "_Reason", CanBeNull = false, DbType = "NVARCHAR2(2048) NOT NULL")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if (this._Reason != value)
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}

		[Column(Name = @"SERVICEHEADERID", Storage = "_ServiceHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long ServiceHeaderId
		{
			get
			{
				return this._ServiceHeaderId;
			}
			set
			{
				if (this._ServiceHeaderId != value)
				{
					if (this._ServiceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceHeaderId = value;
					this.SendPropertyChanged("ServiceHeaderId");
					this.OnServiceHeaderIdChanged();
				}
			}
		}

		[Column(Name = @"CUSTOMERID", Storage = "_CustomerId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if (this._CustomerId != value)
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}

		[Column(Name = @"COMMENTS", Storage = "_Comments", DbType = "NVARCHAR2(4000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if (this._Comments != value)
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}

		[Column(Name = @"VOUCHERNUMBER", Storage = "_VoucherNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string VoucherNumber
		{
			get
			{
				return this._VoucherNumber;
			}
			set
			{
				if (this._VoucherNumber != value)
				{
					this.OnVoucherNumberChanging(value);
					this.SendPropertyChanging();
					this._VoucherNumber = value;
					this.SendPropertyChanged("VoucherNumber");
					this.OnVoucherNumberChanged();
				}
			}
		}

		[Column(Name = @"FRAMENUMBER", Storage = "_FrameNumber", DbType = "VARCHAR2(30)")]
		public string FrameNumber
		{
			get
			{
				return this._FrameNumber;
			}
			set
			{
				if (this._FrameNumber != value)
				{
					this.OnFrameNumberChanging(value);
					this.SendPropertyChanging();
					this._FrameNumber = value;
					this.SendPropertyChanged("FrameNumber");
					this.OnFrameNumberChanged();
				}
			}
		}

		[Column(Name = @"PURCHASEDATE", Storage = "_PurchaseDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime PurchaseDate
		{
			get
			{
				return this._PurchaseDate;
			}
			set
			{
				if (this._PurchaseDate != value)
				{
					this.OnPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDate = value;
					this.SendPropertyChanged("PurchaseDate");
					this.OnPurchaseDateChanged();
				}
			}
		}

		[Column(Name = @"EXPORTDATE", Storage = "_ExportDate", DbType = "TIMESTAMP")]
		public System.Nullable<System.DateTime> ExportDate
		{
			get
			{
				return this._ExportDate;
			}
			set
			{
				if (this._ExportDate != value)
				{
					this.OnExportDateChanging(value);
					this.SendPropertyChanging();
					this._ExportDate = value;
					this.SendPropertyChanged("ExportDate");
					this.OnExportDateChanged();
				}
			}
		}

		[Column(Name = @"MODEL", Storage = "_Model", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if (this._Model != value)
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}

		[Column(Name = @"FINALVOUCHERNUMBER", Storage = "_FinalVoucherNumber", DbType = "VARCHAR2(30)")]
		public string FinalVoucherNumber
		{
			get
			{
				return this._FinalVoucherNumber;
			}
			set
			{
				if (this._FinalVoucherNumber != value)
				{
					this.OnFinalVoucherNumberChanging(value);
					this.SendPropertyChanging();
					this._FinalVoucherNumber = value;
					this.SendPropertyChanged("FinalVoucherNumber");
					this.OnFinalVoucherNumberChanged();
				}
			}
		}

		[Column(Name = @"PROPOSEFEEAMOUNT", Storage = "_ProposeFeeAmount", CanBeNull = false, DbType = "NUMBER(30) NOT NULL")]
		public decimal ProposeFeeAmount
		{
			get
			{
				return this._ProposeFeeAmount;
			}
			set
			{
				if (this._ProposeFeeAmount != value)
				{
					this.OnProposeFeeAmountChanging(value);
					this.SendPropertyChanging();
					this._ProposeFeeAmount = value;
					this.SendPropertyChanged("ProposeFeeAmount");
					this.OnProposeFeeAmountChanged();
				}
			}
		}

		[Column(Name = @"LASTPROCESSEDDATE", Storage = "_LastProcessedDate", DbType = "TIMESTAMP")]
		public System.Nullable<System.DateTime> LastProcessedDate
		{
			get
			{
				return this._LastProcessedDate;
			}
			set
			{
				if (this._LastProcessedDate != value)
				{
					this.OnLastProcessedDateChanging(value);
					this.SendPropertyChanging();
					this._LastProcessedDate = value;
					this.SendPropertyChanged("LastProcessedDate");
					this.OnLastProcessedDateChanged();
				}
			}
		}

		[Association(Name="ExchangePartHeader_ExchangePartDetail", Storage="_ExchangePartDetails", OtherKey="ExchangePartHeaderId")]
		public EntitySet<ExchangePartDetail> ExchangePartDetails
		{
			get
			{

				return this._ExchangePartDetails;
			}
			set
			{
				this._ExchangePartDetails.Assign(value);
			}
		}

		[Association(Name="ServiceHeader_ExchangePartHeader", Storage="_ServiceHeader", ThisKey="ServiceHeaderId", IsForeignKey=true)]
		public ServiceHeader ServiceHeader
		{
			get
			{
				return this._ServiceHeader.Entity;
			}
			set
			{
				ServiceHeader previousValue = this._ServiceHeader.Entity;
				if (((previousValue != value) 
							|| (this._ServiceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceHeader.Entity = null;
						previousValue.ExchangePartHeaders.Remove(this);
					}
					this._ServiceHeader.Entity = value;
					if ((value != null))
					{
						value.ExchangePartHeaders.Add(this);
						this._ServiceHeaderId = value.ServiceHeaderId;
					}
					else
					{
						this._ServiceHeaderId = default(long); 
					}
					this.SendPropertyChanged("ServiceHeader");
				}
			}
		}

		[Association(Name="Customer_ExchangePartHeader", Storage="_Customer", ThisKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.ExchangePartHeaders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.ExchangePartHeaders.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(long); 
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_ExchangePartDetails(ExchangePartDetail entity)
		{
			this.SendPropertyChanging();
			entity.ExchangePartHeader = this;
		}
		
		private void detach_ExchangePartDetails(ExchangePartDetail entity)
		{
			this.SendPropertyChanging();
			entity.ExchangePartHeader = null;
		}
	}

	[Table(Name = @"VDMS.SER_EXCHANGEVOUCHERHEADER")]
	public partial class ExchangeVoucherHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _FinalVoucherNumber;

		private System.DateTime _CreatedDate;

		private System.DateTime _LastProcessedDate;

		private string _DealerCode;

		private System.Nullable<int> _Status;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFinalVoucherNumberChanging(string value);
		partial void OnFinalVoucherNumberChanged();
		partial void OnCreatedDateChanging(System.DateTime value);
		partial void OnCreatedDateChanged();
		partial void OnLastProcessedDateChanging(System.DateTime value);
		partial void OnLastProcessedDateChanged();
		partial void OnDealerCodeChanging(string value);
		partial void OnDealerCodeChanged();
		partial void OnStatusChanging(System.Nullable<int> value);
		partial void OnStatusChanged();
		#endregion

		public ExchangeVoucherHeader()
		{
			OnCreated();
		}

		[Column(Name = @"FINALVOUCHERNUMBER", Storage = "_FinalVoucherNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL", IsPrimaryKey = true)]
		public string FinalVoucherNumber
		{
			get
			{
				return this._FinalVoucherNumber;
			}
			set
			{
				if (this._FinalVoucherNumber != value)
				{
					this.OnFinalVoucherNumberChanging(value);
					this.SendPropertyChanging();
					this._FinalVoucherNumber = value;
					this.SendPropertyChanged("FinalVoucherNumber");
					this.OnFinalVoucherNumberChanged();
				}
			}
		}

		[Column(Name = @"CREATEDDATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if (this._CreatedDate != value)
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}

		[Column(Name = @"LASTPROCESSEDDATE", Storage = "_LastProcessedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime LastProcessedDate
		{
			get
			{
				return this._LastProcessedDate;
			}
			set
			{
				if (this._LastProcessedDate != value)
				{
					this.OnLastProcessedDateChanging(value);
					this.SendPropertyChanging();
					this._LastProcessedDate = value;
					this.SendPropertyChanged("LastProcessedDate");
					this.OnLastProcessedDateChanged();
				}
			}
		}

		[Column(Name = @"DEALERCODE", Storage = "_DealerCode", DbType = "VARCHAR2(30)")]
		public string DealerCode
		{
			get
			{
				return this._DealerCode;
			}
			set
			{
				if (this._DealerCode != value)
				{
					this.OnDealerCodeChanging(value);
					this.SendPropertyChanging();
					this._DealerCode = value;
					this.SendPropertyChanged("DealerCode");
					this.OnDealerCodeChanged();
				}
			}
		}

		[Column(Name = @"STATUS", Storage = "_Status", DbType = "NUMBER(2)")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if (this._Status != value)
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.SER_SERVICEDETAIL")]
	public partial class ServiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _ServiceDetailId;

		private long _ServiceHeaderId;

		private string _PartCode;

		private string _PartName;

		private int _PartQty;

		private decimal _UnitPrice;

		private string _SerialNumber;

		private EntityRef<ServiceHeader> _ServiceHeader;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnServiceDetailIdChanging(long value);
		partial void OnServiceDetailIdChanged();
		partial void OnServiceHeaderIdChanging(long value);
		partial void OnServiceHeaderIdChanged();
		partial void OnPartCodeChanging(string value);
		partial void OnPartCodeChanged();
		partial void OnPartNameChanging(string value);
		partial void OnPartNameChanged();
		partial void OnPartQtyChanging(int value);
		partial void OnPartQtyChanged();
		partial void OnUnitPriceChanging(decimal value);
		partial void OnUnitPriceChanged();
		partial void OnSerialNumberChanging(string value);
		partial void OnSerialNumberChanged();
		#endregion

		public ServiceDetail()
		{
			this._ServiceHeader = default(EntityRef<ServiceHeader>);
			OnCreated();
		}

		[Column(Name = @"SERVICEDETAILID", Storage = "_ServiceDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long ServiceDetailId
		{
			get
			{
				return this._ServiceDetailId;
			}
			set
			{
				if (this._ServiceDetailId != value)
				{
					this.OnServiceDetailIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceDetailId = value;
					this.SendPropertyChanged("ServiceDetailId");
					this.OnServiceDetailIdChanged();
				}
			}
		}

		[Column(Name = @"SERVICEHEADERID", Storage = "_ServiceHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long ServiceHeaderId
		{
			get
			{
				return this._ServiceHeaderId;
			}
			set
			{
				if (this._ServiceHeaderId != value)
				{
					if (this._ServiceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceHeaderId = value;
					this.SendPropertyChanged("ServiceHeaderId");
					this.OnServiceHeaderIdChanged();
				}
			}
		}

		[Column(Name = @"PARTCODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(35) NOT NULL")]
		public string PartCode
		{
			get
			{
				return this._PartCode;
			}
			set
			{
				if (this._PartCode != value)
				{
					this.OnPartCodeChanging(value);
					this.SendPropertyChanging();
					this._PartCode = value;
					this.SendPropertyChanged("PartCode");
					this.OnPartCodeChanged();
				}
			}
		}

		[Column(Name = @"PARTNAME", Storage = "_PartName", DbType = "NVARCHAR2(512)")]
		public string PartName
		{
			get
			{
				return this._PartName;
			}
			set
			{
				if (this._PartName != value)
				{
					this.OnPartNameChanging(value);
					this.SendPropertyChanging();
					this._PartName = value;
					this.SendPropertyChanged("PartName");
					this.OnPartNameChanged();
				}
			}
		}

		[Column(Name = @"PARTQTY", Storage = "_PartQty", CanBeNull = false, DbType = "NUMBER(5) NOT NULL")]
		public int PartQty
		{
			get
			{
				return this._PartQty;
			}
			set
			{
				if (this._PartQty != value)
				{
					this.OnPartQtyChanging(value);
					this.SendPropertyChanging();
					this._PartQty = value;
					this.SendPropertyChanged("PartQty");
					this.OnPartQtyChanged();
				}
			}
		}

		[Column(Name = @"UNITPRICE", Storage = "_UnitPrice", CanBeNull = false, DbType = "NUMBER(30) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if (this._UnitPrice != value)
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}

		[Column(Name = @"SERIALNUMBER", Storage = "_SerialNumber", DbType = "VARCHAR2(30)")]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if (this._SerialNumber != value)
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}

		[Association(Name="ServiceHeader_ServiceDetail", Storage="_ServiceHeader", ThisKey="ServiceHeaderId", IsForeignKey=true)]
		public ServiceHeader ServiceHeader
		{
			get
			{
				return this._ServiceHeader.Entity;
			}
			set
			{
				ServiceHeader previousValue = this._ServiceHeader.Entity;
				if (((previousValue != value) 
							|| (this._ServiceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceHeader.Entity = null;
						previousValue.ServiceDetails.Remove(this);
					}
					this._ServiceHeader.Entity = value;
					if ((value != null))
					{
						value.ServiceDetails.Add(this);
						this._ServiceHeaderId = value.ServiceHeaderId;
					}
					else
					{
						this._ServiceHeaderId = default(long); 
					}
					this.SendPropertyChanged("ServiceHeader");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.SER_SERVICEHEADER")]
	public partial class ServiceHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _ServiceHeaderId;

		private string _EngineNumber;

		private System.Nullable<long> _CustomerId;

		private System.DateTime _ServiceDate;

		private System.Nullable<int> _ServiceType;

		private string _Damaged;

		private string _RepairResult;

		private double _KmCount;

		private string _Comments;

		private string _ServiceSheetNumber;

		private double _FeeAmount;

		private double _TotalAmount;

		private string _NumberPlate;

		private string _FrameNumber;

		private System.DateTime _PurchaseDate;

		private string _ItemType;

		private string _ColorCode;

		private string _DealerCode;

		private string _BranchCode;

		private double _Status;

		private string _CreateBy;

		private EntitySet<ExchangePartHeader> _ExchangePartHeaders;

		private EntitySet<ServiceDetail> _ServiceDetails;

		private EntityRef<Customer> _Customer;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnServiceHeaderIdChanging(long value);
		partial void OnServiceHeaderIdChanged();
		partial void OnEngineNumberChanging(string value);
		partial void OnEngineNumberChanged();
		partial void OnCustomerIdChanging(System.Nullable<long> value);
		partial void OnCustomerIdChanged();
		partial void OnServiceDateChanging(System.DateTime value);
		partial void OnServiceDateChanged();
		partial void OnServiceTypeChanging(System.Nullable<int> value);
		partial void OnServiceTypeChanged();
		partial void OnDamagedChanging(string value);
		partial void OnDamagedChanged();
		partial void OnRepairResultChanging(string value);
		partial void OnRepairResultChanged();
		partial void OnKmCountChanging(double value);
		partial void OnKmCountChanged();
		partial void OnCommentsChanging(string value);
		partial void OnCommentsChanged();
		partial void OnServiceSheetNumberChanging(string value);
		partial void OnServiceSheetNumberChanged();
		partial void OnFeeAmountChanging(double value);
		partial void OnFeeAmountChanged();
		partial void OnTotalAmountChanging(double value);
		partial void OnTotalAmountChanged();
		partial void OnNumberPlateChanging(string value);
		partial void OnNumberPlateChanged();
		partial void OnFrameNumberChanging(string value);
		partial void OnFrameNumberChanged();
		partial void OnPurchaseDateChanging(System.DateTime value);
		partial void OnPurchaseDateChanged();
		partial void OnItemTypeChanging(string value);
		partial void OnItemTypeChanged();
		partial void OnColorCodeChanging(string value);
		partial void OnColorCodeChanged();
		partial void OnDealerCodeChanging(string value);
		partial void OnDealerCodeChanged();
		partial void OnBranchCodeChanging(string value);
		partial void OnBranchCodeChanged();
		partial void OnStatusChanging(double value);
		partial void OnStatusChanged();
		partial void OnCreateByChanging(string value);
		partial void OnCreateByChanged();
		#endregion

		public ServiceHeader()
		{
			this._ExchangePartHeaders = new EntitySet<ExchangePartHeader>(new Action<ExchangePartHeader>(this.attach_ExchangePartHeaders), new Action<ExchangePartHeader>(this.detach_ExchangePartHeaders));
			this._ServiceDetails = new EntitySet<ServiceDetail>(new Action<ServiceDetail>(this.attach_ServiceDetails), new Action<ServiceDetail>(this.detach_ServiceDetails));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}

		[Column(Name = @"SERVICEHEADERID", Storage = "_ServiceHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long ServiceHeaderId
		{
			get
			{
				return this._ServiceHeaderId;
			}
			set
			{
				if (this._ServiceHeaderId != value)
				{
					this.OnServiceHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceHeaderId = value;
					this.SendPropertyChanged("ServiceHeaderId");
					this.OnServiceHeaderIdChanged();
				}
			}
		}

		[Column(Name = @"ENGINENUMBER", Storage = "_EngineNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string EngineNumber
		{
			get
			{
				return this._EngineNumber;
			}
			set
			{
				if (this._EngineNumber != value)
				{
					this.OnEngineNumberChanging(value);
					this.SendPropertyChanging();
					this._EngineNumber = value;
					this.SendPropertyChanged("EngineNumber");
					this.OnEngineNumberChanged();
				}
			}
		}

		[Column(Name = @"CUSTOMERID", Storage = "_CustomerId", DbType = "NUMBER(10)")]
		public System.Nullable<long> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if (this._CustomerId != value)
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}

		[Column(Name = @"SERVICEDATE", Storage = "_ServiceDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime ServiceDate
		{
			get
			{
				return this._ServiceDate;
			}
			set
			{
				if (this._ServiceDate != value)
				{
					this.OnServiceDateChanging(value);
					this.SendPropertyChanging();
					this._ServiceDate = value;
					this.SendPropertyChanged("ServiceDate");
					this.OnServiceDateChanged();
				}
			}
		}

		[Column(Name = @"SERVICETYPE", Storage = "_ServiceType", DbType = "NUMBER(2)")]
		public System.Nullable<int> ServiceType
		{
			get
			{
				return this._ServiceType;
			}
			set
			{
				if (this._ServiceType != value)
				{
					this.OnServiceTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceType = value;
					this.SendPropertyChanged("ServiceType");
					this.OnServiceTypeChanged();
				}
			}
		}

		[Column(Name = @"DAMAGED", Storage = "_Damaged", DbType = "NVARCHAR2(4000)")]
		public string Damaged
		{
			get
			{
				return this._Damaged;
			}
			set
			{
				if (this._Damaged != value)
				{
					this.OnDamagedChanging(value);
					this.SendPropertyChanging();
					this._Damaged = value;
					this.SendPropertyChanged("Damaged");
					this.OnDamagedChanged();
				}
			}
		}

		[Column(Name = @"REPAIRRESULT", Storage = "_RepairResult", DbType = "NVARCHAR2(4000)")]
		public string RepairResult
		{
			get
			{
				return this._RepairResult;
			}
			set
			{
				if (this._RepairResult != value)
				{
					this.OnRepairResultChanging(value);
					this.SendPropertyChanging();
					this._RepairResult = value;
					this.SendPropertyChanged("RepairResult");
					this.OnRepairResultChanged();
				}
			}
		}

		[Column(Name = @"KMCOUNT", Storage = "_KmCount", CanBeNull = false, DbType = "NUMBER(15) NOT NULL")]
		public double KmCount
		{
			get
			{
				return this._KmCount;
			}
			set
			{
				if (this._KmCount != value)
				{
					this.OnKmCountChanging(value);
					this.SendPropertyChanging();
					this._KmCount = value;
					this.SendPropertyChanged("KmCount");
					this.OnKmCountChanged();
				}
			}
		}

		[Column(Name = @"COMMENTS", Storage = "_Comments", DbType = "NVARCHAR2(4000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if (this._Comments != value)
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}

		[Column(Name = @"SERVICESHEETNUMBER", Storage = "_ServiceSheetNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string ServiceSheetNumber
		{
			get
			{
				return this._ServiceSheetNumber;
			}
			set
			{
				if (this._ServiceSheetNumber != value)
				{
					this.OnServiceSheetNumberChanging(value);
					this.SendPropertyChanging();
					this._ServiceSheetNumber = value;
					this.SendPropertyChanged("ServiceSheetNumber");
					this.OnServiceSheetNumberChanged();
				}
			}
		}

		[Column(Name = @"FEEAMOUNT", Storage = "_FeeAmount", CanBeNull = false, DbType = "NUMBER(15) NOT NULL")]
		public double FeeAmount
		{
			get
			{
				return this._FeeAmount;
			}
			set
			{
				if (this._FeeAmount != value)
				{
					this.OnFeeAmountChanging(value);
					this.SendPropertyChanging();
					this._FeeAmount = value;
					this.SendPropertyChanged("FeeAmount");
					this.OnFeeAmountChanged();
				}
			}
		}

		[Column(Name = @"TOTALAMOUNT", Storage = "_TotalAmount", CanBeNull = false, DbType = "NUMBER(15) NOT NULL")]
		public double TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if (this._TotalAmount != value)
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}

		[Column(Name = @"NUMBERPLATE", Storage = "_NumberPlate", DbType = "VARCHAR2(15)")]
		public string NumberPlate
		{
			get
			{
				return this._NumberPlate;
			}
			set
			{
				if (this._NumberPlate != value)
				{
					this.OnNumberPlateChanging(value);
					this.SendPropertyChanging();
					this._NumberPlate = value;
					this.SendPropertyChanged("NumberPlate");
					this.OnNumberPlateChanged();
				}
			}
		}

		[Column(Name = @"FRAMENUMBER", Storage = "_FrameNumber", DbType = "VARCHAR2(30)")]
		public string FrameNumber
		{
			get
			{
				return this._FrameNumber;
			}
			set
			{
				if (this._FrameNumber != value)
				{
					this.OnFrameNumberChanging(value);
					this.SendPropertyChanging();
					this._FrameNumber = value;
					this.SendPropertyChanged("FrameNumber");
					this.OnFrameNumberChanged();
				}
			}
		}

		[Column(Name = @"PURCHASEDATE", Storage = "_PurchaseDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime PurchaseDate
		{
			get
			{
				return this._PurchaseDate;
			}
			set
			{
				if (this._PurchaseDate != value)
				{
					this.OnPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDate = value;
					this.SendPropertyChanged("PurchaseDate");
					this.OnPurchaseDateChanged();
				}
			}
		}

		[Column(Name = @"ITEMTYPE", Storage = "_ItemType", DbType = "VARCHAR2(50)")]
		public string ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if (this._ItemType != value)
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}

		[Column(Name = @"COLORCODE", Storage = "_ColorCode", DbType = "VARCHAR2(30)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if (this._ColorCode != value)
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}

		[Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string DealerCode
		{
			get
			{
				return this._DealerCode;
			}
			set
			{
				if (this._DealerCode != value)
				{
					this.OnDealerCodeChanging(value);
					this.SendPropertyChanging();
					this._DealerCode = value;
					this.SendPropertyChanged("DealerCode");
					this.OnDealerCodeChanged();
				}
			}
		}

		[Column(Name = @"BRANCHCODE", Storage = "_BranchCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if (this._BranchCode != value)
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}

		[Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public double Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if (this._Status != value)
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}

		[Column(Name = @"CREATEBY", Storage = "_CreateBy", DbType = "VARCHAR2(30)")]
		public string CreateBy
		{
			get
			{
				return this._CreateBy;
			}
			set
			{
				if (this._CreateBy != value)
				{
					this.OnCreateByChanging(value);
					this.SendPropertyChanging();
					this._CreateBy = value;
					this.SendPropertyChanged("CreateBy");
					this.OnCreateByChanged();
				}
			}
		}

		[Association(Name="ServiceHeader_ExchangePartHeader", Storage="_ExchangePartHeaders", OtherKey="ServiceHeaderId")]
		public EntitySet<ExchangePartHeader> ExchangePartHeaders
		{
			get
			{

				return this._ExchangePartHeaders;
			}
			set
			{
				this._ExchangePartHeaders.Assign(value);
			}
		}

		[Association(Name="ServiceHeader_ServiceDetail", Storage="_ServiceDetails", OtherKey="ServiceHeaderId")]
		public EntitySet<ServiceDetail> ServiceDetails
		{
			get
			{

				return this._ServiceDetails;
			}
			set
			{
				this._ServiceDetails.Assign(value);
			}
		}

		[Association(Name="Customer_ServiceHeader", Storage="_Customer", ThisKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.ServiceHeaders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.ServiceHeaders.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(System.Nullable<long>); 
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_ExchangePartHeaders(ExchangePartHeader entity)
		{
			this.SendPropertyChanging();
			entity.ServiceHeader = this;
		}
		
		private void detach_ExchangePartHeaders(ExchangePartHeader entity)
		{
			this.SendPropertyChanging();
			entity.ServiceHeader = null;
		}

		private void attach_ServiceDetails(ServiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.ServiceHeader = this;
		}
		
		private void detach_ServiceDetails(ServiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.ServiceHeader = null;
		}
	}

	[Table(Name = @"VDMS.SER_WARRANTYINFO")]
	public partial class WarrantyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _EngineNumber;

		private System.DateTime _PurchaseDate;

		private int _KmCount;

		private string _ItemCode;

		private string _Color;

		private string _SellDealerCode;

		private string _DatabaseCode;

		private System.Nullable<long> _CustomerId;

		private System.Nullable<System.DateTime> _CreatedDate;

		private EntityRef<Customer> _Customer;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnEngineNumberChanging(string value);
		partial void OnEngineNumberChanged();
		partial void OnPurchaseDateChanging(System.DateTime value);
		partial void OnPurchaseDateChanged();
		partial void OnKmCountChanging(int value);
		partial void OnKmCountChanged();
		partial void OnItemCodeChanging(string value);
		partial void OnItemCodeChanged();
		partial void OnColorChanging(string value);
		partial void OnColorChanged();
		partial void OnSellDealerCodeChanging(string value);
		partial void OnSellDealerCodeChanged();
		partial void OnDatabaseCodeChanging(string value);
		partial void OnDatabaseCodeChanged();
		partial void OnCustomerIdChanging(System.Nullable<long> value);
		partial void OnCustomerIdChanged();
		partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
		partial void OnCreatedDateChanged();
		#endregion

		public WarrantyInfo()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}

		[Column(Name = @"ENGINENUMBER", Storage = "_EngineNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL", IsPrimaryKey = true)]
		public string EngineNumber
		{
			get
			{
				return this._EngineNumber;
			}
			set
			{
				if (this._EngineNumber != value)
				{
					this.OnEngineNumberChanging(value);
					this.SendPropertyChanging();
					this._EngineNumber = value;
					this.SendPropertyChanged("EngineNumber");
					this.OnEngineNumberChanged();
				}
			}
		}

		[Column(Name = @"PURCHASEDATE", Storage = "_PurchaseDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime PurchaseDate
		{
			get
			{
				return this._PurchaseDate;
			}
			set
			{
				if (this._PurchaseDate != value)
				{
					this.OnPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDate = value;
					this.SendPropertyChanged("PurchaseDate");
					this.OnPurchaseDateChanged();
				}
			}
		}

		[Column(Name = @"KMCOUNT", Storage = "_KmCount", CanBeNull = false, DbType = "NUMBER(9) NOT NULL")]
		public int KmCount
		{
			get
			{
				return this._KmCount;
			}
			set
			{
				if (this._KmCount != value)
				{
					this.OnKmCountChanging(value);
					this.SendPropertyChanging();
					this._KmCount = value;
					this.SendPropertyChanged("KmCount");
					this.OnKmCountChanged();
				}
			}
		}

		[Column(Name = @"ITEMCODE", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if (this._ItemCode != value)
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}

		[Column(Name = @"COLOR", Storage = "_Color", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if (this._Color != value)
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}

		[Column(Name = @"SELLDEALERCODE", Storage = "_SellDealerCode", DbType = "VARCHAR2(30)")]
		public string SellDealerCode
		{
			get
			{
				return this._SellDealerCode;
			}
			set
			{
				if (this._SellDealerCode != value)
				{
					this.OnSellDealerCodeChanging(value);
					this.SendPropertyChanging();
					this._SellDealerCode = value;
					this.SendPropertyChanged("SellDealerCode");
					this.OnSellDealerCodeChanged();
				}
			}
		}

		[Column(Name = @"DATABASECODE", Storage = "_DatabaseCode", CanBeNull = false, DbType = "VARCHAR2(10) NOT NULL")]
		public string DatabaseCode
		{
			get
			{
				return this._DatabaseCode;
			}
			set
			{
				if (this._DatabaseCode != value)
				{
					this.OnDatabaseCodeChanging(value);
					this.SendPropertyChanging();
					this._DatabaseCode = value;
					this.SendPropertyChanged("DatabaseCode");
					this.OnDatabaseCodeChanged();
				}
			}
		}

		[Column(Name = @"CUSTOMERID", Storage = "_CustomerId", DbType = "NUMBER(10)")]
		public System.Nullable<long> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if (this._CustomerId != value)
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}

		[Column(Name = @"CREATEDATE", Storage = "_CreatedDate", DbType = "TIMESTAMP")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if (this._CreatedDate != value)
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}

		[Association(Name="Customer_WarrantyInfo", Storage="_Customer", ThisKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.WarrantyInfos.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.WarrantyInfos.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(System.Nullable<long>); 
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.SYM_CUSTOMER")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _CustomerId;

		private string _IdentifyNumber;

		private string _FullName;

		private System.Nullable<bool> _Gender;

		private System.Nullable<System.DateTime> _BirthDate;

		private string _Address;

		private string _ProvinceId;

		private string _DistrictId;

		private System.Nullable<int> _JobTypeId;

		private string _Email;

		private string _Tel;

		private string _Mobile;

		private System.Nullable<int> _CustomerType;

		private string _CustomerDescription;

		private string _Precinct;

		private System.Nullable<int> _Priority;

		private string _DealerCode;

		private bool _ForService;

		private EntitySet<ExchangePartHeader> _ExchangePartHeaders;

		private EntitySet<ServiceHeader> _ServiceHeaders;

		private EntitySet<WarrantyInfo> _WarrantyInfos;

		private EntitySet<Invoice> _SaleInvoices;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnCustomerIdChanging(long value);
		partial void OnCustomerIdChanged();
		partial void OnIdentifyNumberChanging(string value);
		partial void OnIdentifyNumberChanged();
		partial void OnFullNameChanging(string value);
		partial void OnFullNameChanged();
		partial void OnGenderChanging(System.Nullable<bool> value);
		partial void OnGenderChanged();
		partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
		partial void OnBirthDateChanged();
		partial void OnAddressChanging(string value);
		partial void OnAddressChanged();
		partial void OnProvinceIdChanging(string value);
		partial void OnProvinceIdChanged();
		partial void OnDistrictIdChanging(string value);
		partial void OnDistrictIdChanged();
		partial void OnJobTypeIdChanging(System.Nullable<int> value);
		partial void OnJobTypeIdChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnTelChanging(string value);
		partial void OnTelChanged();
		partial void OnMobileChanging(string value);
		partial void OnMobileChanged();
		partial void OnCustomerTypeChanging(System.Nullable<int> value);
		partial void OnCustomerTypeChanged();
		partial void OnCustomerDescriptionChanging(string value);
		partial void OnCustomerDescriptionChanged();
		partial void OnPrecinctChanging(string value);
		partial void OnPrecinctChanged();
		partial void OnPriorityChanging(System.Nullable<int> value);
		partial void OnPriorityChanged();
		partial void OnDealerCodeChanging(string value);
		partial void OnDealerCodeChanged();
		partial void OnForServiceChanging(bool value);
		partial void OnForServiceChanged();
		#endregion

		public Customer()
		{
			this._ExchangePartHeaders = new EntitySet<ExchangePartHeader>(new Action<ExchangePartHeader>(this.attach_ExchangePartHeaders), new Action<ExchangePartHeader>(this.detach_ExchangePartHeaders));
			this._ServiceHeaders = new EntitySet<ServiceHeader>(new Action<ServiceHeader>(this.attach_ServiceHeaders), new Action<ServiceHeader>(this.detach_ServiceHeaders));
			this._WarrantyInfos = new EntitySet<WarrantyInfo>(new Action<WarrantyInfo>(this.attach_WarrantyInfos), new Action<WarrantyInfo>(this.detach_WarrantyInfos));
			this._SaleInvoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_SaleInvoices), new Action<Invoice>(this.detach_SaleInvoices));
			OnCreated();
		}

		[Column(Name = @"CUSTOMERID", Storage = "_CustomerId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if (this._CustomerId != value)
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}

		[Column(Name = @"IDENTIFYNUMBER", Storage = "_IdentifyNumber", DbType = "VARCHAR2(20)")]
		public string IdentifyNumber
		{
			get
			{
				return this._IdentifyNumber;
			}
			set
			{
				if (this._IdentifyNumber != value)
				{
					this.OnIdentifyNumberChanging(value);
					this.SendPropertyChanging();
					this._IdentifyNumber = value;
					this.SendPropertyChanged("IdentifyNumber");
					this.OnIdentifyNumberChanged();
				}
			}
		}

		[Column(Name = @"FULLNAME", Storage = "_FullName", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if (this._FullName != value)
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}

		[Column(Name = @"GENDER", Storage = "_Gender", DbType = "NUMBER(1)")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if (this._Gender != value)
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}

		[Column(Name = @"BIRTHDATE", Storage = "_BirthDate", DbType = "TIMESTAMP")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if (this._BirthDate != value)
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}

		[Column(Name = @"ADDRESS", Storage = "_Address", DbType = "NVARCHAR2(512)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if (this._Address != value)
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}

		[Column(Name = @"PROVINCEID", Storage = "_ProvinceId", DbType = "VARCHAR2(20)")]
		public string ProvinceId
		{
			get
			{
				return this._ProvinceId;
			}
			set
			{
				if (this._ProvinceId != value)
				{
					this.OnProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinceId = value;
					this.SendPropertyChanged("ProvinceId");
					this.OnProvinceIdChanged();
				}
			}
		}

		[Column(Name = @"DISTRICTID", Storage = "_DistrictId", DbType = "NVARCHAR2(512)")]
		public string DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if (this._DistrictId != value)
				{
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}

		[Column(Name = @"JOBTYPEID", Storage = "_JobTypeId", DbType = "NUMBER(2)")]
		public System.Nullable<int> JobTypeId
		{
			get
			{
				return this._JobTypeId;
			}
			set
			{
				if (this._JobTypeId != value)
				{
					this.OnJobTypeIdChanging(value);
					this.SendPropertyChanging();
					this._JobTypeId = value;
					this.SendPropertyChanged("JobTypeId");
					this.OnJobTypeIdChanged();
				}
			}
		}

		[Column(Name = @"EMAIL", Storage = "_Email", DbType = "VARCHAR2(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if (this._Email != value)
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[Column(Name = @"TEL", Storage = "_Tel", DbType = "VARCHAR2(20)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if (this._Tel != value)
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}

		[Column(Name = @"MOBILE", Storage = "_Mobile", DbType = "VARCHAR2(20)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if (this._Mobile != value)
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}

		[Column(Name = @"CUSTOMERTYPE", Storage = "_CustomerType", DbType = "NUMBER(2)")]
		public System.Nullable<int> CustomerType
		{
			get
			{
				return this._CustomerType;
			}
			set
			{
				if (this._CustomerType != value)
				{
					this.OnCustomerTypeChanging(value);
					this.SendPropertyChanging();
					this._CustomerType = value;
					this.SendPropertyChanged("CustomerType");
					this.OnCustomerTypeChanged();
				}
			}
		}

		[Column(Name = @"CUSTOMERDESCRIPTION", Storage = "_CustomerDescription", DbType = "NVARCHAR2(4000)")]
		public string CustomerDescription
		{
			get
			{
				return this._CustomerDescription;
			}
			set
			{
				if (this._CustomerDescription != value)
				{
					this.OnCustomerDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CustomerDescription = value;
					this.SendPropertyChanged("CustomerDescription");
					this.OnCustomerDescriptionChanged();
				}
			}
		}

		[Column(Name = @"PRECINCT", Storage = "_Precinct", DbType = "NVARCHAR2(512)")]
		public string Precinct
		{
			get
			{
				return this._Precinct;
			}
			set
			{
				if (this._Precinct != value)
				{
					this.OnPrecinctChanging(value);
					this.SendPropertyChanging();
					this._Precinct = value;
					this.SendPropertyChanged("Precinct");
					this.OnPrecinctChanged();
				}
			}
		}

		[Column(Name = @"PRIORITY", Storage = "_Priority", DbType = "NUMBER(2)")]
		public System.Nullable<int> Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if (this._Priority != value)
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}

		[Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string DealerCode
		{
			get
			{
				return this._DealerCode;
			}
			set
			{
				if (this._DealerCode != value)
				{
					this.OnDealerCodeChanging(value);
					this.SendPropertyChanging();
					this._DealerCode = value;
					this.SendPropertyChanged("DealerCode");
					this.OnDealerCodeChanged();
				}
			}
		}

		[Column(Name = @"FORSERVICE", Storage = "_ForService", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
		public bool ForService
		{
			get
			{
				return this._ForService;
			}
			set
			{
				if (this._ForService != value)
				{
					this.OnForServiceChanging(value);
					this.SendPropertyChanging();
					this._ForService = value;
					this.SendPropertyChanged("ForService");
					this.OnForServiceChanged();
				}
			}
		}

		[Association(Name="Customer_ExchangePartHeader", Storage="_ExchangePartHeaders", OtherKey="CustomerId")]
		public EntitySet<ExchangePartHeader> ExchangePartHeaders
		{
			get
			{

				return this._ExchangePartHeaders;
			}
			set
			{
				this._ExchangePartHeaders.Assign(value);
			}
		}

		[Association(Name="Customer_ServiceHeader", Storage="_ServiceHeaders", OtherKey="CustomerId")]
		public EntitySet<ServiceHeader> ServiceHeaders
		{
			get
			{

				return this._ServiceHeaders;
			}
			set
			{
				this._ServiceHeaders.Assign(value);
			}
		}

		[Association(Name="Customer_WarrantyInfo", Storage="_WarrantyInfos", OtherKey="CustomerId")]
		public EntitySet<WarrantyInfo> WarrantyInfos
		{
			get
			{

				return this._WarrantyInfos;
			}
			set
			{
				this._WarrantyInfos.Assign(value);
			}
		}

		[Association(Name="Customer_Invoice", Storage="_SaleInvoices", OtherKey="CustomerId")]
		public EntitySet<Invoice> SaleInvoices
		{
			get
			{

				return this._SaleInvoices;
			}
			set
			{
				this._SaleInvoices.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_ExchangePartHeaders(ExchangePartHeader entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_ExchangePartHeaders(ExchangePartHeader entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}

		private void attach_ServiceHeaders(ServiceHeader entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_ServiceHeaders(ServiceHeader entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}

		private void attach_WarrantyInfos(WarrantyInfo entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_WarrantyInfos(WarrantyInfo entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}

		private void attach_SaleInvoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_SaleInvoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}

	[Table(Name = @"VDMS.DATA_BROKEN")]
	public partial class Broken : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _BrokenName;

		private System.DateTime _LastUpdate;

		private string _EditBy;

		private string _BrokenCode;

		private long _BrokenId;

		private EntitySet<ExchangePartDetail> _ExchangePartDetails;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBrokenNameChanging(string value);
		partial void OnBrokenNameChanged();
		partial void OnLastUpdateChanging(System.DateTime value);
		partial void OnLastUpdateChanged();
		partial void OnEditByChanging(string value);
		partial void OnEditByChanged();
		partial void OnBrokenCodeChanging(string value);
		partial void OnBrokenCodeChanged();
		partial void OnBrokenIdChanging(long value);
		partial void OnBrokenIdChanged();
		#endregion

		public Broken()
		{
			this._ExchangePartDetails = new EntitySet<ExchangePartDetail>(new Action<ExchangePartDetail>(this.attach_ExchangePartDetails), new Action<ExchangePartDetail>(this.detach_ExchangePartDetails));
			OnCreated();
		}

		[Column(Name = @"BROKENNAME", Storage = "_BrokenName", CanBeNull = false, DbType = "VARCHAR2(256) NOT NULL")]
		public string BrokenName
		{
			get
			{
				return this._BrokenName;
			}
			set
			{
				if (this._BrokenName != value)
				{
					this.OnBrokenNameChanging(value);
					this.SendPropertyChanging();
					this._BrokenName = value;
					this.SendPropertyChanged("BrokenName");
					this.OnBrokenNameChanged();
				}
			}
		}

		[Column(Name = @"LASTUPDATE", Storage = "_LastUpdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if (this._LastUpdate != value)
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}

		[Column(Name = @"EDITBY", Storage = "_EditBy", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string EditBy
		{
			get
			{
				return this._EditBy;
			}
			set
			{
				if (this._EditBy != value)
				{
					this.OnEditByChanging(value);
					this.SendPropertyChanging();
					this._EditBy = value;
					this.SendPropertyChanged("EditBy");
					this.OnEditByChanged();
				}
			}
		}

		[Column(Name = @"BROKENCODE", Storage = "_BrokenCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string BrokenCode
		{
			get
			{
				return this._BrokenCode;
			}
			set
			{
				if (this._BrokenCode != value)
				{
					this.OnBrokenCodeChanging(value);
					this.SendPropertyChanging();
					this._BrokenCode = value;
					this.SendPropertyChanged("BrokenCode");
					this.OnBrokenCodeChanged();
				}
			}
		}

		[Column(Name = @"BROKENID", Storage = "_BrokenId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long BrokenId
		{
			get
			{
				return this._BrokenId;
			}
			set
			{
				if (this._BrokenId != value)
				{
					this.OnBrokenIdChanging(value);
					this.SendPropertyChanging();
					this._BrokenId = value;
					this.SendPropertyChanged("BrokenId");
					this.OnBrokenIdChanged();
				}
			}
		}

		[Association(Name="Broken_ExchangePartDetail", Storage="_ExchangePartDetails", OtherKey="BrokenId")]
		public EntitySet<ExchangePartDetail> ExchangePartDetails
		{
			get
			{

				return this._ExchangePartDetails;
			}
			set
			{
				this._ExchangePartDetails.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_ExchangePartDetails(ExchangePartDetail entity)
		{
			this.SendPropertyChanging();
			entity.Broken = this;
		}
		
		private void detach_ExchangePartDetails(ExchangePartDetail entity)
		{
			this.SendPropertyChanging();
			entity.Broken = null;
		}
	}

	[Table(Name = @"VDMS.DATA_WARRANTYCONDITION")]
	public partial class WarrantyCondition : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _WarrantyConditionId;

		private string _PartCode;

		private string _PartNameVN;

		private string _PartNameEN;

		private string _MotorCode;

		private int _WarrantyTime;

		private long _WarrantyLength;

		private System.Nullable<long> _Labour;

		private string _ManPower;

		private System.Nullable<long> _UnitPrice;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnWarrantyConditionIdChanging(long value);
		partial void OnWarrantyConditionIdChanged();
		partial void OnPartCodeChanging(string value);
		partial void OnPartCodeChanged();
		partial void OnPartNameVNChanging(string value);
		partial void OnPartNameVNChanged();
		partial void OnPartNameENChanging(string value);
		partial void OnPartNameENChanged();
		partial void OnMotorCodeChanging(string value);
		partial void OnMotorCodeChanged();
		partial void OnWarrantyTimeChanging(int value);
		partial void OnWarrantyTimeChanged();
		partial void OnWarrantyLengthChanging(long value);
		partial void OnWarrantyLengthChanged();
		partial void OnLabourChanging(System.Nullable<long> value);
		partial void OnLabourChanged();
		partial void OnManPowerChanging(string value);
		partial void OnManPowerChanged();
		partial void OnUnitPriceChanging(System.Nullable<long> value);
		partial void OnUnitPriceChanged();
		#endregion

		public WarrantyCondition()
		{
			OnCreated();
		}

		[Column(Name = @"WARRANTYCONDITIONID", Storage = "_WarrantyConditionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(38) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long WarrantyConditionId
		{
			get
			{
				return this._WarrantyConditionId;
			}
			set
			{
				if (this._WarrantyConditionId != value)
				{
					this.OnWarrantyConditionIdChanging(value);
					this.SendPropertyChanging();
					this._WarrantyConditionId = value;
					this.SendPropertyChanged("WarrantyConditionId");
					this.OnWarrantyConditionIdChanged();
				}
			}
		}

		[Column(Name = @"PARTCODE", Storage = "_PartCode", CanBeNull = false, DbType = "VARCHAR2(35) NOT NULL")]
		public string PartCode
		{
			get
			{
				return this._PartCode;
			}
			set
			{
				if (this._PartCode != value)
				{
					this.OnPartCodeChanging(value);
					this.SendPropertyChanging();
					this._PartCode = value;
					this.SendPropertyChanged("PartCode");
					this.OnPartCodeChanged();
				}
			}
		}

		[Column(Name = @"PARTNAMEVN", Storage = "_PartNameVN", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
		public string PartNameVN
		{
			get
			{
				return this._PartNameVN;
			}
			set
			{
				if (this._PartNameVN != value)
				{
					this.OnPartNameVNChanging(value);
					this.SendPropertyChanging();
					this._PartNameVN = value;
					this.SendPropertyChanged("PartNameVN");
					this.OnPartNameVNChanged();
				}
			}
		}

		[Column(Name = @"PARTNAMEEN", Storage = "_PartNameEN", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
		public string PartNameEN
		{
			get
			{
				return this._PartNameEN;
			}
			set
			{
				if (this._PartNameEN != value)
				{
					this.OnPartNameENChanging(value);
					this.SendPropertyChanging();
					this._PartNameEN = value;
					this.SendPropertyChanged("PartNameEN");
					this.OnPartNameENChanged();
				}
			}
		}

		[Column(Name = @"MOTORCODE", Storage = "_MotorCode", DbType = "VARCHAR2(12)")]
		public string MotorCode
		{
			get
			{
				return this._MotorCode;
			}
			set
			{
				if (this._MotorCode != value)
				{
					this.OnMotorCodeChanging(value);
					this.SendPropertyChanging();
					this._MotorCode = value;
					this.SendPropertyChanged("MotorCode");
					this.OnMotorCodeChanged();
				}
			}
		}

		[Column(Name = @"WARRANTYTIME", Storage = "_WarrantyTime", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public int WarrantyTime
		{
			get
			{
				return this._WarrantyTime;
			}
			set
			{
				if (this._WarrantyTime != value)
				{
					this.OnWarrantyTimeChanging(value);
					this.SendPropertyChanging();
					this._WarrantyTime = value;
					this.SendPropertyChanged("WarrantyTime");
					this.OnWarrantyTimeChanged();
				}
			}
		}

		[Column(Name = @"WARRANTYLENGTH", Storage = "_WarrantyLength", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
		public long WarrantyLength
		{
			get
			{
				return this._WarrantyLength;
			}
			set
			{
				if (this._WarrantyLength != value)
				{
					this.OnWarrantyLengthChanging(value);
					this.SendPropertyChanging();
					this._WarrantyLength = value;
					this.SendPropertyChanged("WarrantyLength");
					this.OnWarrantyLengthChanged();
				}
			}
		}

		[Column(Name = @"LABOUR", Storage = "_Labour", DbType = "NUMBER(38)")]
		public System.Nullable<long> Labour
		{
			get
			{
				return this._Labour;
			}
			set
			{
				if (this._Labour != value)
				{
					this.OnLabourChanging(value);
					this.SendPropertyChanging();
					this._Labour = value;
					this.SendPropertyChanged("Labour");
					this.OnLabourChanged();
				}
			}
		}

		[Column(Name = @"MANPOWER", Storage = "_ManPower", DbType = "VARCHAR2(10)")]
		public string ManPower
		{
			get
			{
				return this._ManPower;
			}
			set
			{
				if (this._ManPower != value)
				{
					this.OnManPowerChanging(value);
					this.SendPropertyChanging();
					this._ManPower = value;
					this.SendPropertyChanged("ManPower");
					this.OnManPowerChanged();
				}
			}
		}

		[Column(Name = @"UNITPRICE", Storage = "_UnitPrice", DbType = "NUMBER(38)")]
		public System.Nullable<long> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if (this._UnitPrice != value)
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.SALE_INVOICE")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _InvoiceId;

		private long _ItemInstanceId;

		private long _SellItemId;

		private long _CustomerId;

		private string _EngineNumber;

		private string _DealerCode;

		private System.DateTime _CreatedDate;

		private string _CreatedBy;

		private string _InvoiceNumber;

		private System.DateTime _SellDate;

		private EntityRef<Customer> _Customer;

		private EntityRef<DataIteminstance> _DataIteminstance;

		private EntityRef<SaleSellitem> _SaleSellitem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnInvoiceIdChanging(long value);
		partial void OnInvoiceIdChanged();
		partial void OnItemInstanceIdChanging(long value);
		partial void OnItemInstanceIdChanged();
		partial void OnSellItemIdChanging(long value);
		partial void OnSellItemIdChanged();
		partial void OnCustomerIdChanging(long value);
		partial void OnCustomerIdChanged();
		partial void OnEngineNumberChanging(string value);
		partial void OnEngineNumberChanged();
		partial void OnDealerCodeChanging(string value);
		partial void OnDealerCodeChanged();
		partial void OnCreatedDateChanging(System.DateTime value);
		partial void OnCreatedDateChanged();
		partial void OnCreatedByChanging(string value);
		partial void OnCreatedByChanged();
		partial void OnInvoiceNumberChanging(string value);
		partial void OnInvoiceNumberChanged();
		partial void OnSellDateChanging(System.DateTime value);
		partial void OnSellDateChanged();
		#endregion

		public Invoice()
		{
			this._Customer = default(EntityRef<Customer>);
			this._DataIteminstance = default(EntityRef<DataIteminstance>);
			this._SaleSellitem = default(EntityRef<SaleSellitem>);
			OnCreated();
		}

		[Column(Name = @"INVOICEID", Storage = "_InvoiceId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if (this._InvoiceId != value)
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}

		[Column(Name = @"ITEMINSTANCEID", Storage = "_ItemInstanceId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long ItemInstanceId
		{
			get
			{
				return this._ItemInstanceId;
			}
			set
			{
				if (this._ItemInstanceId != value)
				{
					if (this._DataIteminstance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._ItemInstanceId = value;
					this.SendPropertyChanged("ItemInstanceId");
					this.OnItemInstanceIdChanged();
				}
			}
		}

		[Column(Name = @"SELLITEMID", Storage = "_SellItemId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long SellItemId
		{
			get
			{
				return this._SellItemId;
			}
			set
			{
				if (this._SellItemId != value)
				{
					if (this._SaleSellitem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellItemIdChanging(value);
					this.SendPropertyChanging();
					this._SellItemId = value;
					this.SendPropertyChanged("SellItemId");
					this.OnSellItemIdChanged();
				}
			}
		}

		[Column(Name = @"CUSTOMERID", Storage = "_CustomerId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if (this._CustomerId != value)
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}

		[Column(Name = @"ENGINENUMBER", Storage = "_EngineNumber", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
		public string EngineNumber
		{
			get
			{
				return this._EngineNumber;
			}
			set
			{
				if (this._EngineNumber != value)
				{
					this.OnEngineNumberChanging(value);
					this.SendPropertyChanging();
					this._EngineNumber = value;
					this.SendPropertyChanged("EngineNumber");
					this.OnEngineNumberChanged();
				}
			}
		}

		[Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
		public string DealerCode
		{
			get
			{
				return this._DealerCode;
			}
			set
			{
				if (this._DealerCode != value)
				{
					this.OnDealerCodeChanging(value);
					this.SendPropertyChanging();
					this._DealerCode = value;
					this.SendPropertyChanged("DealerCode");
					this.OnDealerCodeChanged();
				}
			}
		}

		[Column(Name = @"CREATEDDATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if (this._CreatedDate != value)
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}

		[Column(Name = @"CREATEDBY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if (this._CreatedBy != value)
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}

		[Column(Name = @"INVOICENUMBER", Storage = "_InvoiceNumber", DbType = "VARCHAR2(30)")]
		public string InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if (this._InvoiceNumber != value)
				{
					this.OnInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNumber = value;
					this.SendPropertyChanged("InvoiceNumber");
					this.OnInvoiceNumberChanged();
				}
			}
		}

		[Column(Name = @"SELLDATE", Storage = "_SellDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime SellDate
		{
			get
			{
				return this._SellDate;
			}
			set
			{
				if (this._SellDate != value)
				{
					this.OnSellDateChanging(value);
					this.SendPropertyChanging();
					this._SellDate = value;
					this.SendPropertyChanged("SellDate");
					this.OnSellDateChanged();
				}
			}
		}

		[Association(Name="Customer_Invoice", Storage="_Customer", ThisKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.SaleInvoices.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.SaleInvoices.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(long); 
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}

		[Association(Name="DataIteminstance_Invoice", Storage="_DataIteminstance", ThisKey="ItemInstanceId", IsForeignKey=true)]
		public DataIteminstance DataIteminstance
		{
			get
			{
				return this._DataIteminstance.Entity;
			}
			set
			{
				DataIteminstance previousValue = this._DataIteminstance.Entity;
				if (((previousValue != value) 
							|| (this._DataIteminstance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataIteminstance.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._DataIteminstance.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._ItemInstanceId = value.ItemInstanceId;
					}
					else
					{
						this._ItemInstanceId = default(long); 
					}
					this.SendPropertyChanged("DataIteminstance");
				}
			}
		}

		[Association(Name="SaleSellitem_Invoice", Storage="_SaleSellitem", ThisKey="SellItemId", IsForeignKey=true)]
		public SaleSellitem SaleSellitem
		{
			get
			{
				return this._SaleSellitem.Entity;
			}
			set
			{
				SaleSellitem previousValue = this._SaleSellitem.Entity;
				if (((previousValue != value) 
							|| (this._SaleSellitem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SaleSellitem.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._SaleSellitem.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._SellItemId = value.SellItemId;
					}
					else
					{
						this._SellItemId = default(long); 
					}
					this.SendPropertyChanged("SaleSellitem");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.DATA_ITEMINSTANCE")]
	public partial class DataIteminstance : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _ItemInstanceId;

		private string _ItemCode;

		private string _DealerCode;

		private string _EngineNumber;

		private string _ItemType;

		private string _Color;

		private System.DateTime _ImportedDate;

		private int _Status;

		private System.Nullable<System.DateTime> _MadeDate;

		private string _VMEPInvoice;

		private string _Comments;

		private string _BranchCode;

		private System.DateTime _CreatedDate;

		private System.DateTime _ReleasedDate;

		private string _DatabaseCode;

		private EntitySet<Invoice> _Invoices;

		private EntityRef<DataItem> _DataItem;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnItemInstanceIdChanging(long value);
		partial void OnItemInstanceIdChanged();
		partial void OnItemCodeChanging(string value);
		partial void OnItemCodeChanged();
		partial void OnDealerCodeChanging(string value);
		partial void OnDealerCodeChanged();
		partial void OnEngineNumberChanging(string value);
		partial void OnEngineNumberChanged();
		partial void OnItemTypeChanging(string value);
		partial void OnItemTypeChanged();
		partial void OnColorChanging(string value);
		partial void OnColorChanged();
		partial void OnImportedDateChanging(System.DateTime value);
		partial void OnImportedDateChanged();
		partial void OnStatusChanging(int value);
		partial void OnStatusChanged();
		partial void OnMadeDateChanging(System.Nullable<System.DateTime> value);
		partial void OnMadeDateChanged();
		partial void OnVMEPInvoiceChanging(string value);
		partial void OnVMEPInvoiceChanged();
		partial void OnCommentsChanging(string value);
		partial void OnCommentsChanged();
		partial void OnBranchCodeChanging(string value);
		partial void OnBranchCodeChanged();
		partial void OnCreatedDateChanging(System.DateTime value);
		partial void OnCreatedDateChanged();
		partial void OnReleasedDateChanging(System.DateTime value);
		partial void OnReleasedDateChanged();
		partial void OnDatabaseCodeChanging(string value);
		partial void OnDatabaseCodeChanged();
		#endregion

		public DataIteminstance()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._DataItem = default(EntityRef<DataItem>);
			OnCreated();
		}

		[Column(Name = @"ITEMINSTANCEID", Storage = "_ItemInstanceId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long ItemInstanceId
		{
			get
			{
				return this._ItemInstanceId;
			}
			set
			{
				if (this._ItemInstanceId != value)
				{
					this.OnItemInstanceIdChanging(value);
					this.SendPropertyChanging();
					this._ItemInstanceId = value;
					this.SendPropertyChanged("ItemInstanceId");
					this.OnItemInstanceIdChanged();
				}
			}
		}

		[Column(Name = @"ITEMCODE", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if (this._ItemCode != value)
				{
					if (this._DataItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}

		[Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string DealerCode
		{
			get
			{
				return this._DealerCode;
			}
			set
			{
				if (this._DealerCode != value)
				{
					this.OnDealerCodeChanging(value);
					this.SendPropertyChanging();
					this._DealerCode = value;
					this.SendPropertyChanged("DealerCode");
					this.OnDealerCodeChanged();
				}
			}
		}

		[Column(Name = @"ENGINENUMBER", Storage = "_EngineNumber", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
		public string EngineNumber
		{
			get
			{
				return this._EngineNumber;
			}
			set
			{
				if (this._EngineNumber != value)
				{
					this.OnEngineNumberChanging(value);
					this.SendPropertyChanging();
					this._EngineNumber = value;
					this.SendPropertyChanged("EngineNumber");
					this.OnEngineNumberChanged();
				}
			}
		}

		[Column(Name = @"ITEMTYPE", Storage = "_ItemType", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
		public string ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if (this._ItemType != value)
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}

		[Column(Name = @"COLOR", Storage = "_Color", CanBeNull = false, DbType = "NVARCHAR2(60) NOT NULL")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if (this._Color != value)
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}

		[Column(Name = @"IMPORTEDDATE", Storage = "_ImportedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime ImportedDate
		{
			get
			{
				return this._ImportedDate;
			}
			set
			{
				if (this._ImportedDate != value)
				{
					this.OnImportedDateChanging(value);
					this.SendPropertyChanging();
					this._ImportedDate = value;
					this.SendPropertyChanged("ImportedDate");
					this.OnImportedDateChanged();
				}
			}
		}

		[Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if (this._Status != value)
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}

		[Column(Name = @"MADEDATE", Storage = "_MadeDate", DbType = "TIMESTAMP")]
		public System.Nullable<System.DateTime> MadeDate
		{
			get
			{
				return this._MadeDate;
			}
			set
			{
				if (this._MadeDate != value)
				{
					this.OnMadeDateChanging(value);
					this.SendPropertyChanging();
					this._MadeDate = value;
					this.SendPropertyChanged("MadeDate");
					this.OnMadeDateChanged();
				}
			}
		}

		[Column(Name = @"VMEPINVOICE", Storage = "_VMEPInvoice", DbType = "VARCHAR2(256)")]
		public string VMEPInvoice
		{
			get
			{
				return this._VMEPInvoice;
			}
			set
			{
				if (this._VMEPInvoice != value)
				{
					this.OnVMEPInvoiceChanging(value);
					this.SendPropertyChanging();
					this._VMEPInvoice = value;
					this.SendPropertyChanged("VMEPInvoice");
					this.OnVMEPInvoiceChanged();
				}
			}
		}

		[Column(Name = @"COMMENTS", Storage = "_Comments", DbType = "NVARCHAR2(4000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if (this._Comments != value)
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}

		[Column(Name = @"BRANCHCODE", Storage = "_BranchCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if (this._BranchCode != value)
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}

		[Column(Name = @"CREATEDDATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if (this._CreatedDate != value)
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}

		[Column(Name = @"RELEASEDDATE", Storage = "_ReleasedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
		public System.DateTime ReleasedDate
		{
			get
			{
				return this._ReleasedDate;
			}
			set
			{
				if (this._ReleasedDate != value)
				{
					this.OnReleasedDateChanging(value);
					this.SendPropertyChanging();
					this._ReleasedDate = value;
					this.SendPropertyChanged("ReleasedDate");
					this.OnReleasedDateChanged();
				}
			}
		}

		[Column(Name = @"DATABASECODE", Storage = "_DatabaseCode", CanBeNull = false, DbType = "VARCHAR2(10) NOT NULL")]
		public string DatabaseCode
		{
			get
			{
				return this._DatabaseCode;
			}
			set
			{
				if (this._DatabaseCode != value)
				{
					this.OnDatabaseCodeChanging(value);
					this.SendPropertyChanging();
					this._DatabaseCode = value;
					this.SendPropertyChanged("DatabaseCode");
					this.OnDatabaseCodeChanged();
				}
			}
		}

		[Association(Name="DataIteminstance_Invoice", Storage="_Invoices", OtherKey="ItemInstanceId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{

				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}

		[Association(Name="DataItem_DataIteminstance", Storage="_DataItem", ThisKey="ItemCode", IsForeignKey=true)]
		public DataItem DataItem
		{
			get
			{
				return this._DataItem.Entity;
			}
			set
			{
				DataItem previousValue = this._DataItem.Entity;
				if (((previousValue != value) 
							|| (this._DataItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataItem.Entity = null;
						previousValue.DataIteminstances.Remove(this);
					}
					this._DataItem.Entity = value;
					if ((value != null))
					{
						value.DataIteminstances.Add(this);
						this._ItemCode = value.ItemCode;
					}
					else
					{
						this._ItemCode = default(string); 
					}
					this.SendPropertyChanged("DataItem");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.DataIteminstance = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.DataIteminstance = null;
		}
	}

	[Table(Name = @"VDMS.SALE_SELLITEM")]
	public partial class SaleSellitem : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _SellItemId;

		private long _PriceBeforeTax;

		private int _TaxAmt;

		private int _PaymentType;

		private string _NumberPlate;

		private string _SellType;

		private System.Nullable<System.DateTime> _PaymentDate;

		private System.Nullable<System.DateTime> _NumPlaterecdate;

		private string _CommentSellItem;

		private EntitySet<Invoice> _Invoices;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSellItemIdChanging(long value);
		partial void OnSellItemIdChanged();
		partial void OnPriceBeforeTaxChanging(long value);
		partial void OnPriceBeforeTaxChanged();
		partial void OnTaxAmtChanging(int value);
		partial void OnTaxAmtChanged();
		partial void OnPaymentTypeChanging(int value);
		partial void OnPaymentTypeChanged();
		partial void OnNumberPlateChanging(string value);
		partial void OnNumberPlateChanged();
		partial void OnSellTypeChanging(string value);
		partial void OnSellTypeChanged();
		partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
		partial void OnPaymentDateChanged();
		partial void OnNumPlaterecdateChanging(System.Nullable<System.DateTime> value);
		partial void OnNumPlaterecdateChanged();
		partial void OnCommentSellItemChanging(string value);
		partial void OnCommentSellItemChanged();
		#endregion

		public SaleSellitem()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}

		[Column(Name = @"SELLITEMID", Storage = "_SellItemId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long SellItemId
		{
			get
			{
				return this._SellItemId;
			}
			set
			{
				if (this._SellItemId != value)
				{
					this.OnSellItemIdChanging(value);
					this.SendPropertyChanging();
					this._SellItemId = value;
					this.SendPropertyChanged("SellItemId");
					this.OnSellItemIdChanged();
				}
			}
		}

		[Column(Name = @"PRICEBEFORETAX", Storage = "_PriceBeforeTax", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
		public long PriceBeforeTax
		{
			get
			{
				return this._PriceBeforeTax;
			}
			set
			{
				if (this._PriceBeforeTax != value)
				{
					this.OnPriceBeforeTaxChanging(value);
					this.SendPropertyChanging();
					this._PriceBeforeTax = value;
					this.SendPropertyChanged("PriceBeforeTax");
					this.OnPriceBeforeTaxChanged();
				}
			}
		}

		[Column(Name = @"TAXAMT", Storage = "_TaxAmt", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
		public int TaxAmt
		{
			get
			{
				return this._TaxAmt;
			}
			set
			{
				if (this._TaxAmt != value)
				{
					this.OnTaxAmtChanging(value);
					this.SendPropertyChanging();
					this._TaxAmt = value;
					this.SendPropertyChanged("TaxAmt");
					this.OnTaxAmtChanged();
				}
			}
		}

		[Column(Name = @"PAYMENTTYPE", Storage = "_PaymentType", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
		public int PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if (this._PaymentType != value)
				{
					this.OnPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType = value;
					this.SendPropertyChanged("PaymentType");
					this.OnPaymentTypeChanged();
				}
			}
		}

		[Column(Name = @"NUMBERPLATE", Storage = "_NumberPlate", DbType = "VARCHAR2(10)")]
		public string NumberPlate
		{
			get
			{
				return this._NumberPlate;
			}
			set
			{
				if (this._NumberPlate != value)
				{
					this.OnNumberPlateChanging(value);
					this.SendPropertyChanging();
					this._NumberPlate = value;
					this.SendPropertyChanged("NumberPlate");
					this.OnNumberPlateChanged();
				}
			}
		}

		[Column(Name = @"SELLTYPE", Storage = "_SellType", DbType = "NVARCHAR2(512)")]
		public string SellType
		{
			get
			{
				return this._SellType;
			}
			set
			{
				if (this._SellType != value)
				{
					this.OnSellTypeChanging(value);
					this.SendPropertyChanging();
					this._SellType = value;
					this.SendPropertyChanged("SellType");
					this.OnSellTypeChanged();
				}
			}
		}

		[Column(Name = @"PAYMENTDATE", Storage = "_PaymentDate", DbType = "TIMESTAMP")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if (this._PaymentDate != value)
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}

		[Column(Name = @"NUMPLATERECDATE", Storage = "_NumPlaterecdate", DbType = "TIMESTAMP")]
		public System.Nullable<System.DateTime> NumPlaterecdate
		{
			get
			{
				return this._NumPlaterecdate;
			}
			set
			{
				if (this._NumPlaterecdate != value)
				{
					this.OnNumPlaterecdateChanging(value);
					this.SendPropertyChanging();
					this._NumPlaterecdate = value;
					this.SendPropertyChanged("NumPlaterecdate");
					this.OnNumPlaterecdateChanged();
				}
			}
		}

		[Column(Name = @"COMMENTSELLITEM", Storage = "_CommentSellItem", DbType = "NVARCHAR2(512)")]
		public string CommentSellItem
		{
			get
			{
				return this._CommentSellItem;
			}
			set
			{
				if (this._CommentSellItem != value)
				{
					this.OnCommentSellItemChanging(value);
					this.SendPropertyChanging();
					this._CommentSellItem = value;
					this.SendPropertyChanged("CommentSellItem");
					this.OnCommentSellItemChanged();
				}
			}
		}

		[Association(Name="SaleSellitem_Invoice", Storage="_Invoices", OtherKey="SellItemId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{

				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.SaleSellitem = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.SaleSellitem = null;
		}
	}

	[Table(Name = @"VDMS.DATA_ITEM")]
	public partial class DataItem : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _ItemCode;

		private string _ItemName;

		private string _ColorCode;

		private string _ColorName;

		private string _ItemType;

		private string _DatabaseCode;

		private System.Nullable<decimal> _HTFPrice;

		private System.Nullable<decimal> _DNFPrice;

		private System.Nullable<int> _ForHTF;

		private System.Nullable<int> _ForDNF;

		private EntitySet<DataIteminstance> _DataIteminstances;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnItemCodeChanging(string value);
		partial void OnItemCodeChanged();
		partial void OnItemNameChanging(string value);
		partial void OnItemNameChanged();
		partial void OnColorCodeChanging(string value);
		partial void OnColorCodeChanged();
		partial void OnColorNameChanging(string value);
		partial void OnColorNameChanged();
		partial void OnItemTypeChanging(string value);
		partial void OnItemTypeChanged();
		partial void OnDatabaseCodeChanging(string value);
		partial void OnDatabaseCodeChanged();
		partial void OnHTFPriceChanging(System.Nullable<decimal> value);
		partial void OnHTFPriceChanged();
		partial void OnDNFPriceChanging(System.Nullable<decimal> value);
		partial void OnDNFPriceChanged();
		partial void OnForHTFChanging(System.Nullable<int> value);
		partial void OnForHTFChanged();
		partial void OnForDNFChanging(System.Nullable<int> value);
		partial void OnForDNFChanged();
		#endregion

		public DataItem()
		{
			this._DataIteminstances = new EntitySet<DataIteminstance>(new Action<DataIteminstance>(this.attach_DataIteminstances), new Action<DataIteminstance>(this.detach_DataIteminstances));
			OnCreated();
		}

		[Column(Name = @"ITEMCODE", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL", IsPrimaryKey = true)]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if (this._ItemCode != value)
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}

		[Column(Name = @"ITEMNAME", Storage = "_ItemName", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if (this._ItemName != value)
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}

		[Column(Name = @"COLORCODE", Storage = "_ColorCode", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if (this._ColorCode != value)
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}

		[Column(Name = @"COLORNAME", Storage = "_ColorName", CanBeNull = false, DbType = "NVARCHAR2(60) NOT NULL")]
		public string ColorName
		{
			get
			{
				return this._ColorName;
			}
			set
			{
				if (this._ColorName != value)
				{
					this.OnColorNameChanging(value);
					this.SendPropertyChanging();
					this._ColorName = value;
					this.SendPropertyChanged("ColorName");
					this.OnColorNameChanged();
				}
			}
		}

		[Column(Name = @"ITEMTYPE", Storage = "_ItemType", DbType = "VARCHAR2(50)")]
		public string ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if (this._ItemType != value)
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}

		[Column(Name = @"DATABASECODE", Storage = "_DatabaseCode", DbType = "VARCHAR2(10)")]
		public string DatabaseCode
		{
			get
			{
				return this._DatabaseCode;
			}
			set
			{
				if (this._DatabaseCode != value)
				{
					this.OnDatabaseCodeChanging(value);
					this.SendPropertyChanging();
					this._DatabaseCode = value;
					this.SendPropertyChanged("DatabaseCode");
					this.OnDatabaseCodeChanged();
				}
			}
		}

		[Column(Name = @"HTFPRICE", Storage = "_HTFPrice", DbType = "NUMBER(18)")]
		public System.Nullable<decimal> HTFPrice
		{
			get
			{
				return this._HTFPrice;
			}
			set
			{
				if (this._HTFPrice != value)
				{
					this.OnHTFPriceChanging(value);
					this.SendPropertyChanging();
					this._HTFPrice = value;
					this.SendPropertyChanged("HTFPrice");
					this.OnHTFPriceChanged();
				}
			}
		}

		[Column(Name = @"DNFPRICE", Storage = "_DNFPrice", DbType = "NUMBER(18)")]
		public System.Nullable<decimal> DNFPrice
		{
			get
			{
				return this._DNFPrice;
			}
			set
			{
				if (this._DNFPrice != value)
				{
					this.OnDNFPriceChanging(value);
					this.SendPropertyChanging();
					this._DNFPrice = value;
					this.SendPropertyChanged("DNFPrice");
					this.OnDNFPriceChanged();
				}
			}
		}

		[Column(Name = @"FORHTF", Storage = "_ForHTF", DbType = "NUMBER(1)")]
		public System.Nullable<int> ForHTF
		{
			get
			{
				return this._ForHTF;
			}
			set
			{
				if (this._ForHTF != value)
				{
					this.OnForHTFChanging(value);
					this.SendPropertyChanging();
					this._ForHTF = value;
					this.SendPropertyChanged("ForHTF");
					this.OnForHTFChanged();
				}
			}
		}

		[Column(Name = @"FORDNF", Storage = "_ForDNF", DbType = "NUMBER(1)")]
		public System.Nullable<int> ForDNF
		{
			get
			{
				return this._ForDNF;
			}
			set
			{
				if (this._ForDNF != value)
				{
					this.OnForDNFChanging(value);
					this.SendPropertyChanging();
					this._ForDNF = value;
					this.SendPropertyChanged("ForDNF");
					this.OnForDNFChanged();
				}
			}
		}

		[Association(Name="DataItem_DataIteminstance", Storage="_DataIteminstances", OtherKey="ItemCode")]
		public EntitySet<DataIteminstance> DataIteminstances
		{
			get
			{

				return this._DataIteminstances;
			}
			set
			{
				this._DataIteminstances.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_DataIteminstances(DataIteminstance entity)
		{
			this.SendPropertyChanging();
			entity.DataItem = this;
		}
		
		private void detach_DataIteminstances(DataIteminstance entity)
		{
			this.SendPropertyChanging();
			entity.DataItem = null;
		}
	}
	}
