//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 5/5/2010 1:09:51 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace VDMS.I.Linq
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "DataSource")]
    [ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
    public partial class VehicleDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertSaleBatchinvoicedetail(VDMS.I.Entity.SaleBatchinvoicedetail instance);
        partial void UpdateSaleBatchinvoicedetail(VDMS.I.Entity.SaleBatchinvoicedetail instance);
        partial void DeleteSaleBatchinvoicedetail(VDMS.I.Entity.SaleBatchinvoicedetail instance);
        partial void InsertSaleBatchinvoiceheader(VDMS.I.Entity.SaleBatchinvoiceheader instance);
        partial void UpdateSaleBatchinvoiceheader(VDMS.I.Entity.SaleBatchinvoiceheader instance);
        partial void DeleteSaleBatchinvoiceheader(VDMS.I.Entity.SaleBatchinvoiceheader instance);
        partial void InsertSaleInventory(VDMS.I.Entity.SaleInventory instance);
        partial void UpdateSaleInventory(VDMS.I.Entity.SaleInventory instance);
        partial void DeleteSaleInventory(VDMS.I.Entity.SaleInventory instance);
        partial void InsertSaleInventoryDay(VDMS.I.Entity.SaleInventoryDay instance);
        partial void UpdateSaleInventoryDay(VDMS.I.Entity.SaleInventoryDay instance);
        partial void DeleteSaleInventoryDay(VDMS.I.Entity.SaleInventoryDay instance);
        partial void InsertSaleInventoryLock(VDMS.I.Entity.SaleInventoryLock instance);
        partial void UpdateSaleInventoryLock(VDMS.I.Entity.SaleInventoryLock instance);
        partial void DeleteSaleInventoryLock(VDMS.I.Entity.SaleInventoryLock instance);
        partial void InsertSaleInvoice(VDMS.I.Entity.SaleInvoice instance);
        partial void UpdateSaleInvoice(VDMS.I.Entity.SaleInvoice instance);
        partial void DeleteSaleInvoice(VDMS.I.Entity.SaleInvoice instance);
        partial void InsertOrderDetail(VDMS.I.Entity.OrderDetail instance);
        partial void UpdateOrderDetail(VDMS.I.Entity.OrderDetail instance);
        partial void DeleteOrderDetail(VDMS.I.Entity.OrderDetail instance);
        partial void InsertSalePayment(VDMS.I.Entity.SalePayment instance);
        partial void UpdateSalePayment(VDMS.I.Entity.SalePayment instance);
        partial void DeleteSalePayment(VDMS.I.Entity.SalePayment instance);
        partial void InsertSaleReturnItem(VDMS.I.Entity.SaleReturnItem instance);
        partial void UpdateSaleReturnItem(VDMS.I.Entity.SaleReturnItem instance);
        partial void DeleteSaleReturnItem(VDMS.I.Entity.SaleReturnItem instance);
        partial void InsertSaleSellItem(VDMS.I.Entity.SaleSellItem instance);
        partial void UpdateSaleSellItem(VDMS.I.Entity.SaleSellItem instance);
        partial void DeleteSaleSellItem(VDMS.I.Entity.SaleSellItem instance);
        partial void InsertShippingDetail(VDMS.I.Entity.ShippingDetail instance);
        partial void UpdateShippingDetail(VDMS.I.Entity.ShippingDetail instance);
        partial void DeleteShippingDetail(VDMS.I.Entity.ShippingDetail instance);
        partial void InsertShippingHeader(VDMS.I.Entity.ShippingHeader instance);
        partial void UpdateShippingHeader(VDMS.I.Entity.ShippingHeader instance);
        partial void DeleteShippingHeader(VDMS.I.Entity.ShippingHeader instance);
        partial void InsertSaleTransHistory(VDMS.I.Entity.SaleTransHistory instance);
        partial void UpdateSaleTransHistory(VDMS.I.Entity.SaleTransHistory instance);
        partial void DeleteSaleTransHistory(VDMS.I.Entity.SaleTransHistory instance);
        partial void InsertItem(VDMS.I.Entity.Item instance);
        partial void UpdateItem(VDMS.I.Entity.Item instance);
        partial void DeleteItem(VDMS.I.Entity.Item instance);
        partial void InsertShippingInfo(VDMS.I.Entity.ShippingInfo instance);
        partial void UpdateShippingInfo(VDMS.I.Entity.ShippingInfo instance);
        partial void DeleteShippingInfo(VDMS.I.Entity.ShippingInfo instance);
        partial void InsertItemInstance(VDMS.I.Entity.ItemInstance instance);
        partial void UpdateItemInstance(VDMS.I.Entity.ItemInstance instance);
        partial void DeleteItemInstance(VDMS.I.Entity.ItemInstance instance);
        partial void InsertIShippingDetail(VDMS.I.Entity.IShippingDetail instance);
        partial void UpdateIShippingDetail(VDMS.I.Entity.IShippingDetail instance);
        partial void DeleteIShippingDetail(VDMS.I.Entity.IShippingDetail instance);
        partial void InsertIShippingHeader(VDMS.I.Entity.IShippingHeader instance);
        partial void UpdateIShippingHeader(VDMS.I.Entity.IShippingHeader instance);
        partial void DeleteIShippingHeader(VDMS.I.Entity.IShippingHeader instance);
        partial void InsertIOrderDetail(VDMS.I.Entity.IOrderDetail instance);
        partial void UpdateIOrderDetail(VDMS.I.Entity.IOrderDetail instance);
        partial void DeleteIOrderDetail(VDMS.I.Entity.IOrderDetail instance);
        partial void InsertIOrderHeader(VDMS.I.Entity.IOrderHeader instance);
        partial void UpdateIOrderHeader(VDMS.I.Entity.IOrderHeader instance);
        partial void DeleteIOrderHeader(VDMS.I.Entity.IOrderHeader instance);
        partial void InsertOrderHeader(VDMS.I.Entity.OrderHeader instance);
        partial void UpdateOrderHeader(VDMS.I.Entity.OrderHeader instance);
        partial void DeleteOrderHeader(VDMS.I.Entity.OrderHeader instance);
        partial void InsertSaleOrderPayment(VDMS.I.Entity.SaleOrderPayment instance);
        partial void UpdateSaleOrderPayment(VDMS.I.Entity.SaleOrderPayment instance);
        partial void DeleteSaleOrderPayment(VDMS.I.Entity.SaleOrderPayment instance);
        partial void InsertDealer(VDMS.I.Entity.Dealer instance);
        partial void UpdateDealer(VDMS.I.Entity.Dealer instance);
        partial void DeleteDealer(VDMS.I.Entity.Dealer instance);
        #endregion

        public VehicleDataContext() :
        base(@"User Id=vdms;Password=vdms;Server=vdms;Home=orahome92;Unicode=True;Sid=vdms;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public VehicleDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public VehicleDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public VehicleDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public VehicleDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleBatchinvoicedetail> SaleBatchinvoicedetails
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleBatchinvoicedetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleBatchinvoiceheader> SaleBatchinvoiceheaders
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleBatchinvoiceheader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleInventory> SaleInventories
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleInventory>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleInventoryDay> SaleInventoryDays
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleInventoryDay>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleInventoryLock> SaleInventoryLocks
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleInventoryLock>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleInvoice> SaleInvoices
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleInvoice>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.OrderDetail> OrderDetails
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.OrderDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SalePayment> SalePayments
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SalePayment>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleReturnItem> SaleReturnItems
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleReturnItem>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleSellItem> SaleSellItems
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleSellItem>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.ShippingDetail> ShippingDetails
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.ShippingDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.ShippingHeader> ShippingHeaders
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.ShippingHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleTransHistory> SaleTransHistories
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleTransHistory>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.Item> Items
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.Item>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.ShippingInfo> ShippingInfos
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.ShippingInfo>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.ItemInstance> ItemInstances
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.ItemInstance>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.IShippingDetail> IShippingDetails
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.IShippingDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.IShippingHeader> IShippingHeaders
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.IShippingHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.IOrderDetail> IOrderDetails
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.IOrderDetail>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.IOrderHeader> IOrderHeaders
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.IOrderHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.OrderHeader> OrderHeaders
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.OrderHeader>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.SaleOrderPayment> SaleOrderPayments
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.SaleOrderPayment>();
            }
        }

        public Devart.Data.Linq.Table<VDMS.I.Entity.Dealer> Dealers
        {
            get
            {
                return this.GetTable<VDMS.I.Entity.Dealer>();
            }
        }
    }
}

namespace VDMS.I.Entity
{

    [Table(Name = @"VDMS.SALE_BATCHINVOICEDETAIL")]
    public partial class SaleBatchinvoicedetail : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Batchinvoicedetailid;

        private double _Batchinvoiceheaderid;

        private long _Iteminstanceid;

        private string _Enginenumber;

        private System.DateTime _Createddate;

        private string _Createdby;

        private EntityRef<SaleBatchinvoiceheader> _SaleBatchinvoiceheader;

        private EntityRef<ItemInstance> _ItemInstance;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBatchinvoicedetailidChanging(double value);
        partial void OnBatchinvoicedetailidChanged();
        partial void OnBatchinvoiceheaderidChanging(double value);
        partial void OnBatchinvoiceheaderidChanged();
        partial void OnIteminstanceidChanging(long value);
        partial void OnIteminstanceidChanged();
        partial void OnEnginenumberChanging(string value);
        partial void OnEnginenumberChanged();
        partial void OnCreateddateChanging(System.DateTime value);
        partial void OnCreateddateChanged();
        partial void OnCreatedbyChanging(string value);
        partial void OnCreatedbyChanged();
        #endregion

        public SaleBatchinvoicedetail()
        {
            this._SaleBatchinvoiceheader  = default(EntityRef<SaleBatchinvoiceheader>);
            this._ItemInstance  = default(EntityRef<ItemInstance>);
            OnCreated();
        }

        [Column(Name = @"BATCHINVOICEDETAILID", Storage = "_Batchinvoicedetailid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public double Batchinvoicedetailid
        {
            get
            {
                return this._Batchinvoicedetailid;
            }
            set
            {
                if (this._Batchinvoicedetailid != value)
                {
                    this.OnBatchinvoicedetailidChanging(value);
                    this.SendPropertyChanging();
                    this._Batchinvoicedetailid = value;
                    this.SendPropertyChanged("Batchinvoicedetailid");
                    this.OnBatchinvoicedetailidChanged();
                }
            }
        }

        [Column(Name = @"BATCHINVOICEHEADERID", Storage = "_Batchinvoiceheaderid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public double Batchinvoiceheaderid
        {
            get
            {
                return this._Batchinvoiceheaderid;
            }
            set
            {
                if (this._Batchinvoiceheaderid != value)
                {
                    if (this._SaleBatchinvoiceheader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBatchinvoiceheaderidChanging(value);
                    this.SendPropertyChanging();
                    this._Batchinvoiceheaderid = value;
                    this.SendPropertyChanged("Batchinvoiceheaderid");
                    this.OnBatchinvoiceheaderidChanged();
                }
            }
        }

        [Column(Name = @"ITEMINSTANCEID", Storage = "_Iteminstanceid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Iteminstanceid
        {
            get
            {
                return this._Iteminstanceid;
            }
            set
            {
                if (this._Iteminstanceid != value)
                {
                    if (this._ItemInstance.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIteminstanceidChanging(value);
                    this.SendPropertyChanging();
                    this._Iteminstanceid = value;
                    this.SendPropertyChanged("Iteminstanceid");
                    this.OnIteminstanceidChanged();
                }
            }
        }

        [Column(Name = @"ENGINENUMBER", Storage = "_Enginenumber", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        public string Enginenumber
        {
            get
            {
                return this._Enginenumber;
            }
            set
            {
                if (this._Enginenumber != value)
                {
                    this.OnEnginenumberChanging(value);
                    this.SendPropertyChanging();
                    this._Enginenumber = value;
                    this.SendPropertyChanged("Enginenumber");
                    this.OnEnginenumberChanged();
                }
            }
        }

        [Column(Name = @"CREATEDDATE", Storage = "_Createddate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime Createddate
        {
            get
            {
                return this._Createddate;
            }
            set
            {
                if (this._Createddate != value)
                {
                    this.OnCreateddateChanging(value);
                    this.SendPropertyChanging();
                    this._Createddate = value;
                    this.SendPropertyChanged("Createddate");
                    this.OnCreateddateChanged();
                }
            }
        }

        [Column(Name = @"CREATEDBY", Storage = "_Createdby", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string Createdby
        {
            get
            {
                return this._Createdby;
            }
            set
            {
                if (this._Createdby != value)
                {
                    this.OnCreatedbyChanging(value);
                    this.SendPropertyChanging();
                    this._Createdby = value;
                    this.SendPropertyChanged("Createdby");
                    this.OnCreatedbyChanged();
                }
            }
        }

        [Association(Name="SaleBatchinvoiceheader_SaleBatchinvoicedetail", Storage="_SaleBatchinvoiceheader", ThisKey="Batchinvoiceheaderid", IsForeignKey=true)]
        public SaleBatchinvoiceheader SaleBatchinvoiceheader
        {
            get
            {
                return this._SaleBatchinvoiceheader.Entity;
            }
            set
            {
                SaleBatchinvoiceheader previousValue = this._SaleBatchinvoiceheader.Entity;
                if ((previousValue != value) || (this._SaleBatchinvoiceheader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SaleBatchinvoiceheader.Entity = null;
                        previousValue.SaleBatchinvoicedetails.Remove(this);
                    }
                    this._SaleBatchinvoiceheader.Entity = value;
                    if (value != null)
                    {
                        value.SaleBatchinvoicedetails.Add(this);
                        this._Batchinvoiceheaderid = value.Batchinvoiceheaderid;
                    }
                    else
                    {
                        this._Batchinvoiceheaderid = default(double);
                    }
                    this.SendPropertyChanged("SaleBatchinvoiceheader");
                }
            }
        }

        [Association(Name="ItemInstance_SaleBatchinvoicedetail", Storage="_ItemInstance", ThisKey="Iteminstanceid", IsForeignKey=true)]
        public ItemInstance ItemInstance
        {
            get
            {
                return this._ItemInstance.Entity;
            }
            set
            {
                ItemInstance previousValue = this._ItemInstance.Entity;
                if ((previousValue != value) || (this._ItemInstance.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ItemInstance.Entity = null;
                        previousValue.SaleBatchinvoicedetails.Remove(this);
                    }
                    this._ItemInstance.Entity = value;
                    if (value != null)
                    {
                        value.SaleBatchinvoicedetails.Add(this);
                        this._Iteminstanceid = value.ItemInstanceId;
                    }
                    else
                    {
                        this._Iteminstanceid = default(long);
                    }
                    this.SendPropertyChanged("ItemInstance");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_BATCHINVOICEHEADER")]
    public partial class SaleBatchinvoiceheader : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Batchinvoiceheaderid;

        private long _Sellitemid;

        private double _Subshopid;

        private string _Dealercode;

        private System.DateTime _Createddate;

        private string _Createdby;

        private string _Batchinvoicenumber;

        private EntitySet<SaleBatchinvoicedetail> _SaleBatchinvoicedetails;

        private EntityRef<SaleSellItem> _SaleSellitem;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBatchinvoiceheaderidChanging(double value);
        partial void OnBatchinvoiceheaderidChanged();
        partial void OnSellitemidChanging(long value);
        partial void OnSellitemidChanged();
        partial void OnSubshopidChanging(double value);
        partial void OnSubshopidChanged();
        partial void OnDealercodeChanging(string value);
        partial void OnDealercodeChanged();
        partial void OnCreateddateChanging(System.DateTime value);
        partial void OnCreateddateChanged();
        partial void OnCreatedbyChanging(string value);
        partial void OnCreatedbyChanged();
        partial void OnBatchinvoicenumberChanging(string value);
        partial void OnBatchinvoicenumberChanged();
        #endregion

        public SaleBatchinvoiceheader()
        {
            this._SaleBatchinvoicedetails = new EntitySet<SaleBatchinvoicedetail>(new Action<SaleBatchinvoicedetail>(this.attach_SaleBatchinvoicedetails), new Action<SaleBatchinvoicedetail>(this.detach_SaleBatchinvoicedetails));
            this._SaleSellitem  = default(EntityRef<SaleSellItem>);
            OnCreated();
        }

        [Column(Name = @"BATCHINVOICEHEADERID", Storage = "_Batchinvoiceheaderid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public double Batchinvoiceheaderid
        {
            get
            {
                return this._Batchinvoiceheaderid;
            }
            set
            {
                if (this._Batchinvoiceheaderid != value)
                {
                    this.OnBatchinvoiceheaderidChanging(value);
                    this.SendPropertyChanging();
                    this._Batchinvoiceheaderid = value;
                    this.SendPropertyChanged("Batchinvoiceheaderid");
                    this.OnBatchinvoiceheaderidChanged();
                }
            }
        }

        [Column(Name = @"SELLITEMID", Storage = "_Sellitemid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Sellitemid
        {
            get
            {
                return this._Sellitemid;
            }
            set
            {
                if (this._Sellitemid != value)
                {
                    if (this._SaleSellitem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSellitemidChanging(value);
                    this.SendPropertyChanging();
                    this._Sellitemid = value;
                    this.SendPropertyChanged("Sellitemid");
                    this.OnSellitemidChanged();
                }
            }
        }

        [Column(Name = @"SUBSHOPID", Storage = "_Subshopid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public double Subshopid
        {
            get
            {
                return this._Subshopid;
            }
            set
            {
                if (this._Subshopid != value)
                {
                    this.OnSubshopidChanging(value);
                    this.SendPropertyChanging();
                    this._Subshopid = value;
                    this.SendPropertyChanged("Subshopid");
                    this.OnSubshopidChanged();
                }
            }
        }

        [Column(Name = @"DEALERCODE", Storage = "_Dealercode", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        public string Dealercode
        {
            get
            {
                return this._Dealercode;
            }
            set
            {
                if (this._Dealercode != value)
                {
                    this.OnDealercodeChanging(value);
                    this.SendPropertyChanging();
                    this._Dealercode = value;
                    this.SendPropertyChanged("Dealercode");
                    this.OnDealercodeChanged();
                }
            }
        }

        [Column(Name = @"CREATEDDATE", Storage = "_Createddate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime Createddate
        {
            get
            {
                return this._Createddate;
            }
            set
            {
                if (this._Createddate != value)
                {
                    this.OnCreateddateChanging(value);
                    this.SendPropertyChanging();
                    this._Createddate = value;
                    this.SendPropertyChanged("Createddate");
                    this.OnCreateddateChanged();
                }
            }
        }

        [Column(Name = @"CREATEDBY", Storage = "_Createdby", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string Createdby
        {
            get
            {
                return this._Createdby;
            }
            set
            {
                if (this._Createdby != value)
                {
                    this.OnCreatedbyChanging(value);
                    this.SendPropertyChanging();
                    this._Createdby = value;
                    this.SendPropertyChanged("Createdby");
                    this.OnCreatedbyChanged();
                }
            }
        }

        [Column(Name = @"BATCHINVOICENUMBER", Storage = "_Batchinvoicenumber", DbType = "NVARCHAR2(60)")]
        public string Batchinvoicenumber
        {
            get
            {
                return this._Batchinvoicenumber;
            }
            set
            {
                if (this._Batchinvoicenumber != value)
                {
                    this.OnBatchinvoicenumberChanging(value);
                    this.SendPropertyChanging();
                    this._Batchinvoicenumber = value;
                    this.SendPropertyChanged("Batchinvoicenumber");
                    this.OnBatchinvoicenumberChanged();
                }
            }
        }

        [Association(Name="SaleBatchinvoiceheader_SaleBatchinvoicedetail", Storage="_SaleBatchinvoicedetails", OtherKey="Batchinvoiceheaderid")]
        public EntitySet<SaleBatchinvoicedetail> SaleBatchinvoicedetails
        {
            get
            {
                return this._SaleBatchinvoicedetails;
            }
            set
            {
                this._SaleBatchinvoicedetails.Assign(value);
            }
        }

        [Association(Name="SaleSellItem_SaleBatchinvoiceheader", Storage="_SaleSellitem", ThisKey="Sellitemid", IsForeignKey=true)]
        public SaleSellItem SaleSellitem
        {
            get
            {
                return this._SaleSellitem.Entity;
            }
            set
            {
                SaleSellItem previousValue = this._SaleSellitem.Entity;
                if ((previousValue != value) || (this._SaleSellitem.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SaleSellitem.Entity = null;
                        previousValue.SaleBatchinvoiceheaders.Remove(this);
                    }
                    this._SaleSellitem.Entity = value;
                    if (value != null)
                    {
                        value.SaleBatchinvoiceheaders.Add(this);
                        this._Sellitemid = value.SellItemId;
                    }
                    else
                    {
                        this._Sellitemid = default(long);
                    }
                    this.SendPropertyChanged("SaleSellitem");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SaleBatchinvoicedetails(SaleBatchinvoicedetail entity)
        {
            this.SendPropertyChanging("SaleBatchinvoicedetails");
            entity.SaleBatchinvoiceheader = this;
        }
    
        private void detach_SaleBatchinvoicedetails(SaleBatchinvoicedetail entity)
        {
            this.SendPropertyChanging("SaleBatchinvoicedetails");
            entity.SaleBatchinvoiceheader = null;
        }
    }

    [Table(Name = @"VDMS.SALE_INVENTORY")]
    public partial class SaleInventory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _InventoryId;

        private int _Month;

        private int _Year;

        private string _ItemCode;

        private int _Quantity;

        private string _DealerCode;

        private string _BranchCode;

        private EntityRef<Item> _Item;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInventoryIdChanging(long value);
        partial void OnInventoryIdChanged();
        partial void OnMonthChanging(int value);
        partial void OnMonthChanged();
        partial void OnYearChanging(int value);
        partial void OnYearChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnQuantityChanging(int value);
        partial void OnQuantityChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnBranchCodeChanging(string value);
        partial void OnBranchCodeChanged();
        #endregion

        public SaleInventory()
        {
            this._Item  = default(EntityRef<Item>);
            OnCreated();
        }

        [Column(Name = @"INVENTORYID", Storage = "_InventoryId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long InventoryId
        {
            get
            {
                return this._InventoryId;
            }
            set
            {
                if (this._InventoryId != value)
                {
                    this.OnInventoryIdChanging(value);
                    this.SendPropertyChanging();
                    this._InventoryId = value;
                    this.SendPropertyChanged("InventoryId");
                    this.OnInventoryIdChanged();
                }
            }
        }

        [Column(Name = @"MONTH", Storage = "_Month", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
        public int Month
        {
            get
            {
                return this._Month;
            }
            set
            {
                if (this._Month != value)
                {
                    this.OnMonthChanging(value);
                    this.SendPropertyChanging();
                    this._Month = value;
                    this.SendPropertyChanged("Month");
                    this.OnMonthChanged();
                }
            }
        }

        [Column(Name = @"YEAR", Storage = "_Year", CanBeNull = false, DbType = "NUMBER(4) NOT NULL")]
        public int Year
        {
            get
            {
                return this._Year;
            }
            set
            {
                if (this._Year != value)
                {
                    this.OnYearChanging(value);
                    this.SendPropertyChanging();
                    this._Year = value;
                    this.SendPropertyChanged("Year");
                    this.OnYearChanged();
                }
            }
        }

        [Column(Name = @"ITEMCODE", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    if (this._Item.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"QUANTITY", Storage = "_Quantity", CanBeNull = false, DbType = "NUMBER(5) NOT NULL")]
        public int Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

        [Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"BRANCHCODE", Storage = "_BranchCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if (this._BranchCode != value)
                {
                    this.OnBranchCodeChanging(value);
                    this.SendPropertyChanging();
                    this._BranchCode = value;
                    this.SendPropertyChanged("BranchCode");
                    this.OnBranchCodeChanged();
                }
            }
        }

        [Association(Name="Item_SaleInventory", Storage="_Item", ThisKey="ItemCode", IsForeignKey=true)]
        public Item Item
        {
            get
            {
                return this._Item.Entity;
            }
            set
            {
                Item previousValue = this._Item.Entity;
                if ((previousValue != value) || (this._Item.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Item.Entity = null;
                        previousValue.SaleInventories.Remove(this);
                    }
                    this._Item.Entity = value;
                    if (value != null)
                    {
                        value.SaleInventories.Add(this);
                        this._ItemCode = value.ItemCode;
                    }
                    else
                    {
                        this._ItemCode = default(string);
                    }
                    this.SendPropertyChanged("Item");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_INVENTORYDAY")]
    public partial class SaleInventoryDay : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _InventoryDayId;

        private string _ItemCode;

        private decimal _Quantity;

        private int _ActionType;

        private string _DealerCode;

        private string _BranchCode;

        private double _ActionDay;

        private EntityRef<Item> _Item;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInventoryDayIdChanging(long value);
        partial void OnInventoryDayIdChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnQuantityChanging(decimal value);
        partial void OnQuantityChanged();
        partial void OnActionTypeChanging(int value);
        partial void OnActionTypeChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnBranchCodeChanging(string value);
        partial void OnBranchCodeChanged();
        partial void OnActionDayChanging(double value);
        partial void OnActionDayChanged();
        #endregion

        public SaleInventoryDay()
        {
            this._Item  = default(EntityRef<Item>);
            OnCreated();
        }

        [Column(Name = @"INVENTORYDAYID", Storage = "_InventoryDayId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long InventoryDayId
        {
            get
            {
                return this._InventoryDayId;
            }
            set
            {
                if (this._InventoryDayId != value)
                {
                    this.OnInventoryDayIdChanging(value);
                    this.SendPropertyChanging();
                    this._InventoryDayId = value;
                    this.SendPropertyChanged("InventoryDayId");
                    this.OnInventoryDayIdChanged();
                }
            }
        }

        [Column(Name = @"ITEMCODE", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    if (this._Item.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"QUANTITY", Storage = "_Quantity", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public decimal Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

        [Column(Name = @"ACTIONTYPE", Storage = "_ActionType", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
        public int ActionType
        {
            get
            {
                return this._ActionType;
            }
            set
            {
                if (this._ActionType != value)
                {
                    this.OnActionTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ActionType = value;
                    this.SendPropertyChanged("ActionType");
                    this.OnActionTypeChanged();
                }
            }
        }

        [Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"BRANCHCODE", Storage = "_BranchCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if (this._BranchCode != value)
                {
                    this.OnBranchCodeChanging(value);
                    this.SendPropertyChanging();
                    this._BranchCode = value;
                    this.SendPropertyChanged("BranchCode");
                    this.OnBranchCodeChanged();
                }
            }
        }

        [Column(Name = @"ACTIONDAY", Storage = "_ActionDay", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public double ActionDay
        {
            get
            {
                return this._ActionDay;
            }
            set
            {
                if (this._ActionDay != value)
                {
                    this.OnActionDayChanging(value);
                    this.SendPropertyChanging();
                    this._ActionDay = value;
                    this.SendPropertyChanged("ActionDay");
                    this.OnActionDayChanged();
                }
            }
        }

        [Association(Name="Item_SaleInventoryDay", Storage="_Item", ThisKey="ItemCode", IsForeignKey=true)]
        public Item Item
        {
            get
            {
                return this._Item.Entity;
            }
            set
            {
                Item previousValue = this._Item.Entity;
                if ((previousValue != value) || (this._Item.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Item.Entity = null;
                        previousValue.SaleInventoryDays.Remove(this);
                    }
                    this._Item.Entity = value;
                    if (value != null)
                    {
                        value.SaleInventoryDays.Add(this);
                        this._ItemCode = value.ItemCode;
                    }
                    else
                    {
                        this._ItemCode = default(string);
                    }
                    this.SendPropertyChanged("Item");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_INVENTORYLOCK")]
    public partial class SaleInventoryLock : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _InventoryLockId;

        private decimal _Month;

        private decimal _Year;

        private int _IsLocked;

        private string _DealerCode;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInventoryLockIdChanging(long value);
        partial void OnInventoryLockIdChanged();
        partial void OnMonthChanging(decimal value);
        partial void OnMonthChanged();
        partial void OnYearChanging(decimal value);
        partial void OnYearChanged();
        partial void OnIsLockedChanging(int value);
        partial void OnIsLockedChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        #endregion

        public SaleInventoryLock()
        {
            OnCreated();
        }

        [Column(Name = @"INVENTORYLOCKID", Storage = "_InventoryLockId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long InventoryLockId
        {
            get
            {
                return this._InventoryLockId;
            }
            set
            {
                if (this._InventoryLockId != value)
                {
                    this.OnInventoryLockIdChanging(value);
                    this.SendPropertyChanging();
                    this._InventoryLockId = value;
                    this.SendPropertyChanged("InventoryLockId");
                    this.OnInventoryLockIdChanged();
                }
            }
        }

        [Column(Name = @"MONTH", Storage = "_Month", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public decimal Month
        {
            get
            {
                return this._Month;
            }
            set
            {
                if (this._Month != value)
                {
                    this.OnMonthChanging(value);
                    this.SendPropertyChanging();
                    this._Month = value;
                    this.SendPropertyChanged("Month");
                    this.OnMonthChanged();
                }
            }
        }

        [Column(Name = @"YEAR", Storage = "_Year", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public decimal Year
        {
            get
            {
                return this._Year;
            }
            set
            {
                if (this._Year != value)
                {
                    this.OnYearChanging(value);
                    this.SendPropertyChanging();
                    this._Year = value;
                    this.SendPropertyChanged("Year");
                    this.OnYearChanged();
                }
            }
        }

        [Column(Name = @"ISLOCKED", Storage = "_IsLocked", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public int IsLocked
        {
            get
            {
                return this._IsLocked;
            }
            set
            {
                if (this._IsLocked != value)
                {
                    this.OnIsLockedChanging(value);
                    this.SendPropertyChanging();
                    this._IsLocked = value;
                    this.SendPropertyChanged("IsLocked");
                    this.OnIsLockedChanged();
                }
            }
        }

        [Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_INVOICE")]
    public partial class SaleInvoice : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _InvoiceId;

        private long _ItemInstanceId;

        private long _SellItemId;

        private long _CustomerId;

        private string _EngineNumber;

        private string _DealerCode;

        private System.DateTime _CreatedDate;

        private string _CreatedBy;

        private string _InvoiceNumber;

        private System.DateTime _SellDate;

        private string _BranchCode;

        private EntityRef<SaleSellItem> _SaleSellitem;

        private EntityRef<ItemInstance> _ItemInstance;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnInvoiceIdChanging(long value);
        partial void OnInvoiceIdChanged();
        partial void OnItemInstanceIdChanging(long value);
        partial void OnItemInstanceIdChanged();
        partial void OnSellItemIdChanging(long value);
        partial void OnSellItemIdChanged();
        partial void OnCustomerIdChanging(long value);
        partial void OnCustomerIdChanged();
        partial void OnEngineNumberChanging(string value);
        partial void OnEngineNumberChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnInvoiceNumberChanging(string value);
        partial void OnInvoiceNumberChanged();
        partial void OnSellDateChanging(System.DateTime value);
        partial void OnSellDateChanged();
        partial void OnBranchCodeChanging(string value);
        partial void OnBranchCodeChanged();
        #endregion

        public SaleInvoice()
        {
            this._SaleSellitem  = default(EntityRef<SaleSellItem>);
            this._ItemInstance  = default(EntityRef<ItemInstance>);
            OnCreated();
        }

        [Column(Name = @"INVOICEID", Storage = "_InvoiceId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long InvoiceId
        {
            get
            {
                return this._InvoiceId;
            }
            set
            {
                if (this._InvoiceId != value)
                {
                    this.OnInvoiceIdChanging(value);
                    this.SendPropertyChanging();
                    this._InvoiceId = value;
                    this.SendPropertyChanged("InvoiceId");
                    this.OnInvoiceIdChanged();
                }
            }
        }

        [Column(Name = @"ITEMINSTANCEID", Storage = "_ItemInstanceId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long ItemInstanceId
        {
            get
            {
                return this._ItemInstanceId;
            }
            set
            {
                if (this._ItemInstanceId != value)
                {
                    if (this._ItemInstance.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnItemInstanceIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemInstanceId = value;
                    this.SendPropertyChanged("ItemInstanceId");
                    this.OnItemInstanceIdChanged();
                }
            }
        }

        [Column(Name = @"SELLITEMID", Storage = "_SellItemId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long SellItemId
        {
            get
            {
                return this._SellItemId;
            }
            set
            {
                if (this._SellItemId != value)
                {
                    if (this._SaleSellitem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSellItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._SellItemId = value;
                    this.SendPropertyChanged("SellItemId");
                    this.OnSellItemIdChanged();
                }
            }
        }

        [Column(Name = @"CUSTOMERID", Storage = "_CustomerId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long CustomerId
        {
            get
            {
                return this._CustomerId;
            }
            set
            {
                if (this._CustomerId != value)
                {
                    this.OnCustomerIdChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerId = value;
                    this.SendPropertyChanged("CustomerId");
                    this.OnCustomerIdChanged();
                }
            }
        }

        [Column(Name = @"ENGINENUMBER", Storage = "_EngineNumber", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        public string EngineNumber
        {
            get
            {
                return this._EngineNumber;
            }
            set
            {
                if (this._EngineNumber != value)
                {
                    this.OnEngineNumberChanging(value);
                    this.SendPropertyChanging();
                    this._EngineNumber = value;
                    this.SendPropertyChanged("EngineNumber");
                    this.OnEngineNumberChanged();
                }
            }
        }

        [Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"CREATEDDATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"CREATEDBY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

        [Column(Name = @"INVOICENUMBER", Storage = "_InvoiceNumber", DbType = "VARCHAR2(30)")]
        public string InvoiceNumber
        {
            get
            {
                return this._InvoiceNumber;
            }
            set
            {
                if (this._InvoiceNumber != value)
                {
                    this.OnInvoiceNumberChanging(value);
                    this.SendPropertyChanging();
                    this._InvoiceNumber = value;
                    this.SendPropertyChanged("InvoiceNumber");
                    this.OnInvoiceNumberChanged();
                }
            }
        }

        [Column(Name = @"SELLDATE", Storage = "_SellDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime SellDate
        {
            get
            {
                return this._SellDate;
            }
            set
            {
                if (this._SellDate != value)
                {
                    this.OnSellDateChanging(value);
                    this.SendPropertyChanging();
                    this._SellDate = value;
                    this.SendPropertyChanged("SellDate");
                    this.OnSellDateChanged();
                }
            }
        }

        [Column(Name = @"BRANCHCODE", Storage = "_BranchCode", DbType = "VARCHAR2(30)")]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if (this._BranchCode != value)
                {
                    this.OnBranchCodeChanging(value);
                    this.SendPropertyChanging();
                    this._BranchCode = value;
                    this.SendPropertyChanged("BranchCode");
                    this.OnBranchCodeChanged();
                }
            }
        }

        [Association(Name="SaleSellItem_SaleInvoice", Storage="_SaleSellitem", ThisKey="SellItemId", IsForeignKey=true)]
        public SaleSellItem SaleSellitem
        {
            get
            {
                return this._SaleSellitem.Entity;
            }
            set
            {
                SaleSellItem previousValue = this._SaleSellitem.Entity;
                if ((previousValue != value) || (this._SaleSellitem.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SaleSellitem.Entity = null;
                        previousValue.SaleInvoices.Remove(this);
                    }
                    this._SaleSellitem.Entity = value;
                    if (value != null)
                    {
                        value.SaleInvoices.Add(this);
                        this._SellItemId = value.SellItemId;
                    }
                    else
                    {
                        this._SellItemId = default(long);
                    }
                    this.SendPropertyChanged("SaleSellitem");
                }
            }
        }

        [Association(Name="ItemInstance_SaleInvoice", Storage="_ItemInstance", ThisKey="ItemInstanceId", IsForeignKey=true)]
        public ItemInstance ItemInstance
        {
            get
            {
                return this._ItemInstance.Entity;
            }
            set
            {
                ItemInstance previousValue = this._ItemInstance.Entity;
                if ((previousValue != value) || (this._ItemInstance.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ItemInstance.Entity = null;
                        previousValue.SaleInvoices.Remove(this);
                    }
                    this._ItemInstance.Entity = value;
                    if (value != null)
                    {
                        value.SaleInvoices.Add(this);
                        this._ItemInstanceId = value.ItemInstanceId;
                    }
                    else
                    {
                        this._ItemInstanceId = default(long);
                    }
                    this.SendPropertyChanged("ItemInstance");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_ORDERDETAIL")]
    public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _OrderDetailId;

        private System.DateTime _CreatedDate;

        private string _CreatedBy;

        private System.Nullable<System.DateTime> _LastEditedDate;

        private string _LastEditedBy;

        private long _OrderHeaderId;

        private string _ItemCode;

        private int _OrderQty;

        private System.Nullable<long> _SpecialOfferId;

        private long _UnitPrice;

        private decimal _UnitPriceDiscount;

        private int _OrderPriority;

        private EntityRef<Item> _Item;

        private EntityRef<OrderHeader> _OrderHeader;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderDetailIdChanging(long value);
        partial void OnOrderDetailIdChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnLastEditedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnLastEditedDateChanged();
        partial void OnLastEditedByChanging(string value);
        partial void OnLastEditedByChanged();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnOrderQtyChanging(int value);
        partial void OnOrderQtyChanged();
        partial void OnSpecialOfferIdChanging(System.Nullable<long> value);
        partial void OnSpecialOfferIdChanged();
        partial void OnUnitPriceChanging(long value);
        partial void OnUnitPriceChanged();
        partial void OnUnitPriceDiscountChanging(decimal value);
        partial void OnUnitPriceDiscountChanged();
        partial void OnOrderPriorityChanging(int value);
        partial void OnOrderPriorityChanged();
        #endregion

        public OrderDetail()
        {
            this._Item  = default(EntityRef<Item>);
            this._OrderHeader  = default(EntityRef<OrderHeader>);
            OnCreated();
        }

        [Column(Name = @"ORDERDETAILID", Storage = "_OrderDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long OrderDetailId
        {
            get
            {
                return this._OrderDetailId;
            }
            set
            {
                if (this._OrderDetailId != value)
                {
                    this.OnOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDetailId = value;
                    this.SendPropertyChanged("OrderDetailId");
                    this.OnOrderDetailIdChanged();
                }
            }
        }

        [Column(Name = @"CREATEDDATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"CREATEDBY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

        [Column(Name = @"LASTEDITEDDATE", Storage = "_LastEditedDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> LastEditedDate
        {
            get
            {
                return this._LastEditedDate;
            }
            set
            {
                if (this._LastEditedDate != value)
                {
                    this.OnLastEditedDateChanging(value);
                    this.SendPropertyChanging();
                    this._LastEditedDate = value;
                    this.SendPropertyChanged("LastEditedDate");
                    this.OnLastEditedDateChanged();
                }
            }
        }

        [Column(Name = @"LASTEDITEDBY", Storage = "_LastEditedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string LastEditedBy
        {
            get
            {
                return this._LastEditedBy;
            }
            set
            {
                if (this._LastEditedBy != value)
                {
                    this.OnLastEditedByChanging(value);
                    this.SendPropertyChanging();
                    this._LastEditedBy = value;
                    this.SendPropertyChanged("LastEditedBy");
                    this.OnLastEditedByChanged();
                }
            }
        }

        [Column(Name = @"ORDERID", Storage = "_OrderHeaderId", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    if (this._OrderHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"ITEMCODE", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    if (this._Item.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"ORDERQTY", Storage = "_OrderQty", CanBeNull = false, DbType = "NUMBER(5) NOT NULL")]
        public int OrderQty
        {
            get
            {
                return this._OrderQty;
            }
            set
            {
                if (this._OrderQty != value)
                {
                    this.OnOrderQtyChanging(value);
                    this.SendPropertyChanging();
                    this._OrderQty = value;
                    this.SendPropertyChanged("OrderQty");
                    this.OnOrderQtyChanged();
                }
            }
        }

        [Column(Name = @"SPECIALOFFERID", Storage = "_SpecialOfferId", DbType = "NUMBER(38)")]
        public System.Nullable<long> SpecialOfferId
        {
            get
            {
                return this._SpecialOfferId;
            }
            set
            {
                if (this._SpecialOfferId != value)
                {
                    this.OnSpecialOfferIdChanging(value);
                    this.SendPropertyChanging();
                    this._SpecialOfferId = value;
                    this.SendPropertyChanged("SpecialOfferId");
                    this.OnSpecialOfferIdChanged();
                }
            }
        }

        [Column(Name = @"UNITPRICE", Storage = "_UnitPrice", CanBeNull = false, DbType = "NUMBER(18) NOT NULL")]
        public long UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging();
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        [Column(Name = @"UNITPRICEDISCOUNT", Storage = "_UnitPriceDiscount", CanBeNull = false, DbType = "NUMBER(18) NOT NULL")]
        public decimal UnitPriceDiscount
        {
            get
            {
                return this._UnitPriceDiscount;
            }
            set
            {
                if (this._UnitPriceDiscount != value)
                {
                    this.OnUnitPriceDiscountChanging(value);
                    this.SendPropertyChanging();
                    this._UnitPriceDiscount = value;
                    this.SendPropertyChanged("UnitPriceDiscount");
                    this.OnUnitPriceDiscountChanged();
                }
            }
        }

        [Column(Name = @"ORDERPRIORITY", Storage = "_OrderPriority", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int OrderPriority
        {
            get
            {
                return this._OrderPriority;
            }
            set
            {
                if (this._OrderPriority != value)
                {
                    this.OnOrderPriorityChanging(value);
                    this.SendPropertyChanging();
                    this._OrderPriority = value;
                    this.SendPropertyChanged("OrderPriority");
                    this.OnOrderPriorityChanged();
                }
            }
        }

        [Association(Name="Item_OrderDetail", Storage="_Item", ThisKey="ItemCode", IsForeignKey=true)]
        public Item Item
        {
            get
            {
                return this._Item.Entity;
            }
            set
            {
                Item previousValue = this._Item.Entity;
                if ((previousValue != value) || (this._Item.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Item.Entity = null;
                        previousValue.OrderDetails.Remove(this);
                    }
                    this._Item.Entity = value;
                    if (value != null)
                    {
                        value.OrderDetails.Add(this);
                        this._ItemCode = value.ItemCode;
                    }
                    else
                    {
                        this._ItemCode = default(string);
                    }
                    this.SendPropertyChanged("Item");
                }
            }
        }

        [Association(Name="OrderHeader_OrderDetail", Storage="_OrderHeader", ThisKey="OrderHeaderId", IsForeignKey=true)]
        public OrderHeader OrderHeader
        {
            get
            {
                return this._OrderHeader.Entity;
            }
            set
            {
                OrderHeader previousValue = this._OrderHeader.Entity;
                if ((previousValue != value) || (this._OrderHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._OrderHeader.Entity = null;
                        previousValue.OrderDetails.Remove(this);
                    }
                    this._OrderHeader.Entity = value;
                    if (value != null)
                    {
                        value.OrderDetails.Add(this);
                        this._OrderHeaderId = value.OrderHeaderId;
                    }
                    else
                    {
                        this._OrderHeaderId = default(long);
                    }
                    this.SendPropertyChanged("OrderHeader");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_PAYMENT")]
    public partial class SalePayment : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Paymentid;

        private long _Sellitemid;

        private System.DateTime _Paymentdate;

        private System.Nullable<decimal> _Amount;

        private int _Status;

        private System.Nullable<System.DateTime> _Transferdate;

        private string _Commentpayment;

        private string _Bankaccount;

        private EntityRef<SaleSellItem> _SaleSellitem;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPaymentidChanging(long value);
        partial void OnPaymentidChanged();
        partial void OnSellitemidChanging(long value);
        partial void OnSellitemidChanged();
        partial void OnPaymentdateChanging(System.DateTime value);
        partial void OnPaymentdateChanged();
        partial void OnAmountChanging(System.Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnStatusChanging(int value);
        partial void OnStatusChanged();
        partial void OnTransferdateChanging(System.Nullable<System.DateTime> value);
        partial void OnTransferdateChanged();
        partial void OnCommentpaymentChanging(string value);
        partial void OnCommentpaymentChanged();
        partial void OnBankaccountChanging(string value);
        partial void OnBankaccountChanged();
        #endregion

        public SalePayment()
        {
            this._SaleSellitem  = default(EntityRef<SaleSellItem>);
            OnCreated();
        }

        [Column(Name = @"PAYMENTID", Storage = "_Paymentid", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(38) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Paymentid
        {
            get
            {
                return this._Paymentid;
            }
            set
            {
                if (this._Paymentid != value)
                {
                    this.OnPaymentidChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentid = value;
                    this.SendPropertyChanged("Paymentid");
                    this.OnPaymentidChanged();
                }
            }
        }

        [Column(Name = @"SELLITEMID", Storage = "_Sellitemid", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long Sellitemid
        {
            get
            {
                return this._Sellitemid;
            }
            set
            {
                if (this._Sellitemid != value)
                {
                    if (this._SaleSellitem.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSellitemidChanging(value);
                    this.SendPropertyChanging();
                    this._Sellitemid = value;
                    this.SendPropertyChanged("Sellitemid");
                    this.OnSellitemidChanged();
                }
            }
        }

        [Column(Name = @"PAYMENTDATE", Storage = "_Paymentdate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime Paymentdate
        {
            get
            {
                return this._Paymentdate;
            }
            set
            {
                if (this._Paymentdate != value)
                {
                    this.OnPaymentdateChanging(value);
                    this.SendPropertyChanging();
                    this._Paymentdate = value;
                    this.SendPropertyChanged("Paymentdate");
                    this.OnPaymentdateChanged();
                }
            }
        }

        [Column(Name = @"AMOUNT", Storage = "_Amount", DbType = "NUMBER(38)")]
        public System.Nullable<decimal> Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"TRANSFERDATE", Storage = "_Transferdate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> Transferdate
        {
            get
            {
                return this._Transferdate;
            }
            set
            {
                if (this._Transferdate != value)
                {
                    this.OnTransferdateChanging(value);
                    this.SendPropertyChanging();
                    this._Transferdate = value;
                    this.SendPropertyChanged("Transferdate");
                    this.OnTransferdateChanged();
                }
            }
        }

        [Column(Name = @"COMMENTPAYMENT", Storage = "_Commentpayment", DbType = "NVARCHAR2(1024)")]
        public string Commentpayment
        {
            get
            {
                return this._Commentpayment;
            }
            set
            {
                if (this._Commentpayment != value)
                {
                    this.OnCommentpaymentChanging(value);
                    this.SendPropertyChanging();
                    this._Commentpayment = value;
                    this.SendPropertyChanged("Commentpayment");
                    this.OnCommentpaymentChanged();
                }
            }
        }

        [Column(Name = @"BANKACCOUNT", Storage = "_Bankaccount", DbType = "VARCHAR2(13)")]
        public string Bankaccount
        {
            get
            {
                return this._Bankaccount;
            }
            set
            {
                if (this._Bankaccount != value)
                {
                    this.OnBankaccountChanging(value);
                    this.SendPropertyChanging();
                    this._Bankaccount = value;
                    this.SendPropertyChanged("Bankaccount");
                    this.OnBankaccountChanged();
                }
            }
        }

        [Association(Name="SaleSellItem_SalePayment", Storage="_SaleSellitem", ThisKey="Sellitemid", IsForeignKey=true)]
        public SaleSellItem SaleSellitem
        {
            get
            {
                return this._SaleSellitem.Entity;
            }
            set
            {
                SaleSellItem previousValue = this._SaleSellitem.Entity;
                if ((previousValue != value) || (this._SaleSellitem.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SaleSellitem.Entity = null;
                        previousValue.SalePayments.Remove(this);
                    }
                    this._SaleSellitem.Entity = value;
                    if (value != null)
                    {
                        value.SalePayments.Add(this);
                        this._Sellitemid = value.SellItemId;
                    }
                    else
                    {
                        this._Sellitemid = default(long);
                    }
                    this.SendPropertyChanged("SaleSellitem");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_RETURNITEM")]
    public partial class SaleReturnItem : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ReturnItemId;

        private long _ItemInstanceId;

        private string _ReturnReason;

        private int _Status;

        private string _ReturnNumber;

        private string _VMEPComment;

        private EntityRef<ItemInstance> _ItemInstance;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnReturnItemIdChanging(long value);
        partial void OnReturnItemIdChanged();
        partial void OnItemInstanceIdChanging(long value);
        partial void OnItemInstanceIdChanged();
        partial void OnReturnReasonChanging(string value);
        partial void OnReturnReasonChanged();
        partial void OnStatusChanging(int value);
        partial void OnStatusChanged();
        partial void OnReturnNumberChanging(string value);
        partial void OnReturnNumberChanged();
        partial void OnVMEPCommentChanging(string value);
        partial void OnVMEPCommentChanged();
        #endregion

        public SaleReturnItem()
        {
            this._ItemInstance  = default(EntityRef<ItemInstance>);
            OnCreated();
        }

        [Column(Name = @"RETURNITEMID", Storage = "_ReturnItemId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long ReturnItemId
        {
            get
            {
                return this._ReturnItemId;
            }
            set
            {
                if (this._ReturnItemId != value)
                {
                    this.OnReturnItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnItemId = value;
                    this.SendPropertyChanged("ReturnItemId");
                    this.OnReturnItemIdChanged();
                }
            }
        }

        [Column(Name = @"ITEMINSTANCEID", Storage = "_ItemInstanceId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long ItemInstanceId
        {
            get
            {
                return this._ItemInstanceId;
            }
            set
            {
                if (this._ItemInstanceId != value)
                {
                    if (this._ItemInstance.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnItemInstanceIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemInstanceId = value;
                    this.SendPropertyChanged("ItemInstanceId");
                    this.OnItemInstanceIdChanged();
                }
            }
        }

        [Column(Name = @"RETURNREASON", Storage = "_ReturnReason", CanBeNull = false, DbType = "NVARCHAR2(4000) NOT NULL")]
        public string ReturnReason
        {
            get
            {
                return this._ReturnReason;
            }
            set
            {
                if (this._ReturnReason != value)
                {
                    this.OnReturnReasonChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnReason = value;
                    this.SendPropertyChanged("ReturnReason");
                    this.OnReturnReasonChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"RETURNNUMBER", Storage = "_ReturnNumber", DbType = "VARCHAR2(30)")]
        public string ReturnNumber
        {
            get
            {
                return this._ReturnNumber;
            }
            set
            {
                if (this._ReturnNumber != value)
                {
                    this.OnReturnNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnNumber = value;
                    this.SendPropertyChanged("ReturnNumber");
                    this.OnReturnNumberChanged();
                }
            }
        }

        [Column(Name = @"VMEPCOMMENT", Storage = "_VMEPComment", DbType = "NVARCHAR2(4000)")]
        public string VMEPComment
        {
            get
            {
                return this._VMEPComment;
            }
            set
            {
                if (this._VMEPComment != value)
                {
                    this.OnVMEPCommentChanging(value);
                    this.SendPropertyChanging();
                    this._VMEPComment = value;
                    this.SendPropertyChanged("VMEPComment");
                    this.OnVMEPCommentChanged();
                }
            }
        }

        [Association(Name="ItemInstance_SaleReturnItem", Storage="_ItemInstance", ThisKey="ItemInstanceId", IsForeignKey=true)]
        public ItemInstance ItemInstance
        {
            get
            {
                return this._ItemInstance.Entity;
            }
            set
            {
                ItemInstance previousValue = this._ItemInstance.Entity;
                if ((previousValue != value) || (this._ItemInstance.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ItemInstance.Entity = null;
                        previousValue.SaleReturnItems.Remove(this);
                    }
                    this._ItemInstance.Entity = value;
                    if (value != null)
                    {
                        value.SaleReturnItems.Add(this);
                        this._ItemInstanceId = value.ItemInstanceId;
                    }
                    else
                    {
                        this._ItemInstanceId = default(long);
                    }
                    this.SendPropertyChanged("ItemInstance");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_SELLITEM")]
    public partial class SaleSellItem : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _SellItemId;

        private decimal _PriceBeforeTax;

        private int _TaxAmt;

        private int _PaymentType;

        private string _NumberPlate;

        private string _SellType;

        private System.Nullable<System.DateTime> _PaymentDate;

        private System.Nullable<System.DateTime> _Numplaterecdate;

        private string _Commentsellitem;

        private EntitySet<SaleBatchinvoiceheader> _SaleBatchinvoiceheaders;

        private EntitySet<SaleInvoice> _SaleInvoices;

        private EntitySet<SalePayment> _SalePayments;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSellItemIdChanging(long value);
        partial void OnSellItemIdChanged();
        partial void OnPriceBeforeTaxChanging(decimal value);
        partial void OnPriceBeforeTaxChanged();
        partial void OnTaxAmtChanging(int value);
        partial void OnTaxAmtChanged();
        partial void OnPaymentTypeChanging(int value);
        partial void OnPaymentTypeChanged();
        partial void OnNumberPlateChanging(string value);
        partial void OnNumberPlateChanged();
        partial void OnSellTypeChanging(string value);
        partial void OnSellTypeChanged();
        partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPaymentDateChanged();
        partial void OnNumplaterecdateChanging(System.Nullable<System.DateTime> value);
        partial void OnNumplaterecdateChanged();
        partial void OnCommentsellitemChanging(string value);
        partial void OnCommentsellitemChanged();
        #endregion

        public SaleSellItem()
        {
            this._SaleBatchinvoiceheaders = new EntitySet<SaleBatchinvoiceheader>(new Action<SaleBatchinvoiceheader>(this.attach_SaleBatchinvoiceheaders), new Action<SaleBatchinvoiceheader>(this.detach_SaleBatchinvoiceheaders));
            this._SaleInvoices = new EntitySet<SaleInvoice>(new Action<SaleInvoice>(this.attach_SaleInvoices), new Action<SaleInvoice>(this.detach_SaleInvoices));
            this._SalePayments = new EntitySet<SalePayment>(new Action<SalePayment>(this.attach_SalePayments), new Action<SalePayment>(this.detach_SalePayments));
            OnCreated();
        }

        [Column(Name = @"SELLITEMID", Storage = "_SellItemId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long SellItemId
        {
            get
            {
                return this._SellItemId;
            }
            set
            {
                if (this._SellItemId != value)
                {
                    this.OnSellItemIdChanging(value);
                    this.SendPropertyChanging();
                    this._SellItemId = value;
                    this.SendPropertyChanged("SellItemId");
                    this.OnSellItemIdChanged();
                }
            }
        }

        [Column(Name = @"PRICEBEFORETAX", Storage = "_PriceBeforeTax", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public decimal PriceBeforeTax
        {
            get
            {
                return this._PriceBeforeTax;
            }
            set
            {
                if (this._PriceBeforeTax != value)
                {
                    this.OnPriceBeforeTaxChanging(value);
                    this.SendPropertyChanging();
                    this._PriceBeforeTax = value;
                    this.SendPropertyChanged("PriceBeforeTax");
                    this.OnPriceBeforeTaxChanged();
                }
            }
        }

        [Column(Name = @"TAXAMT", Storage = "_TaxAmt", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int TaxAmt
        {
            get
            {
                return this._TaxAmt;
            }
            set
            {
                if (this._TaxAmt != value)
                {
                    this.OnTaxAmtChanging(value);
                    this.SendPropertyChanging();
                    this._TaxAmt = value;
                    this.SendPropertyChanged("TaxAmt");
                    this.OnTaxAmtChanged();
                }
            }
        }

        [Column(Name = @"PAYMENTTYPE", Storage = "_PaymentType", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public int PaymentType
        {
            get
            {
                return this._PaymentType;
            }
            set
            {
                if (this._PaymentType != value)
                {
                    this.OnPaymentTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentType = value;
                    this.SendPropertyChanged("PaymentType");
                    this.OnPaymentTypeChanged();
                }
            }
        }

        [Column(Name = @"NUMBERPLATE", Storage = "_NumberPlate", DbType = "VARCHAR2(10)")]
        public string NumberPlate
        {
            get
            {
                return this._NumberPlate;
            }
            set
            {
                if (this._NumberPlate != value)
                {
                    this.OnNumberPlateChanging(value);
                    this.SendPropertyChanging();
                    this._NumberPlate = value;
                    this.SendPropertyChanged("NumberPlate");
                    this.OnNumberPlateChanged();
                }
            }
        }

        [Column(Name = @"SELLTYPE", Storage = "_SellType", DbType = "NVARCHAR2(512)")]
        public string SellType
        {
            get
            {
                return this._SellType;
            }
            set
            {
                if (this._SellType != value)
                {
                    this.OnSellTypeChanging(value);
                    this.SendPropertyChanging();
                    this._SellType = value;
                    this.SendPropertyChanged("SellType");
                    this.OnSellTypeChanged();
                }
            }
        }

        [Column(Name = @"PAYMENTDATE", Storage = "_PaymentDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> PaymentDate
        {
            get
            {
                return this._PaymentDate;
            }
            set
            {
                if (this._PaymentDate != value)
                {
                    this.OnPaymentDateChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentDate = value;
                    this.SendPropertyChanged("PaymentDate");
                    this.OnPaymentDateChanged();
                }
            }
        }

        [Column(Name = @"NUMPLATERECDATE", Storage = "_Numplaterecdate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> Numplaterecdate
        {
            get
            {
                return this._Numplaterecdate;
            }
            set
            {
                if (this._Numplaterecdate != value)
                {
                    this.OnNumplaterecdateChanging(value);
                    this.SendPropertyChanging();
                    this._Numplaterecdate = value;
                    this.SendPropertyChanged("Numplaterecdate");
                    this.OnNumplaterecdateChanged();
                }
            }
        }

        [Column(Name = @"COMMENTSELLITEM", Storage = "_Commentsellitem", DbType = "NVARCHAR2(512)")]
        public string Commentsellitem
        {
            get
            {
                return this._Commentsellitem;
            }
            set
            {
                if (this._Commentsellitem != value)
                {
                    this.OnCommentsellitemChanging(value);
                    this.SendPropertyChanging();
                    this._Commentsellitem = value;
                    this.SendPropertyChanged("Commentsellitem");
                    this.OnCommentsellitemChanged();
                }
            }
        }

        [Association(Name="SaleSellItem_SaleBatchinvoiceheader", Storage="_SaleBatchinvoiceheaders", OtherKey="Sellitemid")]
        public EntitySet<SaleBatchinvoiceheader> SaleBatchinvoiceheaders
        {
            get
            {
                return this._SaleBatchinvoiceheaders;
            }
            set
            {
                this._SaleBatchinvoiceheaders.Assign(value);
            }
        }

        [Association(Name="SaleSellItem_SaleInvoice", Storage="_SaleInvoices", OtherKey="SellItemId")]
        public EntitySet<SaleInvoice> SaleInvoices
        {
            get
            {
                return this._SaleInvoices;
            }
            set
            {
                this._SaleInvoices.Assign(value);
            }
        }

        [Association(Name="SaleSellItem_SalePayment", Storage="_SalePayments", OtherKey="Sellitemid")]
        public EntitySet<SalePayment> SalePayments
        {
            get
            {
                return this._SalePayments;
            }
            set
            {
                this._SalePayments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SaleBatchinvoiceheaders(SaleBatchinvoiceheader entity)
        {
            this.SendPropertyChanging("SaleBatchinvoiceheaders");
            entity.SaleSellitem = this;
        }
    
        private void detach_SaleBatchinvoiceheaders(SaleBatchinvoiceheader entity)
        {
            this.SendPropertyChanging("SaleBatchinvoiceheaders");
            entity.SaleSellitem = null;
        }

        private void attach_SaleInvoices(SaleInvoice entity)
        {
            this.SendPropertyChanging("SaleInvoices");
            entity.SaleSellitem = this;
        }
    
        private void detach_SaleInvoices(SaleInvoice entity)
        {
            this.SendPropertyChanging("SaleInvoices");
            entity.SaleSellitem = null;
        }

        private void attach_SalePayments(SalePayment entity)
        {
            this.SendPropertyChanging("SalePayments");
            entity.SaleSellitem = this;
        }
    
        private void detach_SalePayments(SalePayment entity)
        {
            this.SendPropertyChanging("SalePayments");
            entity.SaleSellitem = null;
        }
    }

    [Table(Name = @"VDMS.SALE_SHIPPINGDETAIL")]
    public partial class ShippingDetail : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ShippingDetailId;

        private long _ShippingId;

        private System.Nullable<long> _ProductInstanceId;

        private int _Status;

        private string _OrderNumber;

        private int _VoucherStatus;

        private string _Exception;

        private string _EngineNumber;

        private string _ItemType;

        private string _Color;

        private string _BranchCode;

        private string _ItemCode;

        private string _VMEPResponse;

        private System.Nullable<System.DateTime> _VMEPResponseDate;

        private EntityRef<ShippingHeader> _ShippingHeader;

        private EntityRef<Item> _Item;

        private EntityRef<ItemInstance> _ItemInstance;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnShippingDetailIdChanging(long value);
        partial void OnShippingDetailIdChanged();
        partial void OnShippingIdChanging(long value);
        partial void OnShippingIdChanged();
        partial void OnProductInstanceIdChanging(System.Nullable<long> value);
        partial void OnProductInstanceIdChanged();
        partial void OnStatusChanging(int value);
        partial void OnStatusChanged();
        partial void OnOrderNumberChanging(string value);
        partial void OnOrderNumberChanged();
        partial void OnVoucherStatusChanging(int value);
        partial void OnVoucherStatusChanged();
        partial void OnExceptionChanging(string value);
        partial void OnExceptionChanged();
        partial void OnEngineNumberChanging(string value);
        partial void OnEngineNumberChanged();
        partial void OnItemTypeChanging(string value);
        partial void OnItemTypeChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnBranchCodeChanging(string value);
        partial void OnBranchCodeChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnVMEPResponseChanging(string value);
        partial void OnVMEPResponseChanged();
        partial void OnVMEPResponseDateChanging(System.Nullable<System.DateTime> value);
        partial void OnVMEPResponseDateChanged();
        #endregion

        public ShippingDetail()
        {
            this._ShippingHeader  = default(EntityRef<ShippingHeader>);
            this._Item  = default(EntityRef<Item>);
            this._ItemInstance  = default(EntityRef<ItemInstance>);
            OnCreated();
        }

        [Column(Name = @"SHIPPINGDETAILID", Storage = "_ShippingDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ShippingDetailId
        {
            get
            {
                return this._ShippingDetailId;
            }
            set
            {
                if (this._ShippingDetailId != value)
                {
                    this.OnShippingDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingDetailId = value;
                    this.SendPropertyChanged("ShippingDetailId");
                    this.OnShippingDetailIdChanged();
                }
            }
        }

        [Column(Name = @"SHIPPINGID", Storage = "_ShippingId", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long ShippingId
        {
            get
            {
                return this._ShippingId;
            }
            set
            {
                if (this._ShippingId != value)
                {
                    if (this._ShippingHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShippingIdChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingId = value;
                    this.SendPropertyChanged("ShippingId");
                    this.OnShippingIdChanged();
                }
            }
        }

        [Column(Name = @"PRODUCTINSTANCEID", Storage = "_ProductInstanceId", DbType = "NUMBER(38)")]
        public System.Nullable<long> ProductInstanceId
        {
            get
            {
                return this._ProductInstanceId;
            }
            set
            {
                if (this._ProductInstanceId != value)
                {
                    if (this._ItemInstance.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductInstanceIdChanging(value);
                    this.SendPropertyChanging();
                    this._ProductInstanceId = value;
                    this.SendPropertyChanged("ProductInstanceId");
                    this.OnProductInstanceIdChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"ORDERNUMBER", Storage = "_OrderNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if (this._OrderNumber != value)
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [Column(Name = @"VOUCHERSTATUS", Storage = "_VoucherStatus", CanBeNull = false, DbType = "NUMBER(1) NOT NULL")]
        public int VoucherStatus
        {
            get
            {
                return this._VoucherStatus;
            }
            set
            {
                if (this._VoucherStatus != value)
                {
                    this.OnVoucherStatusChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherStatus = value;
                    this.SendPropertyChanged("VoucherStatus");
                    this.OnVoucherStatusChanged();
                }
            }
        }

        [Column(Name = @"EXCEPTION", Storage = "_Exception", DbType = "NVARCHAR2(4000)")]
        public string Exception
        {
            get
            {
                return this._Exception;
            }
            set
            {
                if (this._Exception != value)
                {
                    this.OnExceptionChanging(value);
                    this.SendPropertyChanging();
                    this._Exception = value;
                    this.SendPropertyChanged("Exception");
                    this.OnExceptionChanged();
                }
            }
        }

        [Column(Name = @"ENGINENUMBER", Storage = "_EngineNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string EngineNumber
        {
            get
            {
                return this._EngineNumber;
            }
            set
            {
                if (this._EngineNumber != value)
                {
                    this.OnEngineNumberChanging(value);
                    this.SendPropertyChanging();
                    this._EngineNumber = value;
                    this.SendPropertyChanged("EngineNumber");
                    this.OnEngineNumberChanged();
                }
            }
        }

        [Column(Name = @"ITEMTYPE", Storage = "_ItemType", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string ItemType
        {
            get
            {
                return this._ItemType;
            }
            set
            {
                if (this._ItemType != value)
                {
                    this.OnItemTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemType = value;
                    this.SendPropertyChanged("ItemType");
                    this.OnItemTypeChanged();
                }
            }
        }

        [Column(Name = @"COLOR", Storage = "_Color", CanBeNull = false, DbType = "NVARCHAR2(60) NOT NULL")]
        public string Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if (this._Color != value)
                {
                    this.OnColorChanging(value);
                    this.SendPropertyChanging();
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

        [Column(Name = @"BRANCHCODE", Storage = "_BranchCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if (this._BranchCode != value)
                {
                    this.OnBranchCodeChanging(value);
                    this.SendPropertyChanging();
                    this._BranchCode = value;
                    this.SendPropertyChanged("BranchCode");
                    this.OnBranchCodeChanged();
                }
            }
        }

        [Column(Name = @"ITEMCODE", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    if (this._Item.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"VMEPRESPONSE", Storage = "_VMEPResponse", DbType = "NVARCHAR2(4000)")]
        public string VMEPResponse
        {
            get
            {
                return this._VMEPResponse;
            }
            set
            {
                if (this._VMEPResponse != value)
                {
                    this.OnVMEPResponseChanging(value);
                    this.SendPropertyChanging();
                    this._VMEPResponse = value;
                    this.SendPropertyChanged("VMEPResponse");
                    this.OnVMEPResponseChanged();
                }
            }
        }

        [Column(Name = @"VMEPRESPONSEDATE", Storage = "_VMEPResponseDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> VMEPResponseDate
        {
            get
            {
                return this._VMEPResponseDate;
            }
            set
            {
                if (this._VMEPResponseDate != value)
                {
                    this.OnVMEPResponseDateChanging(value);
                    this.SendPropertyChanging();
                    this._VMEPResponseDate = value;
                    this.SendPropertyChanged("VMEPResponseDate");
                    this.OnVMEPResponseDateChanged();
                }
            }
        }

        [Association(Name="ShippingHeader_ShippingDetail", Storage="_ShippingHeader", ThisKey="ShippingId", IsForeignKey=true)]
        public ShippingHeader ShippingHeader
        {
            get
            {
                return this._ShippingHeader.Entity;
            }
            set
            {
                ShippingHeader previousValue = this._ShippingHeader.Entity;
                if ((previousValue != value) || (this._ShippingHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ShippingHeader.Entity = null;
                        previousValue.ShippingDetails.Remove(this);
                    }
                    this._ShippingHeader.Entity = value;
                    if (value != null)
                    {
                        value.ShippingDetails.Add(this);
                        this._ShippingId = value.ShippingId;
                    }
                    else
                    {
                        this._ShippingId = default(long);
                    }
                    this.SendPropertyChanged("ShippingHeader");
                }
            }
        }

        [Association(Name="Item_ShippingDetail", Storage="_Item", ThisKey="ItemCode", IsForeignKey=true)]
        public Item Item
        {
            get
            {
                return this._Item.Entity;
            }
            set
            {
                Item previousValue = this._Item.Entity;
                if ((previousValue != value) || (this._Item.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Item.Entity = null;
                        previousValue.ShippingDetails.Remove(this);
                    }
                    this._Item.Entity = value;
                    if (value != null)
                    {
                        value.ShippingDetails.Add(this);
                        this._ItemCode = value.ItemCode;
                    }
                    else
                    {
                        this._ItemCode = default(string);
                    }
                    this.SendPropertyChanged("Item");
                }
            }
        }

        [Association(Name="ItemInstance_ShippingDetail", Storage="_ItemInstance", ThisKey="ProductInstanceId", IsForeignKey=true)]
        public ItemInstance ItemInstance
        {
            get
            {
                return this._ItemInstance.Entity;
            }
            set
            {
                ItemInstance previousValue = this._ItemInstance.Entity;
                if ((previousValue != value) || (this._ItemInstance.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ItemInstance.Entity = null;
                        previousValue.ShippingDetails.Remove(this);
                    }
                    this._ItemInstance.Entity = value;
                    if (value != null)
                    {
                        value.ShippingDetails.Add(this);
                        this._ProductInstanceId = value.ItemInstanceId;
                    }
                    else
                    {
                        this._ProductInstanceId = default(System.Nullable<long>);
                    }
                    this.SendPropertyChanged("ItemInstance");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_SHIPPINGHEADER")]
    public partial class ShippingHeader : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ShippingId;

        private System.DateTime _CreatedDate;

        private string _CreatedBy;

        private string _DealerCode;

        private string _ShippingNumber;

        private System.DateTime _ShippingDate;

        private string _ShippingTo;

        private int _ItemCount;

        private string _AreaCode;

        private EntitySet<ShippingDetail> _ShippingDetails;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnShippingIdChanging(long value);
        partial void OnShippingIdChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnShippingNumberChanging(string value);
        partial void OnShippingNumberChanged();
        partial void OnShippingDateChanging(System.DateTime value);
        partial void OnShippingDateChanged();
        partial void OnShippingToChanging(string value);
        partial void OnShippingToChanged();
        partial void OnItemCountChanging(int value);
        partial void OnItemCountChanged();
        partial void OnAreaCodeChanging(string value);
        partial void OnAreaCodeChanged();
        #endregion

        public ShippingHeader()
        {
            this._ShippingDetails = new EntitySet<ShippingDetail>(new Action<ShippingDetail>(this.attach_ShippingDetails), new Action<ShippingDetail>(this.detach_ShippingDetails));
            OnCreated();
        }

        [Column(Name = @"SHIPPINGID", Storage = "_ShippingId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
        public long ShippingId
        {
            get
            {
                return this._ShippingId;
            }
            set
            {
                if (this._ShippingId != value)
                {
                    this.OnShippingIdChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingId = value;
                    this.SendPropertyChanged("ShippingId");
                    this.OnShippingIdChanged();
                }
            }
        }

        [Column(Name = @"CREATEDDATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"CREATEDBY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

        [Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"SHIPPINGNUMBER", Storage = "_ShippingNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string ShippingNumber
        {
            get
            {
                return this._ShippingNumber;
            }
            set
            {
                if (this._ShippingNumber != value)
                {
                    this.OnShippingNumberChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingNumber = value;
                    this.SendPropertyChanged("ShippingNumber");
                    this.OnShippingNumberChanged();
                }
            }
        }

        [Column(Name = @"SHIPPINGDATE", Storage = "_ShippingDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ShippingDate
        {
            get
            {
                return this._ShippingDate;
            }
            set
            {
                if (this._ShippingDate != value)
                {
                    this.OnShippingDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingDate = value;
                    this.SendPropertyChanged("ShippingDate");
                    this.OnShippingDateChanged();
                }
            }
        }

        [Column(Name = @"SHIPPINGTO", Storage = "_ShippingTo", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string ShippingTo
        {
            get
            {
                return this._ShippingTo;
            }
            set
            {
                if (this._ShippingTo != value)
                {
                    this.OnShippingToChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingTo = value;
                    this.SendPropertyChanged("ShippingTo");
                    this.OnShippingToChanged();
                }
            }
        }

        [Column(Name = @"ITEMCOUNT", Storage = "_ItemCount", CanBeNull = false, DbType = "NUMBER(5) NOT NULL")]
        public int ItemCount
        {
            get
            {
                return this._ItemCount;
            }
            set
            {
                if (this._ItemCount != value)
                {
                    this.OnItemCountChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCount = value;
                    this.SendPropertyChanged("ItemCount");
                    this.OnItemCountChanged();
                }
            }
        }

        [Column(Name = @"AREACODE", Storage = "_AreaCode", CanBeNull = false, DbType = "VARCHAR2(10) NOT NULL")]
        public string AreaCode
        {
            get
            {
                return this._AreaCode;
            }
            set
            {
                if (this._AreaCode != value)
                {
                    this.OnAreaCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AreaCode = value;
                    this.SendPropertyChanged("AreaCode");
                    this.OnAreaCodeChanged();
                }
            }
        }

        [Association(Name="ShippingHeader_ShippingDetail", Storage="_ShippingDetails", OtherKey="ShippingId")]
        public EntitySet<ShippingDetail> ShippingDetails
        {
            get
            {
                return this._ShippingDetails;
            }
            set
            {
                this._ShippingDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ShippingDetails(ShippingDetail entity)
        {
            this.SendPropertyChanging("ShippingDetails");
            entity.ShippingHeader = this;
        }
    
        private void detach_ShippingDetails(ShippingDetail entity)
        {
            this.SendPropertyChanging("ShippingDetails");
            entity.ShippingHeader = null;
        }
    }

    [Table(Name = @"VDMS.SALE_TRANSHIS")]
    public partial class SaleTransHistory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _TransactionId;

        private System.Nullable<long> _ReferenceOrderId;

        private int _TransactionType;

        private System.DateTime _TransactionDate;

        private decimal _ActualCost;

        private System.DateTime _ModifiedDate;

        private string _FromBranch;

        private string _ToBranch;

        private long _ItemInstanceId;

        private string _ModifiedBy;

        private string _OldEngineNo;

        private EntityRef<ItemInstance> _ItemInstance;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnTransactionIdChanging(long value);
        partial void OnTransactionIdChanged();
        partial void OnReferenceOrderIdChanging(System.Nullable<long> value);
        partial void OnReferenceOrderIdChanged();
        partial void OnTransactionTypeChanging(int value);
        partial void OnTransactionTypeChanged();
        partial void OnTransactionDateChanging(System.DateTime value);
        partial void OnTransactionDateChanged();
        partial void OnActualCostChanging(decimal value);
        partial void OnActualCostChanged();
        partial void OnModifiedDateChanging(System.DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnFromBranchChanging(string value);
        partial void OnFromBranchChanged();
        partial void OnToBranchChanging(string value);
        partial void OnToBranchChanged();
        partial void OnItemInstanceIdChanging(long value);
        partial void OnItemInstanceIdChanged();
        partial void OnModifiedByChanging(string value);
        partial void OnModifiedByChanged();
        partial void OnOldEngineNoChanging(string value);
        partial void OnOldEngineNoChanged();
        #endregion

        public SaleTransHistory()
        {
            this._ItemInstance  = default(EntityRef<ItemInstance>);
            OnCreated();
        }

        [Column(Name = @"TRANSACTIONID", Storage = "_TransactionId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long TransactionId
        {
            get
            {
                return this._TransactionId;
            }
            set
            {
                if (this._TransactionId != value)
                {
                    this.OnTransactionIdChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionId = value;
                    this.SendPropertyChanged("TransactionId");
                    this.OnTransactionIdChanged();
                }
            }
        }

        [Column(Name = @"REFERENCEORDERID", Storage = "_ReferenceOrderId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ReferenceOrderId
        {
            get
            {
                return this._ReferenceOrderId;
            }
            set
            {
                if (this._ReferenceOrderId != value)
                {
                    this.OnReferenceOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReferenceOrderId = value;
                    this.SendPropertyChanged("ReferenceOrderId");
                    this.OnReferenceOrderIdChanged();
                }
            }
        }

        [Column(Name = @"TRANSACTIONTYPE", Storage = "_TransactionType", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int TransactionType
        {
            get
            {
                return this._TransactionType;
            }
            set
            {
                if (this._TransactionType != value)
                {
                    this.OnTransactionTypeChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionType = value;
                    this.SendPropertyChanged("TransactionType");
                    this.OnTransactionTypeChanged();
                }
            }
        }

        [Column(Name = @"TRANSACTIONDATE", Storage = "_TransactionDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this.SendPropertyChanging();
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

        [Column(Name = @"ACTUALCOST", Storage = "_ActualCost", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public decimal ActualCost
        {
            get
            {
                return this._ActualCost;
            }
            set
            {
                if (this._ActualCost != value)
                {
                    this.OnActualCostChanging(value);
                    this.SendPropertyChanging();
                    this._ActualCost = value;
                    this.SendPropertyChanged("ActualCost");
                    this.OnActualCostChanged();
                }
            }
        }

        [Column(Name = @"MODIFIEDDATE", Storage = "_ModifiedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ModifiedDate
        {
            get
            {
                return this._ModifiedDate;
            }
            set
            {
                if (this._ModifiedDate != value)
                {
                    this.OnModifiedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModifiedDate = value;
                    this.SendPropertyChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }

        [Column(Name = @"FROMBRANCH", Storage = "_FromBranch", DbType = "VARCHAR2(30)")]
        public string FromBranch
        {
            get
            {
                return this._FromBranch;
            }
            set
            {
                if (this._FromBranch != value)
                {
                    this.OnFromBranchChanging(value);
                    this.SendPropertyChanging();
                    this._FromBranch = value;
                    this.SendPropertyChanged("FromBranch");
                    this.OnFromBranchChanged();
                }
            }
        }

        [Column(Name = @"TOBRANCH", Storage = "_ToBranch", DbType = "VARCHAR2(30)")]
        public string ToBranch
        {
            get
            {
                return this._ToBranch;
            }
            set
            {
                if (this._ToBranch != value)
                {
                    this.OnToBranchChanging(value);
                    this.SendPropertyChanging();
                    this._ToBranch = value;
                    this.SendPropertyChanged("ToBranch");
                    this.OnToBranchChanged();
                }
            }
        }

        [Column(Name = @"ITEMINSTANCEID", Storage = "_ItemInstanceId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long ItemInstanceId
        {
            get
            {
                return this._ItemInstanceId;
            }
            set
            {
                if (this._ItemInstanceId != value)
                {
                    if (this._ItemInstance.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnItemInstanceIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemInstanceId = value;
                    this.SendPropertyChanged("ItemInstanceId");
                    this.OnItemInstanceIdChanged();
                }
            }
        }

        [Column(Name = @"MODIFIEDBY", Storage = "_ModifiedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string ModifiedBy
        {
            get
            {
                return this._ModifiedBy;
            }
            set
            {
                if (this._ModifiedBy != value)
                {
                    this.OnModifiedByChanging(value);
                    this.SendPropertyChanging();
                    this._ModifiedBy = value;
                    this.SendPropertyChanged("ModifiedBy");
                    this.OnModifiedByChanged();
                }
            }
        }

        [Column(Name = @"OLDENGINENO", Storage = "_OldEngineNo", DbType = "VARCHAR2(20)")]
        public string OldEngineNo
        {
            get
            {
                return this._OldEngineNo;
            }
            set
            {
                if (this._OldEngineNo != value)
                {
                    this.OnOldEngineNoChanging(value);
                    this.SendPropertyChanging();
                    this._OldEngineNo = value;
                    this.SendPropertyChanged("OldEngineNo");
                    this.OnOldEngineNoChanged();
                }
            }
        }

        [Association(Name="ItemInstance_SaleTransHistory", Storage="_ItemInstance", ThisKey="ItemInstanceId", IsForeignKey=true)]
        public ItemInstance ItemInstance
        {
            get
            {
                return this._ItemInstance.Entity;
            }
            set
            {
                ItemInstance previousValue = this._ItemInstance.Entity;
                if ((previousValue != value) || (this._ItemInstance.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ItemInstance.Entity = null;
                        previousValue.SaleTransHistories.Remove(this);
                    }
                    this._ItemInstance.Entity = value;
                    if (value != null)
                    {
                        value.SaleTransHistories.Add(this);
                        this._ItemInstanceId = value.ItemInstanceId;
                    }
                    else
                    {
                        this._ItemInstanceId = default(long);
                    }
                    this.SendPropertyChanged("ItemInstance");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.DATA_ITEM")]
    public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _ItemCode;

        private string _ItemName;

        private string _ColorCode;

        private string _ColorName;

        private string _ItemType;

        private string _DatabaseCode;

        private System.Nullable<decimal> _HTFPrice;

        private System.Nullable<decimal> _DNFPrice;

        private System.Nullable<bool> _ForHTF;

        private System.Nullable<bool> _ForDNF;

        private EntitySet<SaleInventory> _SaleInventories;

        private EntitySet<SaleInventoryDay> _SaleInventoryDays;

        private EntitySet<OrderDetail> _OrderDetails;

        private EntitySet<ShippingDetail> _ShippingDetails;

        private EntitySet<ItemInstance> _ItemInstances;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnItemNameChanging(string value);
        partial void OnItemNameChanged();
        partial void OnColorCodeChanging(string value);
        partial void OnColorCodeChanged();
        partial void OnColorNameChanging(string value);
        partial void OnColorNameChanged();
        partial void OnItemTypeChanging(string value);
        partial void OnItemTypeChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnHTFPriceChanging(System.Nullable<decimal> value);
        partial void OnHTFPriceChanged();
        partial void OnDNFPriceChanging(System.Nullable<decimal> value);
        partial void OnDNFPriceChanged();
        partial void OnForHTFChanging(System.Nullable<bool> value);
        partial void OnForHTFChanged();
        partial void OnForDNFChanging(System.Nullable<bool> value);
        partial void OnForDNFChanged();
        #endregion

        public Item()
        {
            this._SaleInventories = new EntitySet<SaleInventory>(new Action<SaleInventory>(this.attach_SaleInventories), new Action<SaleInventory>(this.detach_SaleInventories));
            this._SaleInventoryDays = new EntitySet<SaleInventoryDay>(new Action<SaleInventoryDay>(this.attach_SaleInventoryDays), new Action<SaleInventoryDay>(this.detach_SaleInventoryDays));
            this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
            this._ShippingDetails = new EntitySet<ShippingDetail>(new Action<ShippingDetail>(this.attach_ShippingDetails), new Action<ShippingDetail>(this.detach_ShippingDetails));
            this._ItemInstances = new EntitySet<ItemInstance>(new Action<ItemInstance>(this.attach_ItemInstances), new Action<ItemInstance>(this.detach_ItemInstances));
            OnCreated();
        }

        [Column(Name = @"ITEMCODE", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL", IsPrimaryKey = true)]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"ITEMNAME", Storage = "_ItemName", CanBeNull = false, DbType = "NVARCHAR2(100) NOT NULL")]
        public string ItemName
        {
            get
            {
                return this._ItemName;
            }
            set
            {
                if (this._ItemName != value)
                {
                    this.OnItemNameChanging(value);
                    this.SendPropertyChanging();
                    this._ItemName = value;
                    this.SendPropertyChanged("ItemName");
                    this.OnItemNameChanged();
                }
            }
        }

        [Column(Name = @"COLORCODE", Storage = "_ColorCode", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        public string ColorCode
        {
            get
            {
                return this._ColorCode;
            }
            set
            {
                if (this._ColorCode != value)
                {
                    this.OnColorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ColorCode = value;
                    this.SendPropertyChanged("ColorCode");
                    this.OnColorCodeChanged();
                }
            }
        }

        [Column(Name = @"COLORNAME", Storage = "_ColorName", CanBeNull = false, DbType = "NVARCHAR2(60) NOT NULL")]
        public string ColorName
        {
            get
            {
                return this._ColorName;
            }
            set
            {
                if (this._ColorName != value)
                {
                    this.OnColorNameChanging(value);
                    this.SendPropertyChanging();
                    this._ColorName = value;
                    this.SendPropertyChanged("ColorName");
                    this.OnColorNameChanged();
                }
            }
        }

        [Column(Name = @"ITEMTYPE", Storage = "_ItemType", DbType = "VARCHAR2(50)")]
        public string ItemType
        {
            get
            {
                return this._ItemType;
            }
            set
            {
                if (this._ItemType != value)
                {
                    this.OnItemTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemType = value;
                    this.SendPropertyChanged("ItemType");
                    this.OnItemTypeChanged();
                }
            }
        }

        [Column(Name = @"DATABASECODE", Storage = "_DatabaseCode", DbType = "VARCHAR2(10)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Name = @"HTFPRICE", Storage = "_HTFPrice", DbType = "NUMBER(18)")]
        public System.Nullable<decimal> HTFPrice
        {
            get
            {
                return this._HTFPrice;
            }
            set
            {
                if (this._HTFPrice != value)
                {
                    this.OnHTFPriceChanging(value);
                    this.SendPropertyChanging();
                    this._HTFPrice = value;
                    this.SendPropertyChanged("HTFPrice");
                    this.OnHTFPriceChanged();
                }
            }
        }

        [Column(Name = @"DNFPRICE", Storage = "_DNFPrice", DbType = "NUMBER(18)")]
        public System.Nullable<decimal> DNFPrice
        {
            get
            {
                return this._DNFPrice;
            }
            set
            {
                if (this._DNFPrice != value)
                {
                    this.OnDNFPriceChanging(value);
                    this.SendPropertyChanging();
                    this._DNFPrice = value;
                    this.SendPropertyChanged("DNFPrice");
                    this.OnDNFPriceChanged();
                }
            }
        }

        [Column(Name = @"FORHTF", Storage = "_ForHTF", DbType = "NUMBER(1)")]
        public System.Nullable<bool> ForHTF
        {
            get
            {
                return this._ForHTF;
            }
            set
            {
                if (this._ForHTF != value)
                {
                    this.OnForHTFChanging(value);
                    this.SendPropertyChanging();
                    this._ForHTF = value;
                    this.SendPropertyChanged("ForHTF");
                    this.OnForHTFChanged();
                }
            }
        }

        [Column(Name = @"FORDNF", Storage = "_ForDNF", DbType = "NUMBER(1)")]
        public System.Nullable<bool> ForDNF
        {
            get
            {
                return this._ForDNF;
            }
            set
            {
                if (this._ForDNF != value)
                {
                    this.OnForDNFChanging(value);
                    this.SendPropertyChanging();
                    this._ForDNF = value;
                    this.SendPropertyChanged("ForDNF");
                    this.OnForDNFChanged();
                }
            }
        }

        [Association(Name="Item_SaleInventory", Storage="_SaleInventories", OtherKey="ItemCode")]
        public EntitySet<SaleInventory> SaleInventories
        {
            get
            {
                return this._SaleInventories;
            }
            set
            {
                this._SaleInventories.Assign(value);
            }
        }

        [Association(Name="Item_SaleInventoryDay", Storage="_SaleInventoryDays", OtherKey="ItemCode")]
        public EntitySet<SaleInventoryDay> SaleInventoryDays
        {
            get
            {
                return this._SaleInventoryDays;
            }
            set
            {
                this._SaleInventoryDays.Assign(value);
            }
        }

        [Association(Name="Item_OrderDetail", Storage="_OrderDetails", OtherKey="ItemCode")]
        public EntitySet<OrderDetail> OrderDetails
        {
            get
            {
                return this._OrderDetails;
            }
            set
            {
                this._OrderDetails.Assign(value);
            }
        }

        [Association(Name="Item_ShippingDetail", Storage="_ShippingDetails", OtherKey="ItemCode")]
        public EntitySet<ShippingDetail> ShippingDetails
        {
            get
            {
                return this._ShippingDetails;
            }
            set
            {
                this._ShippingDetails.Assign(value);
            }
        }

        [Association(Name="Item_ItemInstance", Storage="_ItemInstances", OtherKey="ItemCode")]
        public EntitySet<ItemInstance> ItemInstances
        {
            get
            {
                return this._ItemInstances;
            }
            set
            {
                this._ItemInstances.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SaleInventories(SaleInventory entity)
        {
            this.SendPropertyChanging("SaleInventories");
            entity.Item = this;
        }
    
        private void detach_SaleInventories(SaleInventory entity)
        {
            this.SendPropertyChanging("SaleInventories");
            entity.Item = null;
        }

        private void attach_SaleInventoryDays(SaleInventoryDay entity)
        {
            this.SendPropertyChanging("SaleInventoryDays");
            entity.Item = this;
        }
    
        private void detach_SaleInventoryDays(SaleInventoryDay entity)
        {
            this.SendPropertyChanging("SaleInventoryDays");
            entity.Item = null;
        }

        private void attach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Item = this;
        }
    
        private void detach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Item = null;
        }

        private void attach_ShippingDetails(ShippingDetail entity)
        {
            this.SendPropertyChanging("ShippingDetails");
            entity.Item = this;
        }
    
        private void detach_ShippingDetails(ShippingDetail entity)
        {
            this.SendPropertyChanging("ShippingDetails");
            entity.Item = null;
        }

        private void attach_ItemInstances(ItemInstance entity)
        {
            this.SendPropertyChanging("ItemInstances");
            entity.Item = this;
        }
    
        private void detach_ItemInstances(ItemInstance entity)
        {
            this.SendPropertyChanging("ItemInstances");
            entity.Item = null;
        }
    }

    [Table(Name = @"VDMS.VIEW_ALL_OGB_FILE")]
    public partial class ShippingInfo : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Nullable<int> _ShippingQuantity;

        private string _OrderNumber;

        private string _ItemCode;

        private string _DatabaseCode;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnShippingQuantityChanging(System.Nullable<int> value);
        partial void OnShippingQuantityChanged();
        partial void OnOrderNumberChanging(string value);
        partial void OnOrderNumberChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        #endregion

        public ShippingInfo()
        {
            OnCreated();
        }

        [Column(Name = @"SHIPPING_QUANTITY", Storage = "_ShippingQuantity", DbType = "NUMBER(15,3)")]
        public System.Nullable<int> ShippingQuantity
        {
            get
            {
                return this._ShippingQuantity;
            }
            set
            {
                if (this._ShippingQuantity != value)
                {
                    this.OnShippingQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingQuantity = value;
                    this.SendPropertyChanged("ShippingQuantity");
                    this.OnShippingQuantityChanged();
                }
            }
        }

        [Column(Name = @"ORDER_NUMBER", Storage = "_OrderNumber", DbType = "VARCHAR2(10)")]
        public string OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if (this._OrderNumber != value)
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [Column(Name = @"ITEM_CODE", Storage = "_ItemCode", DbType = "VARCHAR2(30)")]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"DATABASE_CODE", Storage = "_DatabaseCode", DbType = "CHAR(3)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.DATA_ITEMINSTANCE")]
    public partial class ItemInstance : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ItemInstanceId;

        private string _ItemCode;

        private string _DealerCode;

        private string _EngineNumber;

        private string _ItemType;

        private string _Color;

        private System.DateTime _ImportedDate;

        private int _Status;

        private System.Nullable<System.DateTime> _MadeDate;

        private string _VMEPInvoice;

        private string _Comments;

        private string _BranchCode;

        private System.DateTime _CreatedDate;

        private System.DateTime _ReleasedDate;

        private string _DatabaseCode;

        private EntitySet<SaleBatchinvoicedetail> _SaleBatchinvoicedetails;

        private EntitySet<SaleInvoice> _SaleInvoices;

        private EntitySet<SaleReturnItem> _SaleReturnItems;

        private EntitySet<ShippingDetail> _ShippingDetails;

        private EntitySet<SaleTransHistory> _SaleTransHistories;

        private EntityRef<Item> _Item;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnItemInstanceIdChanging(long value);
        partial void OnItemInstanceIdChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnEngineNumberChanging(string value);
        partial void OnEngineNumberChanged();
        partial void OnItemTypeChanging(string value);
        partial void OnItemTypeChanged();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnImportedDateChanging(System.DateTime value);
        partial void OnImportedDateChanged();
        partial void OnStatusChanging(int value);
        partial void OnStatusChanged();
        partial void OnMadeDateChanging(System.Nullable<System.DateTime> value);
        partial void OnMadeDateChanged();
        partial void OnVMEPInvoiceChanging(string value);
        partial void OnVMEPInvoiceChanged();
        partial void OnCommentsChanging(string value);
        partial void OnCommentsChanged();
        partial void OnBranchCodeChanging(string value);
        partial void OnBranchCodeChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnReleasedDateChanging(System.DateTime value);
        partial void OnReleasedDateChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        #endregion

        public ItemInstance()
        {
            this._SaleBatchinvoicedetails = new EntitySet<SaleBatchinvoicedetail>(new Action<SaleBatchinvoicedetail>(this.attach_SaleBatchinvoicedetails), new Action<SaleBatchinvoicedetail>(this.detach_SaleBatchinvoicedetails));
            this._SaleInvoices = new EntitySet<SaleInvoice>(new Action<SaleInvoice>(this.attach_SaleInvoices), new Action<SaleInvoice>(this.detach_SaleInvoices));
            this._SaleReturnItems = new EntitySet<SaleReturnItem>(new Action<SaleReturnItem>(this.attach_SaleReturnItems), new Action<SaleReturnItem>(this.detach_SaleReturnItems));
            this._ShippingDetails = new EntitySet<ShippingDetail>(new Action<ShippingDetail>(this.attach_ShippingDetails), new Action<ShippingDetail>(this.detach_ShippingDetails));
            this._SaleTransHistories = new EntitySet<SaleTransHistory>(new Action<SaleTransHistory>(this.attach_SaleTransHistories), new Action<SaleTransHistory>(this.detach_SaleTransHistories));
            this._Item  = default(EntityRef<Item>);
            OnCreated();
        }

        [Column(Name = @"ITEMINSTANCEID", Storage = "_ItemInstanceId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ItemInstanceId
        {
            get
            {
                return this._ItemInstanceId;
            }
            set
            {
                if (this._ItemInstanceId != value)
                {
                    this.OnItemInstanceIdChanging(value);
                    this.SendPropertyChanging();
                    this._ItemInstanceId = value;
                    this.SendPropertyChanged("ItemInstanceId");
                    this.OnItemInstanceIdChanged();
                }
            }
        }

        [Column(Name = @"ITEMCODE", Storage = "_ItemCode", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    if (this._Item.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"ENGINENUMBER", Storage = "_EngineNumber", CanBeNull = false, DbType = "VARCHAR2(20) NOT NULL")]
        public string EngineNumber
        {
            get
            {
                return this._EngineNumber;
            }
            set
            {
                if (this._EngineNumber != value)
                {
                    this.OnEngineNumberChanging(value);
                    this.SendPropertyChanging();
                    this._EngineNumber = value;
                    this.SendPropertyChanged("EngineNumber");
                    this.OnEngineNumberChanged();
                }
            }
        }

        [Column(Name = @"ITEMTYPE", Storage = "_ItemType", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string ItemType
        {
            get
            {
                return this._ItemType;
            }
            set
            {
                if (this._ItemType != value)
                {
                    this.OnItemTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemType = value;
                    this.SendPropertyChanged("ItemType");
                    this.OnItemTypeChanged();
                }
            }
        }

        [Column(Name = @"COLOR", Storage = "_Color", CanBeNull = false, DbType = "NVARCHAR2(120) NOT NULL")]
        public string Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if (this._Color != value)
                {
                    this.OnColorChanging(value);
                    this.SendPropertyChanging();
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

        [Column(Name = @"IMPORTEDDATE", Storage = "_ImportedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ImportedDate
        {
            get
            {
                return this._ImportedDate;
            }
            set
            {
                if (this._ImportedDate != value)
                {
                    this.OnImportedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ImportedDate = value;
                    this.SendPropertyChanged("ImportedDate");
                    this.OnImportedDateChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "NUMBER(2) NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"MADEDATE", Storage = "_MadeDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> MadeDate
        {
            get
            {
                return this._MadeDate;
            }
            set
            {
                if (this._MadeDate != value)
                {
                    this.OnMadeDateChanging(value);
                    this.SendPropertyChanging();
                    this._MadeDate = value;
                    this.SendPropertyChanged("MadeDate");
                    this.OnMadeDateChanged();
                }
            }
        }

        [Column(Name = @"VMEPINVOICE", Storage = "_VMEPInvoice", DbType = "VARCHAR2(256)")]
        public string VMEPInvoice
        {
            get
            {
                return this._VMEPInvoice;
            }
            set
            {
                if (this._VMEPInvoice != value)
                {
                    this.OnVMEPInvoiceChanging(value);
                    this.SendPropertyChanging();
                    this._VMEPInvoice = value;
                    this.SendPropertyChanged("VMEPInvoice");
                    this.OnVMEPInvoiceChanged();
                }
            }
        }

        [Column(Name = @"COMMENTS", Storage = "_Comments", DbType = "NVARCHAR2(4000)")]
        public string Comments
        {
            get
            {
                return this._Comments;
            }
            set
            {
                if (this._Comments != value)
                {
                    this.OnCommentsChanging(value);
                    this.SendPropertyChanging();
                    this._Comments = value;
                    this.SendPropertyChanged("Comments");
                    this.OnCommentsChanged();
                }
            }
        }

        [Column(Name = @"BRANCHCODE", Storage = "_BranchCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if (this._BranchCode != value)
                {
                    this.OnBranchCodeChanging(value);
                    this.SendPropertyChanging();
                    this._BranchCode = value;
                    this.SendPropertyChanged("BranchCode");
                    this.OnBranchCodeChanged();
                }
            }
        }

        [Column(Name = @"CREATEDDATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"RELEASEDDATE", Storage = "_ReleasedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ReleasedDate
        {
            get
            {
                return this._ReleasedDate;
            }
            set
            {
                if (this._ReleasedDate != value)
                {
                    this.OnReleasedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReleasedDate = value;
                    this.SendPropertyChanged("ReleasedDate");
                    this.OnReleasedDateChanged();
                }
            }
        }

        [Column(Name = @"DATABASECODE", Storage = "_DatabaseCode", CanBeNull = false, DbType = "VARCHAR2(10) NOT NULL")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Association(Name="ItemInstance_SaleBatchinvoicedetail", Storage="_SaleBatchinvoicedetails", OtherKey="Iteminstanceid")]
        public EntitySet<SaleBatchinvoicedetail> SaleBatchinvoicedetails
        {
            get
            {
                return this._SaleBatchinvoicedetails;
            }
            set
            {
                this._SaleBatchinvoicedetails.Assign(value);
            }
        }

        [Association(Name="ItemInstance_SaleInvoice", Storage="_SaleInvoices", OtherKey="ItemInstanceId")]
        public EntitySet<SaleInvoice> SaleInvoices
        {
            get
            {
                return this._SaleInvoices;
            }
            set
            {
                this._SaleInvoices.Assign(value);
            }
        }

        [Association(Name="ItemInstance_SaleReturnItem", Storage="_SaleReturnItems", OtherKey="ItemInstanceId")]
        public EntitySet<SaleReturnItem> SaleReturnItems
        {
            get
            {
                return this._SaleReturnItems;
            }
            set
            {
                this._SaleReturnItems.Assign(value);
            }
        }

        [Association(Name="ItemInstance_ShippingDetail", Storage="_ShippingDetails", OtherKey="ProductInstanceId")]
        public EntitySet<ShippingDetail> ShippingDetails
        {
            get
            {
                return this._ShippingDetails;
            }
            set
            {
                this._ShippingDetails.Assign(value);
            }
        }

        [Association(Name="ItemInstance_SaleTransHistory", Storage="_SaleTransHistories", OtherKey="ItemInstanceId")]
        public EntitySet<SaleTransHistory> SaleTransHistories
        {
            get
            {
                return this._SaleTransHistories;
            }
            set
            {
                this._SaleTransHistories.Assign(value);
            }
        }

        [Association(Name="Item_ItemInstance", Storage="_Item", ThisKey="ItemCode", IsForeignKey=true)]
        public Item Item
        {
            get
            {
                return this._Item.Entity;
            }
            set
            {
                Item previousValue = this._Item.Entity;
                if ((previousValue != value) || (this._Item.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Item.Entity = null;
                        previousValue.ItemInstances.Remove(this);
                    }
                    this._Item.Entity = value;
                    if (value != null)
                    {
                        value.ItemInstances.Add(this);
                        this._ItemCode = value.ItemCode;
                    }
                    else
                    {
                        this._ItemCode = default(string);
                    }
                    this.SendPropertyChanged("Item");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SaleBatchinvoicedetails(SaleBatchinvoicedetail entity)
        {
            this.SendPropertyChanging("SaleBatchinvoicedetails");
            entity.ItemInstance = this;
        }
    
        private void detach_SaleBatchinvoicedetails(SaleBatchinvoicedetail entity)
        {
            this.SendPropertyChanging("SaleBatchinvoicedetails");
            entity.ItemInstance = null;
        }

        private void attach_SaleInvoices(SaleInvoice entity)
        {
            this.SendPropertyChanging("SaleInvoices");
            entity.ItemInstance = this;
        }
    
        private void detach_SaleInvoices(SaleInvoice entity)
        {
            this.SendPropertyChanging("SaleInvoices");
            entity.ItemInstance = null;
        }

        private void attach_SaleReturnItems(SaleReturnItem entity)
        {
            this.SendPropertyChanging("SaleReturnItems");
            entity.ItemInstance = this;
        }
    
        private void detach_SaleReturnItems(SaleReturnItem entity)
        {
            this.SendPropertyChanging("SaleReturnItems");
            entity.ItemInstance = null;
        }

        private void attach_ShippingDetails(ShippingDetail entity)
        {
            this.SendPropertyChanging("ShippingDetails");
            entity.ItemInstance = this;
        }
    
        private void detach_ShippingDetails(ShippingDetail entity)
        {
            this.SendPropertyChanging("ShippingDetails");
            entity.ItemInstance = null;
        }

        private void attach_SaleTransHistories(SaleTransHistory entity)
        {
            this.SendPropertyChanging("SaleTransHistories");
            entity.ItemInstance = this;
        }
    
        private void detach_SaleTransHistories(SaleTransHistory entity)
        {
            this.SendPropertyChanging("SaleTransHistories");
            entity.ItemInstance = null;
        }
    }

    [Table(Name = @"VDMS.TC_VDX_FILE")]
    public partial class IShippingDetail : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _IssueNumber;

        private string _TipTopOrderNumber;

        private System.Nullable<long> _VDMSOrderId;

        private string _ItemCode;

        private string _Model;

        private string _EngineNumber;

        private string _ColorName;

        private string _ColorCode;

        private string _ItemName;

        private System.Nullable<System.DateTime> _OutStockDate;

        private System.Nullable<long> _Price;

        private string _BranchCode;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIssueNumberChanging(string value);
        partial void OnIssueNumberChanged();
        partial void OnTipTopOrderNumberChanging(string value);
        partial void OnTipTopOrderNumberChanged();
        partial void OnVDMSOrderIdChanging(System.Nullable<long> value);
        partial void OnVDMSOrderIdChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnEngineNumberChanging(string value);
        partial void OnEngineNumberChanged();
        partial void OnColorNameChanging(string value);
        partial void OnColorNameChanged();
        partial void OnColorCodeChanging(string value);
        partial void OnColorCodeChanged();
        partial void OnItemNameChanging(string value);
        partial void OnItemNameChanged();
        partial void OnOutStockDateChanging(System.Nullable<System.DateTime> value);
        partial void OnOutStockDateChanged();
        partial void OnPriceChanging(System.Nullable<long> value);
        partial void OnPriceChanged();
        partial void OnBranchCodeChanging(string value);
        partial void OnBranchCodeChanged();
        #endregion

        public IShippingDetail()
        {
            OnCreated();
        }

        [Column(Name = @"TC_VDX01", Storage = "_IssueNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL", IsPrimaryKey = true)]
        public string IssueNumber
        {
            get
            {
                return this._IssueNumber;
            }
            set
            {
                if (this._IssueNumber != value)
                {
                    this.OnIssueNumberChanging(value);
                    this.SendPropertyChanging();
                    this._IssueNumber = value;
                    this.SendPropertyChanged("IssueNumber");
                    this.OnIssueNumberChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX02", Storage = "_TipTopOrderNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string TipTopOrderNumber
        {
            get
            {
                return this._TipTopOrderNumber;
            }
            set
            {
                if (this._TipTopOrderNumber != value)
                {
                    this.OnTipTopOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._TipTopOrderNumber = value;
                    this.SendPropertyChanged("TipTopOrderNumber");
                    this.OnTipTopOrderNumberChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX03", Storage = "_VDMSOrderId", DbType = "NUMBER(10) NOT NULL")]
        public System.Nullable<long> VDMSOrderId
        {
            get
            {
                return this._VDMSOrderId;
            }
            set
            {
                if (this._VDMSOrderId != value)
                {
                    this.OnVDMSOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._VDMSOrderId = value;
                    this.SendPropertyChanged("VDMSOrderId");
                    this.OnVDMSOrderIdChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX04", Storage = "_ItemCode", DbType = "VARCHAR2(30)")]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX05", Storage = "_Model", DbType = "VARCHAR2(30)")]
        public string Model
        {
            get
            {
                return this._Model;
            }
            set
            {
                if (this._Model != value)
                {
                    this.OnModelChanging(value);
                    this.SendPropertyChanging();
                    this._Model = value;
                    this.SendPropertyChanged("Model");
                    this.OnModelChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX06", Storage = "_EngineNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL", IsPrimaryKey = true)]
        public string EngineNumber
        {
            get
            {
                return this._EngineNumber;
            }
            set
            {
                if (this._EngineNumber != value)
                {
                    this.OnEngineNumberChanging(value);
                    this.SendPropertyChanging();
                    this._EngineNumber = value;
                    this.SendPropertyChanged("EngineNumber");
                    this.OnEngineNumberChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX07", Storage = "_ColorName", DbType = "NVARCHAR2(240)")]
        public string ColorName
        {
            get
            {
                return this._ColorName;
            }
            set
            {
                if (this._ColorName != value)
                {
                    this.OnColorNameChanging(value);
                    this.SendPropertyChanging();
                    this._ColorName = value;
                    this.SendPropertyChanged("ColorName");
                    this.OnColorNameChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX08", Storage = "_ColorCode", DbType = "VARCHAR2(30)")]
        public string ColorCode
        {
            get
            {
                return this._ColorCode;
            }
            set
            {
                if (this._ColorCode != value)
                {
                    this.OnColorCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ColorCode = value;
                    this.SendPropertyChanged("ColorCode");
                    this.OnColorCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX09", Storage = "_ItemName", DbType = "NVARCHAR2(200)")]
        public string ItemName
        {
            get
            {
                return this._ItemName;
            }
            set
            {
                if (this._ItemName != value)
                {
                    this.OnItemNameChanging(value);
                    this.SendPropertyChanging();
                    this._ItemName = value;
                    this.SendPropertyChanged("ItemName");
                    this.OnItemNameChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX10", Storage = "_OutStockDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> OutStockDate
        {
            get
            {
                return this._OutStockDate;
            }
            set
            {
                if (this._OutStockDate != value)
                {
                    this.OnOutStockDateChanging(value);
                    this.SendPropertyChanging();
                    this._OutStockDate = value;
                    this.SendPropertyChanged("OutStockDate");
                    this.OnOutStockDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX11", Storage = "_Price", DbType = "NUMBER(38)")]
        public System.Nullable<long> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

        [Column(Name = @"TC_VDX12", Storage = "_BranchCode", DbType = "VARCHAR2(30)")]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if (this._BranchCode != value)
                {
                    this.OnBranchCodeChanging(value);
                    this.SendPropertyChanging();
                    this._BranchCode = value;
                    this.SendPropertyChanged("BranchCode");
                    this.OnBranchCodeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.TC_VDV_FILE")]
    public partial class IShippingHeader : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _IssueNumber;

        private System.Nullable<int> _TotalQuantity;

        private System.Nullable<System.DateTime> _ShippingDate;

        private string _DealerCode;

        private string _BranchCode;

        private string _Flag;

        private string _TcVdv07;

        private string _TcVdv08;

        private string _TcVdv09;

        private string _TcVdv10;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIssueNumberChanging(string value);
        partial void OnIssueNumberChanged();
        partial void OnTotalQuantityChanging(System.Nullable<int> value);
        partial void OnTotalQuantityChanged();
        partial void OnShippingDateChanging(System.Nullable<System.DateTime> value);
        partial void OnShippingDateChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnBranchCodeChanging(string value);
        partial void OnBranchCodeChanged();
        partial void OnFlagChanging(string value);
        partial void OnFlagChanged();
        partial void OnTcVdv07Changing(string value);
        partial void OnTcVdv07Changed();
        partial void OnTcVdv08Changing(string value);
        partial void OnTcVdv08Changed();
        partial void OnTcVdv09Changing(string value);
        partial void OnTcVdv09Changed();
        partial void OnTcVdv10Changing(string value);
        partial void OnTcVdv10Changed();
        #endregion

        public IShippingHeader()
        {
            OnCreated();
        }

        [Column(Name = @"TC_VDV01", Storage = "_IssueNumber", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL", IsPrimaryKey = true)]
        public string IssueNumber
        {
            get
            {
                return this._IssueNumber;
            }
            set
            {
                if (this._IssueNumber != value)
                {
                    this.OnIssueNumberChanging(value);
                    this.SendPropertyChanging();
                    this._IssueNumber = value;
                    this.SendPropertyChanged("IssueNumber");
                    this.OnIssueNumberChanged();
                }
            }
        }

        [Column(Name = @"TC_VDV02", Storage = "_TotalQuantity", DbType = "NUMBER(10)")]
        public System.Nullable<int> TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

        [Column(Name = @"TC_VDV03", Storage = "_ShippingDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> ShippingDate
        {
            get
            {
                return this._ShippingDate;
            }
            set
            {
                if (this._ShippingDate != value)
                {
                    this.OnShippingDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingDate = value;
                    this.SendPropertyChanged("ShippingDate");
                    this.OnShippingDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDV04", Storage = "_DealerCode", DbType = "VARCHAR2(30)")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDV05", Storage = "_BranchCode", CanBeNull = false, DbType = "VARCHAR2(30)", IsPrimaryKey = true)]
        public string BranchCode
        {
            get
            {
                return this._BranchCode;
            }
            set
            {
                if (this._BranchCode != value)
                {
                    this.OnBranchCodeChanging(value);
                    this.SendPropertyChanging();
                    this._BranchCode = value;
                    this.SendPropertyChanged("BranchCode");
                    this.OnBranchCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDV06", Storage = "_Flag", DbType = "CHAR(1)")]
        public string Flag
        {
            get
            {
                return this._Flag;
            }
            set
            {
                if (this._Flag != value)
                {
                    this.OnFlagChanging(value);
                    this.SendPropertyChanging();
                    this._Flag = value;
                    this.SendPropertyChanged("Flag");
                    this.OnFlagChanged();
                }
            }
        }

        [Column(Name = @"TC_VDV07", Storage = "_TcVdv07", DbType = "VARCHAR2(30)")]
        public string TcVdv07
        {
            get
            {
                return this._TcVdv07;
            }
            set
            {
                if (this._TcVdv07 != value)
                {
                    this.OnTcVdv07Changing(value);
                    this.SendPropertyChanging();
                    this._TcVdv07 = value;
                    this.SendPropertyChanged("TcVdv07");
                    this.OnTcVdv07Changed();
                }
            }
        }

        [Column(Name = @"TC_VDV08", Storage = "_TcVdv08", DbType = "VARCHAR2(30)")]
        public string TcVdv08
        {
            get
            {
                return this._TcVdv08;
            }
            set
            {
                if (this._TcVdv08 != value)
                {
                    this.OnTcVdv08Changing(value);
                    this.SendPropertyChanging();
                    this._TcVdv08 = value;
                    this.SendPropertyChanged("TcVdv08");
                    this.OnTcVdv08Changed();
                }
            }
        }

        [Column(Name = @"TC_VDV09", Storage = "_TcVdv09", DbType = "VARCHAR2(30)")]
        public string TcVdv09
        {
            get
            {
                return this._TcVdv09;
            }
            set
            {
                if (this._TcVdv09 != value)
                {
                    this.OnTcVdv09Changing(value);
                    this.SendPropertyChanging();
                    this._TcVdv09 = value;
                    this.SendPropertyChanged("TcVdv09");
                    this.OnTcVdv09Changed();
                }
            }
        }

        [Column(Name = @"TC_VDV10", Storage = "_TcVdv10", DbType = "VARCHAR2(30)")]
        public string TcVdv10
        {
            get
            {
                return this._TcVdv10;
            }
            set
            {
                if (this._TcVdv10 != value)
                {
                    this.OnTcVdv10Changing(value);
                    this.SendPropertyChanging();
                    this._TcVdv10 = value;
                    this.SendPropertyChanged("TcVdv10");
                    this.OnTcVdv10Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.TC_VDU_FILE")]
    public partial class IOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _OrderHeaderId;

        private long _OrderDetailId;

        private string _ItemCode;

        private System.Nullable<int> _OrderQuantity;

        private System.Nullable<int> _ConfirmQuantity;

        private System.Nullable<long> _UnitPrice;

        private System.Nullable<short> _Priority;

        private string _TcVdu08;

        private string _TcVdu09;

        private string _TcVdu10;

        private string _TcVdu11;

        private string _TcVdu12;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnOrderDetailIdChanging(long value);
        partial void OnOrderDetailIdChanged();
        partial void OnItemCodeChanging(string value);
        partial void OnItemCodeChanged();
        partial void OnOrderQuantityChanging(System.Nullable<int> value);
        partial void OnOrderQuantityChanged();
        partial void OnConfirmQuantityChanging(System.Nullable<int> value);
        partial void OnConfirmQuantityChanged();
        partial void OnUnitPriceChanging(System.Nullable<long> value);
        partial void OnUnitPriceChanged();
        partial void OnPriorityChanging(System.Nullable<short> value);
        partial void OnPriorityChanged();
        partial void OnTcVdu08Changing(string value);
        partial void OnTcVdu08Changed();
        partial void OnTcVdu09Changing(string value);
        partial void OnTcVdu09Changed();
        partial void OnTcVdu10Changing(string value);
        partial void OnTcVdu10Changed();
        partial void OnTcVdu11Changing(string value);
        partial void OnTcVdu11Changed();
        partial void OnTcVdu12Changing(string value);
        partial void OnTcVdu12Changed();
        #endregion

        public IOrderDetail()
        {
            OnCreated();
        }

        [Column(Name = @"TC_VDU01", Storage = "_OrderHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"TC_VDU02", Storage = "_OrderDetailId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long OrderDetailId
        {
            get
            {
                return this._OrderDetailId;
            }
            set
            {
                if (this._OrderDetailId != value)
                {
                    this.OnOrderDetailIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDetailId = value;
                    this.SendPropertyChanged("OrderDetailId");
                    this.OnOrderDetailIdChanged();
                }
            }
        }

        [Column(Name = @"TC_VDU03", Storage = "_ItemCode", DbType = "VARCHAR2(30)")]
        public string ItemCode
        {
            get
            {
                return this._ItemCode;
            }
            set
            {
                if (this._ItemCode != value)
                {
                    this.OnItemCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemCode = value;
                    this.SendPropertyChanged("ItemCode");
                    this.OnItemCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDU04", Storage = "_OrderQuantity", DbType = "NUMBER(10)")]
        public System.Nullable<int> OrderQuantity
        {
            get
            {
                return this._OrderQuantity;
            }
            set
            {
                if (this._OrderQuantity != value)
                {
                    this.OnOrderQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._OrderQuantity = value;
                    this.SendPropertyChanged("OrderQuantity");
                    this.OnOrderQuantityChanged();
                }
            }
        }

        [Column(Name = @"TC_VDU05", Storage = "_ConfirmQuantity", DbType = "NUMBER(10)")]
        public System.Nullable<int> ConfirmQuantity
        {
            get
            {
                return this._ConfirmQuantity;
            }
            set
            {
                if (this._ConfirmQuantity != value)
                {
                    this.OnConfirmQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._ConfirmQuantity = value;
                    this.SendPropertyChanged("ConfirmQuantity");
                    this.OnConfirmQuantityChanged();
                }
            }
        }

        [Column(Name = @"TC_VDU06", Storage = "_UnitPrice", DbType = "NUMBER(18)")]
        public System.Nullable<long> UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging();
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        [Column(Name = @"TC_VDU07", Storage = "_Priority", DbType = "NUMBER(3)")]
        public System.Nullable<short> Priority
        {
            get
            {
                return this._Priority;
            }
            set
            {
                if (this._Priority != value)
                {
                    this.OnPriorityChanging(value);
                    this.SendPropertyChanging();
                    this._Priority = value;
                    this.SendPropertyChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }

        [Column(Name = @"TC_VDU08", Storage = "_TcVdu08", DbType = "VARCHAR2(30)")]
        public string TcVdu08
        {
            get
            {
                return this._TcVdu08;
            }
            set
            {
                if (this._TcVdu08 != value)
                {
                    this.OnTcVdu08Changing(value);
                    this.SendPropertyChanging();
                    this._TcVdu08 = value;
                    this.SendPropertyChanged("TcVdu08");
                    this.OnTcVdu08Changed();
                }
            }
        }

        [Column(Name = @"TC_VDU09", Storage = "_TcVdu09", DbType = "VARCHAR2(30)")]
        public string TcVdu09
        {
            get
            {
                return this._TcVdu09;
            }
            set
            {
                if (this._TcVdu09 != value)
                {
                    this.OnTcVdu09Changing(value);
                    this.SendPropertyChanging();
                    this._TcVdu09 = value;
                    this.SendPropertyChanged("TcVdu09");
                    this.OnTcVdu09Changed();
                }
            }
        }

        [Column(Name = @"TC_VDU10", Storage = "_TcVdu10", DbType = "VARCHAR2(30)")]
        public string TcVdu10
        {
            get
            {
                return this._TcVdu10;
            }
            set
            {
                if (this._TcVdu10 != value)
                {
                    this.OnTcVdu10Changing(value);
                    this.SendPropertyChanging();
                    this._TcVdu10 = value;
                    this.SendPropertyChanged("TcVdu10");
                    this.OnTcVdu10Changed();
                }
            }
        }

        [Column(Name = @"TC_VDU11", Storage = "_TcVdu11", DbType = "VARCHAR2(30)")]
        public string TcVdu11
        {
            get
            {
                return this._TcVdu11;
            }
            set
            {
                if (this._TcVdu11 != value)
                {
                    this.OnTcVdu11Changing(value);
                    this.SendPropertyChanging();
                    this._TcVdu11 = value;
                    this.SendPropertyChanged("TcVdu11");
                    this.OnTcVdu11Changed();
                }
            }
        }

        [Column(Name = @"TC_VDU12", Storage = "_TcVdu12", DbType = "VARCHAR2(30)")]
        public string TcVdu12
        {
            get
            {
                return this._TcVdu12;
            }
            set
            {
                if (this._TcVdu12 != value)
                {
                    this.OnTcVdu12Changing(value);
                    this.SendPropertyChanging();
                    this._TcVdu12 = value;
                    this.SendPropertyChanged("TcVdu12");
                    this.OnTcVdu12Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.TC_VDT_FILE")]
    public partial class IOrderHeader : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _OrderHeaderId;

        private string _OrderNumber;

        private string _DealerCode;

        private string _DeliveryDealerCode;

        private string _DeliveryBranchCode;

        private string _InvoiceCode;

        private System.Nullable<System.DateTime> _OrderDate;

        private System.Nullable<System.DateTime> _QuotationDate;

        private System.Nullable<System.DateTime> _PaymentDate;

        private System.Nullable<System.DateTime> _DeliveryDate;

        private System.Nullable<System.DateTime> _ShippingDate;

        private string _OrderType;

        private string _Flag;

        private string _TiptopProcess;

        private string _DealerComment;

        private string _VMEPComment;

        private string _DatabaseCode;

        private string _AreaCode;

        private string _LastUpdateBy;

        private System.Nullable<long> _BonusAmount;

        private string _BonusStatus;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnOrderNumberChanging(string value);
        partial void OnOrderNumberChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnDeliveryDealerCodeChanging(string value);
        partial void OnDeliveryDealerCodeChanged();
        partial void OnDeliveryBranchCodeChanging(string value);
        partial void OnDeliveryBranchCodeChanged();
        partial void OnInvoiceCodeChanging(string value);
        partial void OnInvoiceCodeChanged();
        partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
        partial void OnOrderDateChanged();
        partial void OnQuotationDateChanging(System.Nullable<System.DateTime> value);
        partial void OnQuotationDateChanged();
        partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPaymentDateChanged();
        partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
        partial void OnDeliveryDateChanged();
        partial void OnShippingDateChanging(System.Nullable<System.DateTime> value);
        partial void OnShippingDateChanged();
        partial void OnOrderTypeChanging(string value);
        partial void OnOrderTypeChanged();
        partial void OnFlagChanging(string value);
        partial void OnFlagChanged();
        partial void OnTiptopProcessChanging(string value);
        partial void OnTiptopProcessChanged();
        partial void OnDealerCommentChanging(string value);
        partial void OnDealerCommentChanged();
        partial void OnVMEPCommentChanging(string value);
        partial void OnVMEPCommentChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnAreaCodeChanging(string value);
        partial void OnAreaCodeChanged();
        partial void OnLastUpdateByChanging(string value);
        partial void OnLastUpdateByChanged();
        partial void OnBonusAmountChanging(System.Nullable<long> value);
        partial void OnBonusAmountChanged();
        partial void OnBonusStatusChanging(string value);
        partial void OnBonusStatusChanged();
        #endregion

        public IOrderHeader()
        {
            OnCreated();
        }

        [Column(Name = @"TC_VDT01", Storage = "_OrderHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT02", Storage = "_OrderNumber", DbType = "VARCHAR2(30)")]
        public string OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if (this._OrderNumber != value)
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT03", Storage = "_DealerCode", DbType = "VARCHAR2(30)")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT04", Storage = "_DeliveryDealerCode", DbType = "VARCHAR2(30)")]
        public string DeliveryDealerCode
        {
            get
            {
                return this._DeliveryDealerCode;
            }
            set
            {
                if (this._DeliveryDealerCode != value)
                {
                    this.OnDeliveryDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryDealerCode = value;
                    this.SendPropertyChanged("DeliveryDealerCode");
                    this.OnDeliveryDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT05", Storage = "_DeliveryBranchCode", CanBeNull = false, DbType = "VARCHAR2(30)")]
        public string DeliveryBranchCode
        {
            get
            {
                return this._DeliveryBranchCode;
            }
            set
            {
                if (this._DeliveryBranchCode != value)
                {
                    this.OnDeliveryBranchCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryBranchCode = value;
                    this.SendPropertyChanged("DeliveryBranchCode");
                    this.OnDeliveryBranchCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT06", Storage = "_InvoiceCode", DbType = "VARCHAR2(30)")]
        public string InvoiceCode
        {
            get
            {
                return this._InvoiceCode;
            }
            set
            {
                if (this._InvoiceCode != value)
                {
                    this.OnInvoiceCodeChanging(value);
                    this.SendPropertyChanging();
                    this._InvoiceCode = value;
                    this.SendPropertyChanged("InvoiceCode");
                    this.OnInvoiceCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT07", Storage = "_OrderDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT08", Storage = "_QuotationDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> QuotationDate
        {
            get
            {
                return this._QuotationDate;
            }
            set
            {
                if (this._QuotationDate != value)
                {
                    this.OnQuotationDateChanging(value);
                    this.SendPropertyChanging();
                    this._QuotationDate = value;
                    this.SendPropertyChanged("QuotationDate");
                    this.OnQuotationDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT09", Storage = "_PaymentDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> PaymentDate
        {
            get
            {
                return this._PaymentDate;
            }
            set
            {
                if (this._PaymentDate != value)
                {
                    this.OnPaymentDateChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentDate = value;
                    this.SendPropertyChanged("PaymentDate");
                    this.OnPaymentDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT10", Storage = "_DeliveryDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> DeliveryDate
        {
            get
            {
                return this._DeliveryDate;
            }
            set
            {
                if (this._DeliveryDate != value)
                {
                    this.OnDeliveryDateChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveryDate = value;
                    this.SendPropertyChanged("DeliveryDate");
                    this.OnDeliveryDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT11", Storage = "_ShippingDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> ShippingDate
        {
            get
            {
                return this._ShippingDate;
            }
            set
            {
                if (this._ShippingDate != value)
                {
                    this.OnShippingDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingDate = value;
                    this.SendPropertyChanged("ShippingDate");
                    this.OnShippingDateChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT12", Storage = "_OrderType", DbType = "VARCHAR2(1)")]
        public string OrderType
        {
            get
            {
                return this._OrderType;
            }
            set
            {
                if (this._OrderType != value)
                {
                    this.OnOrderTypeChanging(value);
                    this.SendPropertyChanging();
                    this._OrderType = value;
                    this.SendPropertyChanged("OrderType");
                    this.OnOrderTypeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT13", Storage = "_Flag", DbType = "VARCHAR2(2)")]
        public string Flag
        {
            get
            {
                return this._Flag;
            }
            set
            {
                if (this._Flag != value)
                {
                    this.OnFlagChanging(value);
                    this.SendPropertyChanging();
                    this._Flag = value;
                    this.SendPropertyChanged("Flag");
                    this.OnFlagChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT14", Storage = "_TiptopProcess", DbType = "VARCHAR2(1)")]
        public string TiptopProcess
        {
            get
            {
                return this._TiptopProcess;
            }
            set
            {
                if (this._TiptopProcess != value)
                {
                    this.OnTiptopProcessChanging(value);
                    this.SendPropertyChanging();
                    this._TiptopProcess = value;
                    this.SendPropertyChanged("TiptopProcess");
                    this.OnTiptopProcessChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT15", Storage = "_DealerComment", DbType = "NVARCHAR2(4000)")]
        public string DealerComment
        {
            get
            {
                return this._DealerComment;
            }
            set
            {
                if (this._DealerComment != value)
                {
                    this.OnDealerCommentChanging(value);
                    this.SendPropertyChanging();
                    this._DealerComment = value;
                    this.SendPropertyChanged("DealerComment");
                    this.OnDealerCommentChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT16", Storage = "_VMEPComment", DbType = "NVARCHAR2(4000)")]
        public string VMEPComment
        {
            get
            {
                return this._VMEPComment;
            }
            set
            {
                if (this._VMEPComment != value)
                {
                    this.OnVMEPCommentChanging(value);
                    this.SendPropertyChanging();
                    this._VMEPComment = value;
                    this.SendPropertyChanged("VMEPComment");
                    this.OnVMEPCommentChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT17", Storage = "_DatabaseCode", DbType = "VARCHAR2(30)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT18", Storage = "_AreaCode", DbType = "VARCHAR2(30)")]
        public string AreaCode
        {
            get
            {
                return this._AreaCode;
            }
            set
            {
                if (this._AreaCode != value)
                {
                    this.OnAreaCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AreaCode = value;
                    this.SendPropertyChanged("AreaCode");
                    this.OnAreaCodeChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT19", Storage = "_LastUpdateBy", DbType = "VARCHAR2(1)")]
        public string LastUpdateBy
        {
            get
            {
                return this._LastUpdateBy;
            }
            set
            {
                if (this._LastUpdateBy != value)
                {
                    this.OnLastUpdateByChanging(value);
                    this.SendPropertyChanging();
                    this._LastUpdateBy = value;
                    this.SendPropertyChanged("LastUpdateBy");
                    this.OnLastUpdateByChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT20", Storage = "_BonusAmount", DbType = "NUMBER(18)")]
        public System.Nullable<long> BonusAmount
        {
            get
            {
                return this._BonusAmount;
            }
            set
            {
                if (this._BonusAmount != value)
                {
                    this.OnBonusAmountChanging(value);
                    this.SendPropertyChanging();
                    this._BonusAmount = value;
                    this.SendPropertyChanged("BonusAmount");
                    this.OnBonusAmountChanged();
                }
            }
        }

        [Column(Name = @"TC_VDT21", Storage = "_BonusStatus", DbType = "VARCHAR2(1)")]
        public string BonusStatus
        {
            get
            {
                return this._BonusStatus;
            }
            set
            {
                if (this._BonusStatus != value)
                {
                    this.OnBonusStatusChanging(value);
                    this.SendPropertyChanging();
                    this._BonusStatus = value;
                    this.SendPropertyChanged("BonusStatus");
                    this.OnBonusStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.SALE_ORDERHEADER")]
    public partial class OrderHeader : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _OrderHeaderId;

        private System.DateTime _CreatedDate;

        private string _CreatedBy;

        private System.DateTime _LastEditedDate;

        private string _LastEditedBy;

        private string _OrderNumber;

        private System.DateTime _OrderDate;

        private decimal _OrderTimes;

        private System.DateTime _ShippingDate;

        private string _ShippingTo;

        private int _Status;

        private string _DealerCode;

        private System.Nullable<long> _SubTotal;

        private System.Nullable<long> _TaxAmt;

        private System.Nullable<long> _Freight;

        private string _DealerComment;

        private string _VMEPComment;

        private System.Nullable<long> _ReferenceOrderId;

        private string _AreaCode;

        private string _DatabaseCode;

        private System.Nullable<int> _DeliveredStatus;

        private string _SecondaryShippingTo;

        private string _SecondaryShippingCode;

        private System.Nullable<System.DateTime> _StatisticDate;

        private long _PaymentAmount;

        private long _BonusAmount;

        private string _BonusStatus;

        private string _FinComment;

        private string _FinVoucher;

        private EntitySet<OrderDetail> _OrderDetails;

        private EntitySet<SaleOrderPayment> _SaleOrderPayments;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnLastEditedDateChanging(System.DateTime value);
        partial void OnLastEditedDateChanged();
        partial void OnLastEditedByChanging(string value);
        partial void OnLastEditedByChanged();
        partial void OnOrderNumberChanging(string value);
        partial void OnOrderNumberChanged();
        partial void OnOrderDateChanging(System.DateTime value);
        partial void OnOrderDateChanged();
        partial void OnOrderTimesChanging(decimal value);
        partial void OnOrderTimesChanged();
        partial void OnShippingDateChanging(System.DateTime value);
        partial void OnShippingDateChanged();
        partial void OnShippingToChanging(string value);
        partial void OnShippingToChanged();
        partial void OnStatusChanging(int value);
        partial void OnStatusChanged();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnSubTotalChanging(System.Nullable<long> value);
        partial void OnSubTotalChanged();
        partial void OnTaxAmtChanging(System.Nullable<long> value);
        partial void OnTaxAmtChanged();
        partial void OnFreightChanging(System.Nullable<long> value);
        partial void OnFreightChanged();
        partial void OnDealerCommentChanging(string value);
        partial void OnDealerCommentChanged();
        partial void OnVMEPCommentChanging(string value);
        partial void OnVMEPCommentChanged();
        partial void OnReferenceOrderIdChanging(System.Nullable<long> value);
        partial void OnReferenceOrderIdChanged();
        partial void OnAreaCodeChanging(string value);
        partial void OnAreaCodeChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnDeliveredStatusChanging(System.Nullable<int> value);
        partial void OnDeliveredStatusChanged();
        partial void OnSecondaryShippingToChanging(string value);
        partial void OnSecondaryShippingToChanged();
        partial void OnSecondaryShippingCodeChanging(string value);
        partial void OnSecondaryShippingCodeChanged();
        partial void OnStatisticDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStatisticDateChanged();
        partial void OnPaymentAmountChanging(long value);
        partial void OnPaymentAmountChanged();
        partial void OnBonusAmountChanging(long value);
        partial void OnBonusAmountChanged();
        partial void OnBonusStatusChanging(string value);
        partial void OnBonusStatusChanged();
        partial void OnFinCommentChanging(string value);
        partial void OnFinCommentChanged();
        partial void OnFinVoucherChanging(string value);
        partial void OnFinVoucherChanged();
        #endregion

        public OrderHeader()
        {
            this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
            this._SaleOrderPayments = new EntitySet<SaleOrderPayment>(new Action<SaleOrderPayment>(this.attach_SaleOrderPayments), new Action<SaleOrderPayment>(this.detach_SaleOrderPayments));
            OnCreated();
        }

        [Column(Name = @"ORDERID", Storage = "_OrderHeaderId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"CREATEDDATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"CREATEDBY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string CreatedBy
        {
            get
            {
                return this._CreatedBy;
            }
            set
            {
                if (this._CreatedBy != value)
                {
                    this.OnCreatedByChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedBy = value;
                    this.SendPropertyChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }

        [Column(Name = @"LASTEDITEDDATE", Storage = "_LastEditedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime LastEditedDate
        {
            get
            {
                return this._LastEditedDate;
            }
            set
            {
                if (this._LastEditedDate != value)
                {
                    this.OnLastEditedDateChanging(value);
                    this.SendPropertyChanging();
                    this._LastEditedDate = value;
                    this.SendPropertyChanged("LastEditedDate");
                    this.OnLastEditedDateChanged();
                }
            }
        }

        [Column(Name = @"LASTEDITEDBY", Storage = "_LastEditedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string LastEditedBy
        {
            get
            {
                return this._LastEditedBy;
            }
            set
            {
                if (this._LastEditedBy != value)
                {
                    this.OnLastEditedByChanging(value);
                    this.SendPropertyChanging();
                    this._LastEditedBy = value;
                    this.SendPropertyChanged("LastEditedBy");
                    this.OnLastEditedByChanged();
                }
            }
        }

        [Column(Name = @"ORDERNUMBER", Storage = "_OrderNumber", DbType = "VARCHAR2(30)")]
        public string OrderNumber
        {
            get
            {
                return this._OrderNumber;
            }
            set
            {
                if (this._OrderNumber != value)
                {
                    this.OnOrderNumberChanging(value);
                    this.SendPropertyChanging();
                    this._OrderNumber = value;
                    this.SendPropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }

        [Column(Name = @"ORDERDATE", Storage = "_OrderDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

        [Column(Name = @"ORDERTIMES", Storage = "_OrderTimes", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public decimal OrderTimes
        {
            get
            {
                return this._OrderTimes;
            }
            set
            {
                if (this._OrderTimes != value)
                {
                    this.OnOrderTimesChanging(value);
                    this.SendPropertyChanging();
                    this._OrderTimes = value;
                    this.SendPropertyChanged("OrderTimes");
                    this.OnOrderTimesChanged();
                }
            }
        }

        [Column(Name = @"SHIPPINGDATE", Storage = "_ShippingDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime ShippingDate
        {
            get
            {
                return this._ShippingDate;
            }
            set
            {
                if (this._ShippingDate != value)
                {
                    this.OnShippingDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingDate = value;
                    this.SendPropertyChanged("ShippingDate");
                    this.OnShippingDateChanged();
                }
            }
        }

        [Column(Name = @"SHIPPINGTO", Storage = "_ShippingTo", DbType = "NVARCHAR2(512)")]
        public string ShippingTo
        {
            get
            {
                return this._ShippingTo;
            }
            set
            {
                if (this._ShippingTo != value)
                {
                    this.OnShippingToChanging(value);
                    this.SendPropertyChanging();
                    this._ShippingTo = value;
                    this.SendPropertyChanged("ShippingTo");
                    this.OnShippingToChanged();
                }
            }
        }

        [Column(Name = @"STATUS", Storage = "_Status", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Column(Name = @"DEALERCODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"SUBTOTAL", Storage = "_SubTotal", DbType = "NUMBER(18)")]
        public System.Nullable<long> SubTotal
        {
            get
            {
                return this._SubTotal;
            }
            set
            {
                if (this._SubTotal != value)
                {
                    this.OnSubTotalChanging(value);
                    this.SendPropertyChanging();
                    this._SubTotal = value;
                    this.SendPropertyChanged("SubTotal");
                    this.OnSubTotalChanged();
                }
            }
        }

        [Column(Name = @"TAXAMT", Storage = "_TaxAmt", DbType = "NUMBER(18)")]
        public System.Nullable<long> TaxAmt
        {
            get
            {
                return this._TaxAmt;
            }
            set
            {
                if (this._TaxAmt != value)
                {
                    this.OnTaxAmtChanging(value);
                    this.SendPropertyChanging();
                    this._TaxAmt = value;
                    this.SendPropertyChanged("TaxAmt");
                    this.OnTaxAmtChanged();
                }
            }
        }

        [Column(Name = @"FREIGHT", Storage = "_Freight", DbType = "NUMBER(18)")]
        public System.Nullable<long> Freight
        {
            get
            {
                return this._Freight;
            }
            set
            {
                if (this._Freight != value)
                {
                    this.OnFreightChanging(value);
                    this.SendPropertyChanging();
                    this._Freight = value;
                    this.SendPropertyChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }

        [Column(Name = @"DEALERCOMMENT", Storage = "_DealerComment", DbType = "NVARCHAR2(4000)")]
        public string DealerComment
        {
            get
            {
                return this._DealerComment;
            }
            set
            {
                if (this._DealerComment != value)
                {
                    this.OnDealerCommentChanging(value);
                    this.SendPropertyChanging();
                    this._DealerComment = value;
                    this.SendPropertyChanged("DealerComment");
                    this.OnDealerCommentChanged();
                }
            }
        }

        [Column(Name = @"VMEPCOMMENT", Storage = "_VMEPComment", DbType = "NVARCHAR2(4000)")]
        public string VMEPComment
        {
            get
            {
                return this._VMEPComment;
            }
            set
            {
                if (this._VMEPComment != value)
                {
                    this.OnVMEPCommentChanging(value);
                    this.SendPropertyChanging();
                    this._VMEPComment = value;
                    this.SendPropertyChanged("VMEPComment");
                    this.OnVMEPCommentChanged();
                }
            }
        }

        [Column(Name = @"REFERENCEORDERID", Storage = "_ReferenceOrderId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ReferenceOrderId
        {
            get
            {
                return this._ReferenceOrderId;
            }
            set
            {
                if (this._ReferenceOrderId != value)
                {
                    this.OnReferenceOrderIdChanging(value);
                    this.SendPropertyChanging();
                    this._ReferenceOrderId = value;
                    this.SendPropertyChanged("ReferenceOrderId");
                    this.OnReferenceOrderIdChanged();
                }
            }
        }

        [Column(Name = @"AREACODE", Storage = "_AreaCode", CanBeNull = false, DbType = "VARCHAR2(10) NOT NULL")]
        public string AreaCode
        {
            get
            {
                return this._AreaCode;
            }
            set
            {
                if (this._AreaCode != value)
                {
                    this.OnAreaCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AreaCode = value;
                    this.SendPropertyChanged("AreaCode");
                    this.OnAreaCodeChanged();
                }
            }
        }

        [Column(Name = @"DATABASECODE", Storage = "_DatabaseCode", DbType = "VARCHAR2(10)")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Name = @"DELIVEREDSTATUS", Storage = "_DeliveredStatus", DbType = "NUMBER(2)")]
        public System.Nullable<int> DeliveredStatus
        {
            get
            {
                return this._DeliveredStatus;
            }
            set
            {
                if (this._DeliveredStatus != value)
                {
                    this.OnDeliveredStatusChanging(value);
                    this.SendPropertyChanging();
                    this._DeliveredStatus = value;
                    this.SendPropertyChanged("DeliveredStatus");
                    this.OnDeliveredStatusChanged();
                }
            }
        }

        [Column(Name = @"SECONDARYSHIPPINGTO", Storage = "_SecondaryShippingTo", DbType = "VARCHAR2(512)")]
        public string SecondaryShippingTo
        {
            get
            {
                return this._SecondaryShippingTo;
            }
            set
            {
                if (this._SecondaryShippingTo != value)
                {
                    this.OnSecondaryShippingToChanging(value);
                    this.SendPropertyChanging();
                    this._SecondaryShippingTo = value;
                    this.SendPropertyChanged("SecondaryShippingTo");
                    this.OnSecondaryShippingToChanged();
                }
            }
        }

        [Column(Name = @"SECONDARYSHIPPINGCODE", Storage = "_SecondaryShippingCode", DbType = "VARCHAR2(128)")]
        public string SecondaryShippingCode
        {
            get
            {
                return this._SecondaryShippingCode;
            }
            set
            {
                if (this._SecondaryShippingCode != value)
                {
                    this.OnSecondaryShippingCodeChanging(value);
                    this.SendPropertyChanging();
                    this._SecondaryShippingCode = value;
                    this.SendPropertyChanged("SecondaryShippingCode");
                    this.OnSecondaryShippingCodeChanged();
                }
            }
        }

        [Column(Name = @"STATISTICDATE", Storage = "_StatisticDate", DbType = "DATE")]
        public System.Nullable<System.DateTime> StatisticDate
        {
            get
            {
                return this._StatisticDate;
            }
            set
            {
                if (this._StatisticDate != value)
                {
                    this.OnStatisticDateChanging(value);
                    this.SendPropertyChanging();
                    this._StatisticDate = value;
                    this.SendPropertyChanged("StatisticDate");
                    this.OnStatisticDateChanged();
                }
            }
        }

        [Column(Name = @"PAYMENTAMOUNT", Storage = "_PaymentAmount", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long PaymentAmount
        {
            get
            {
                return this._PaymentAmount;
            }
            set
            {
                if (this._PaymentAmount != value)
                {
                    this.OnPaymentAmountChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentAmount = value;
                    this.SendPropertyChanged("PaymentAmount");
                    this.OnPaymentAmountChanged();
                }
            }
        }

        [Column(Storage = "_BonusAmount", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long BonusAmount
        {
            get
            {
                return this._BonusAmount;
            }
            set
            {
                if (this._BonusAmount != value)
                {
                    this.OnBonusAmountChanging(value);
                    this.SendPropertyChanging();
                    this._BonusAmount = value;
                    this.SendPropertyChanged("BonusAmount");
                    this.OnBonusAmountChanged();
                }
            }
        }

        [Column(Name = @"BONUSSTATUS", Storage = "_BonusStatus", DbType = "CHAR(1)")]
        public string BonusStatus
        {
            get
            {
                return this._BonusStatus;
            }
            set
            {
                if (this._BonusStatus != value)
                {
                    this.OnBonusStatusChanging(value);
                    this.SendPropertyChanging();
                    this._BonusStatus = value;
                    this.SendPropertyChanged("BonusStatus");
                    this.OnBonusStatusChanged();
                }
            }
        }

        [Column(Name = @"FIN_COMMENT", Storage = "_FinComment", DbType = "NVARCHAR2(1024)")]
        public string FinComment
        {
            get
            {
                return this._FinComment;
            }
            set
            {
                if (this._FinComment != value)
                {
                    this.OnFinCommentChanging(value);
                    this.SendPropertyChanging();
                    this._FinComment = value;
                    this.SendPropertyChanged("FinComment");
                    this.OnFinCommentChanged();
                }
            }
        }

        [Column(Name = @"FIN_VOUCHER", Storage = "_FinVoucher", DbType = "VARCHAR2(30)")]
        public string FinVoucher
        {
            get
            {
                return this._FinVoucher;
            }
            set
            {
                if (this._FinVoucher != value)
                {
                    this.OnFinVoucherChanging(value);
                    this.SendPropertyChanging();
                    this._FinVoucher = value;
                    this.SendPropertyChanged("FinVoucher");
                    this.OnFinVoucherChanged();
                }
            }
        }

        [Association(Name="OrderHeader_OrderDetail", Storage="_OrderDetails", OtherKey="OrderHeaderId")]
        public EntitySet<OrderDetail> OrderDetails
        {
            get
            {
                return this._OrderDetails;
            }
            set
            {
                this._OrderDetails.Assign(value);
            }
        }

        [Association(Name="OrderHeader_SaleOrderPayment", Storage="_SaleOrderPayments", OtherKey="OrderHeaderId")]
        public EntitySet<SaleOrderPayment> SaleOrderPayments
        {
            get
            {
                return this._SaleOrderPayments;
            }
            set
            {
                this._SaleOrderPayments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.OrderHeader = this;
        }
    
        private void detach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.OrderHeader = null;
        }

        private void attach_SaleOrderPayments(SaleOrderPayment entity)
        {
            this.SendPropertyChanging("SaleOrderPayments");
            entity.OrderHeader = this;
        }
    
        private void detach_SaleOrderPayments(SaleOrderPayment entity)
        {
            this.SendPropertyChanging("SaleOrderPayments");
            entity.OrderHeader = null;
        }
    }

    [Table(Name = @"VDMS.SALE_ORDER_PAYMENT")]
    public partial class SaleOrderPayment : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _OrderPaymentId;

        private long _OrderHeaderId;

        private string _VoucherNumber;

        private string _FromBank;

        private string _FromAccount;

        private string _FromAccountHolder;

        private string _ToBank;

        private string _ToAccount;

        private string _ToAccountHolder;

        private decimal _Amount;

        private string _PaymentType;

        private System.Nullable<System.DateTime> _PaymentDate;

        private System.DateTime _CreatedDate;

        private System.DateTime _LastEditDate;

        private string _UserName;

        private string _Description;

        private EntityRef<OrderHeader> _OrderHeader;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderPaymentIdChanging(long value);
        partial void OnOrderPaymentIdChanged();
        partial void OnOrderHeaderIdChanging(long value);
        partial void OnOrderHeaderIdChanged();
        partial void OnVoucherNumberChanging(string value);
        partial void OnVoucherNumberChanged();
        partial void OnFromBankChanging(string value);
        partial void OnFromBankChanged();
        partial void OnFromAccountChanging(string value);
        partial void OnFromAccountChanged();
        partial void OnFromAccountHolderChanging(string value);
        partial void OnFromAccountHolderChanged();
        partial void OnToBankChanging(string value);
        partial void OnToBankChanged();
        partial void OnToAccountChanging(string value);
        partial void OnToAccountChanged();
        partial void OnToAccountHolderChanging(string value);
        partial void OnToAccountHolderChanged();
        partial void OnAmountChanging(decimal value);
        partial void OnAmountChanged();
        partial void OnPaymentTypeChanging(string value);
        partial void OnPaymentTypeChanged();
        partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPaymentDateChanged();
        partial void OnCreatedDateChanging(System.DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnLastEditDateChanging(System.DateTime value);
        partial void OnLastEditDateChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public SaleOrderPayment()
        {
            this._OrderHeader  = default(EntityRef<OrderHeader>);
            OnCreated();
        }

        [Column(Name = @"ORDER_PAYMENT_ID", Storage = "_OrderPaymentId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long OrderPaymentId
        {
            get
            {
                return this._OrderPaymentId;
            }
            set
            {
                if (this._OrderPaymentId != value)
                {
                    this.OnOrderPaymentIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderPaymentId = value;
                    this.SendPropertyChanged("OrderPaymentId");
                    this.OnOrderPaymentIdChanged();
                }
            }
        }

        [Column(Name = @"ORDER_HEADER_ID", Storage = "_OrderHeaderId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
        public long OrderHeaderId
        {
            get
            {
                return this._OrderHeaderId;
            }
            set
            {
                if (this._OrderHeaderId != value)
                {
                    if (this._OrderHeader.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderHeaderIdChanging(value);
                    this.SendPropertyChanging();
                    this._OrderHeaderId = value;
                    this.SendPropertyChanged("OrderHeaderId");
                    this.OnOrderHeaderIdChanged();
                }
            }
        }

        [Column(Name = @"VOUCHER_NUMBER", Storage = "_VoucherNumber", CanBeNull = false, DbType = "VARCHAR2(70) NOT NULL")]
        public string VoucherNumber
        {
            get
            {
                return this._VoucherNumber;
            }
            set
            {
                if (this._VoucherNumber != value)
                {
                    this.OnVoucherNumberChanging(value);
                    this.SendPropertyChanging();
                    this._VoucherNumber = value;
                    this.SendPropertyChanged("VoucherNumber");
                    this.OnVoucherNumberChanged();
                }
            }
        }

        [Column(Name = @"FROM_BANK", Storage = "_FromBank", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string FromBank
        {
            get
            {
                return this._FromBank;
            }
            set
            {
                if (this._FromBank != value)
                {
                    this.OnFromBankChanging(value);
                    this.SendPropertyChanging();
                    this._FromBank = value;
                    this.SendPropertyChanged("FromBank");
                    this.OnFromBankChanged();
                }
            }
        }

        [Column(Name = @"FROM_ACCOUNT", Storage = "_FromAccount", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
        public string FromAccount
        {
            get
            {
                return this._FromAccount;
            }
            set
            {
                if (this._FromAccount != value)
                {
                    this.OnFromAccountChanging(value);
                    this.SendPropertyChanging();
                    this._FromAccount = value;
                    this.SendPropertyChanged("FromAccount");
                    this.OnFromAccountChanged();
                }
            }
        }

        [Column(Name = @"FROM_ACCOUNT_HOLDER", Storage = "_FromAccountHolder", DbType = "NVARCHAR2(400)")]
        public string FromAccountHolder
        {
            get
            {
                return this._FromAccountHolder;
            }
            set
            {
                if (this._FromAccountHolder != value)
                {
                    this.OnFromAccountHolderChanging(value);
                    this.SendPropertyChanging();
                    this._FromAccountHolder = value;
                    this.SendPropertyChanged("FromAccountHolder");
                    this.OnFromAccountHolderChanged();
                }
            }
        }

        [Column(Name = @"TO_BANK", Storage = "_ToBank", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string ToBank
        {
            get
            {
                return this._ToBank;
            }
            set
            {
                if (this._ToBank != value)
                {
                    this.OnToBankChanging(value);
                    this.SendPropertyChanging();
                    this._ToBank = value;
                    this.SendPropertyChanged("ToBank");
                    this.OnToBankChanged();
                }
            }
        }

        [Column(Name = @"TO_ACCOUNT", Storage = "_ToAccount", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
        public string ToAccount
        {
            get
            {
                return this._ToAccount;
            }
            set
            {
                if (this._ToAccount != value)
                {
                    this.OnToAccountChanging(value);
                    this.SendPropertyChanging();
                    this._ToAccount = value;
                    this.SendPropertyChanged("ToAccount");
                    this.OnToAccountChanged();
                }
            }
        }

        [Column(Name = @"TO_ACCOUNT_HOLDER", Storage = "_ToAccountHolder", DbType = "NVARCHAR2(400)")]
        public string ToAccountHolder
        {
            get
            {
                return this._ToAccountHolder;
            }
            set
            {
                if (this._ToAccountHolder != value)
                {
                    this.OnToAccountHolderChanging(value);
                    this.SendPropertyChanging();
                    this._ToAccountHolder = value;
                    this.SendPropertyChanged("ToAccountHolder");
                    this.OnToAccountHolderChanged();
                }
            }
        }

        [Column(Name = @"AMOUNT", Storage = "_Amount", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Column(Name = @"PAYMENT_TYPE", Storage = "_PaymentType", CanBeNull = false, DbType = "CHAR(2) NOT NULL")]
        public string PaymentType
        {
            get
            {
                return this._PaymentType;
            }
            set
            {
                if (this._PaymentType != value)
                {
                    this.OnPaymentTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentType = value;
                    this.SendPropertyChanged("PaymentType");
                    this.OnPaymentTypeChanged();
                }
            }
        }

        [Column(Name = @"PAYMENT_DATE", Storage = "_PaymentDate", DbType = "TIMESTAMP")]
        public System.Nullable<System.DateTime> PaymentDate
        {
            get
            {
                return this._PaymentDate;
            }
            set
            {
                if (this._PaymentDate != value)
                {
                    this.OnPaymentDateChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentDate = value;
                    this.SendPropertyChanged("PaymentDate");
                    this.OnPaymentDateChanged();
                }
            }
        }

        [Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

        [Column(Name = @"LAST_EDIT_DATE", Storage = "_LastEditDate", CanBeNull = false, DbType = "TIMESTAMP NOT NULL")]
        public System.DateTime LastEditDate
        {
            get
            {
                return this._LastEditDate;
            }
            set
            {
                if (this._LastEditDate != value)
                {
                    this.OnLastEditDateChanging(value);
                    this.SendPropertyChanging();
                    this._LastEditDate = value;
                    this.SendPropertyChanged("LastEditDate");
                    this.OnLastEditDateChanged();
                }
            }
        }

        [Column(Name = @"USER_NAME", Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

        [Column(Name = @"""Description""", Storage = "_Description", DbType = "NVARCHAR2(1024)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Association(Name="OrderHeader_SaleOrderPayment", Storage="_OrderHeader", ThisKey="OrderHeaderId", IsForeignKey=true)]
        public OrderHeader OrderHeader
        {
            get
            {
                return this._OrderHeader.Entity;
            }
            set
            {
                OrderHeader previousValue = this._OrderHeader.Entity;
                if ((previousValue != value) || (this._OrderHeader.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._OrderHeader.Entity = null;
                        previousValue.SaleOrderPayments.Remove(this);
                    }
                    this._OrderHeader.Entity = value;
                    if (value != null)
                    {
                        value.SaleOrderPayments.Add(this);
                        this._OrderHeaderId = value.OrderHeaderId;
                    }
                    else
                    {
                        this._OrderHeaderId = default(long);
                    }
                    this.SendPropertyChanged("OrderHeader");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [Table(Name = @"VDMS.V2_P_DEALER")]
    public partial class Dealer : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _DealerCode;

        private string _ParentCode;

        private System.Nullable<long> _ContactId;

        private string _DealerName;

        private string _DealerType;

        private string _Address;

        private string _DatabaseCode;

        private string _AreaCode;

        private int _ReceiveSpan;

        private long _DefaultWarehouseId;

        private long _DefaultVWarehouseId;

        private long _OrderDateControl;

        private EntitySet<Dealer> _Dealers;

        private EntityRef<Dealer> _Dealer1;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnDealerCodeChanging(string value);
        partial void OnDealerCodeChanged();
        partial void OnParentCodeChanging(string value);
        partial void OnParentCodeChanged();
        partial void OnContactIdChanging(System.Nullable<long> value);
        partial void OnContactIdChanged();
        partial void OnDealerNameChanging(string value);
        partial void OnDealerNameChanged();
        partial void OnDealerTypeChanging(string value);
        partial void OnDealerTypeChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnDatabaseCodeChanging(string value);
        partial void OnDatabaseCodeChanged();
        partial void OnAreaCodeChanging(string value);
        partial void OnAreaCodeChanged();
        partial void OnReceiveSpanChanging(int value);
        partial void OnReceiveSpanChanged();
        partial void OnDefaultWarehouseIdChanging(long value);
        partial void OnDefaultWarehouseIdChanged();
        partial void OnDefaultVWarehouseIdChanging(long value);
        partial void OnDefaultVWarehouseIdChanged();
        partial void OnOrderDateControlChanging(long value);
        partial void OnOrderDateControlChanged();
        #endregion

        public Dealer()
        {
            this._Dealers = new EntitySet<Dealer>(new Action<Dealer>(this.attach_Dealers), new Action<Dealer>(this.detach_Dealers));
            this._Dealer1  = default(EntityRef<Dealer>);
            OnCreated();
        }

        [Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL", IsPrimaryKey = true)]
        public string DealerCode
        {
            get
            {
                return this._DealerCode;
            }
            set
            {
                if (this._DealerCode != value)
                {
                    this.OnDealerCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerCode = value;
                    this.SendPropertyChanged("DealerCode");
                    this.OnDealerCodeChanged();
                }
            }
        }

        [Column(Name = @"PARENT_CODE", Storage = "_ParentCode", DbType = "VARCHAR2(30)")]
        public string ParentCode
        {
            get
            {
                return this._ParentCode;
            }
            set
            {
                if (this._ParentCode != value)
                {
                    if (this._Dealer1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentCodeChanging(value);
                    this.SendPropertyChanging();
                    this._ParentCode = value;
                    this.SendPropertyChanged("ParentCode");
                    this.OnParentCodeChanged();
                }
            }
        }

        [Column(Name = @"CONTACT_ID", Storage = "_ContactId", DbType = "NUMBER(10)")]
        public System.Nullable<long> ContactId
        {
            get
            {
                return this._ContactId;
            }
            set
            {
                if (this._ContactId != value)
                {
                    this.OnContactIdChanging(value);
                    this.SendPropertyChanging();
                    this._ContactId = value;
                    this.SendPropertyChanged("ContactId");
                    this.OnContactIdChanged();
                }
            }
        }

        [Column(Name = @"DEALER_NAME", Storage = "_DealerName", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
        public string DealerName
        {
            get
            {
                return this._DealerName;
            }
            set
            {
                if (this._DealerName != value)
                {
                    this.OnDealerNameChanging(value);
                    this.SendPropertyChanging();
                    this._DealerName = value;
                    this.SendPropertyChanged("DealerName");
                    this.OnDealerNameChanged();
                }
            }
        }

        [Column(Name = @"DEALER_TYPE", Storage = "_DealerType", DbType = "CHAR(2)")]
        public string DealerType
        {
            get
            {
                return this._DealerType;
            }
            set
            {
                if (this._DealerType != value)
                {
                    this.OnDealerTypeChanging(value);
                    this.SendPropertyChanging();
                    this._DealerType = value;
                    this.SendPropertyChanged("DealerType");
                    this.OnDealerTypeChanged();
                }
            }
        }

        [Column(Name = @"ADDRESS", Storage = "_Address", DbType = "NVARCHAR2(512)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [Column(Name = @"DATABASE_CODE", Storage = "_DatabaseCode", CanBeNull = false, DbType = "VARCHAR2(10) NOT NULL")]
        public string DatabaseCode
        {
            get
            {
                return this._DatabaseCode;
            }
            set
            {
                if (this._DatabaseCode != value)
                {
                    this.OnDatabaseCodeChanging(value);
                    this.SendPropertyChanging();
                    this._DatabaseCode = value;
                    this.SendPropertyChanged("DatabaseCode");
                    this.OnDatabaseCodeChanged();
                }
            }
        }

        [Column(Name = @"AREA_CODE", Storage = "_AreaCode", CanBeNull = false, DbType = "VARCHAR2(25) NOT NULL")]
        public string AreaCode
        {
            get
            {
                return this._AreaCode;
            }
            set
            {
                if (this._AreaCode != value)
                {
                    this.OnAreaCodeChanging(value);
                    this.SendPropertyChanging();
                    this._AreaCode = value;
                    this.SendPropertyChanged("AreaCode");
                    this.OnAreaCodeChanged();
                }
            }
        }

        [Column(Name = @"RECEIVE_SPAN", Storage = "_ReceiveSpan", CanBeNull = false, DbType = "NUMBER(3) NOT NULL")]
        public int ReceiveSpan
        {
            get
            {
                return this._ReceiveSpan;
            }
            set
            {
                if (this._ReceiveSpan != value)
                {
                    this.OnReceiveSpanChanging(value);
                    this.SendPropertyChanging();
                    this._ReceiveSpan = value;
                    this.SendPropertyChanged("ReceiveSpan");
                    this.OnReceiveSpanChanged();
                }
            }
        }

        [Column(Name = @"DEFAULT_WAREHOUSE_ID", Storage = "_DefaultWarehouseId", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long DefaultWarehouseId
        {
            get
            {
                return this._DefaultWarehouseId;
            }
            set
            {
                if (this._DefaultWarehouseId != value)
                {
                    this.OnDefaultWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefaultWarehouseId = value;
                    this.SendPropertyChanged("DefaultWarehouseId");
                    this.OnDefaultWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"DEFAULT_V_WAREHOUSE_ID", Storage = "_DefaultVWarehouseId", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long DefaultVWarehouseId
        {
            get
            {
                return this._DefaultVWarehouseId;
            }
            set
            {
                if (this._DefaultVWarehouseId != value)
                {
                    this.OnDefaultVWarehouseIdChanging(value);
                    this.SendPropertyChanging();
                    this._DefaultVWarehouseId = value;
                    this.SendPropertyChanged("DefaultVWarehouseId");
                    this.OnDefaultVWarehouseIdChanged();
                }
            }
        }

        [Column(Name = @"ORDER_DATE_CONTROL", Storage = "_OrderDateControl", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
        public long OrderDateControl
        {
            get
            {
                return this._OrderDateControl;
            }
            set
            {
                if (this._OrderDateControl != value)
                {
                    this.OnOrderDateControlChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDateControl = value;
                    this.SendPropertyChanged("OrderDateControl");
                    this.OnOrderDateControlChanged();
                }
            }
        }

        [Association(Name="Dealer_Dealer", Storage="_Dealers", OtherKey="ParentCode")]
        public EntitySet<Dealer> Dealers
        {
            get
            {
                return this._Dealers;
            }
            set
            {
                this._Dealers.Assign(value);
            }
        }

        [Association(Name="Dealer_Dealer", Storage="_Dealer1", ThisKey="ParentCode", IsForeignKey=true)]
        public Dealer Dealer1
        {
            get
            {
                return this._Dealer1.Entity;
            }
            set
            {
                Dealer previousValue = this._Dealer1.Entity;
                if ((previousValue != value) || (this._Dealer1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Dealer1.Entity = null;
                        previousValue.Dealers.Remove(this);
                    }
                    this._Dealer1.Entity = value;
                    if (value != null)
                    {
                        value.Dealers.Add(this);
                        this._ParentCode = value.DealerCode;
                    }
                    else
                    {
                        this._ParentCode = default(string);
                    }
                    this.SendPropertyChanged("Dealer1");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Dealers(Dealer entity)
        {
            this.SendPropertyChanging("Dealers");
            entity.Dealer1 = this;
        }
    
        private void detach_Dealers(Dealer entity)
        {
            this.SendPropertyChanging("Dealers");
            entity.Dealer1 = null;
        }
    }
}
