//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 6/1/2009 10:48:24 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace VDMS.II.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
    using VDMS.Provider;
	[System.Data.Linq.Mapping.DatabaseAttribute(Name = "VDMS")]
	[ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
	public partial class SecurityDataContext : Devart.Data.Linq.DataContext
	{
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertRoleInPath(VDMS.II.Entity.RoleInPath instance);
		partial void UpdateRoleInPath(VDMS.II.Entity.RoleInPath instance);
		partial void DeleteRoleInPath(VDMS.II.Entity.RoleInPath instance);
		partial void InsertRoleInTask(VDMS.II.Entity.RoleInTask instance);
		partial void UpdateRoleInTask(VDMS.II.Entity.RoleInTask instance);
		partial void DeleteRoleInTask(VDMS.II.Entity.RoleInTask instance);
		partial void InsertSiteMap(VDMS.II.Entity.SiteMap instance);
		partial void UpdateSiteMap(VDMS.II.Entity.SiteMap instance);
		partial void DeleteSiteMap(VDMS.II.Entity.SiteMap instance);
		partial void InsertTask(VDMS.II.Entity.Task instance);
		partial void UpdateTask(VDMS.II.Entity.Task instance);
		partial void DeleteTask(VDMS.II.Entity.Task instance);
		partial void InsertUserProfile(VDMS.II.Entity.UserProfile instance);
		partial void UpdateUserProfile(VDMS.II.Entity.UserProfile instance);
		partial void DeleteUserProfile(VDMS.II.Entity.UserProfile instance);
		partial void InsertRole(VDMS.II.Entity.Role instance);
		partial void UpdateRole(VDMS.II.Entity.Role instance);
		partial void DeleteRole(VDMS.II.Entity.Role instance);
		#endregion

		public SecurityDataContext() :
			//base(@"User Id=vdms;Password=vdms;Server=vdms;Home=orahome92;Unicode=True", mappingSource)
            base(VDMSProvider.ConnectionString, mappingSource)
		{
			OnCreated();
		}

		public SecurityDataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public SecurityDataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public SecurityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public SecurityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public Devart.Data.Linq.Table<VDMS.II.Entity.RoleInPath> RoleInPaths
		{
			get
			{
				return this.GetTable<VDMS.II.Entity.RoleInPath>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.II.Entity.RoleInTask> RoleInTasks
		{
			get
			{
				return this.GetTable<VDMS.II.Entity.RoleInTask>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.II.Entity.SiteMap> SiteMaps
		{
			get
			{
				return this.GetTable<VDMS.II.Entity.SiteMap>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.II.Entity.Task> Tasks
		{
			get
			{
				return this.GetTable<VDMS.II.Entity.Task>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.II.Entity.UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<VDMS.II.Entity.UserProfile>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.II.Entity.Role> Roles
		{
			get
			{
				return this.GetTable<VDMS.II.Entity.Role>();
			}
		}
	}
}

namespace VDMS.II.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;

	[Table(Name = @"VDMS.V2_APP_ROLE_IN_PATH")]
	public partial class RoleInPath : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _RolePathId;

		private string _RoleName;

		private string _ApplicationName;

		private long _PathId;

		private EntityRef<SiteMap> _SiteMap;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRolePathIdChanging(long value);
		partial void OnRolePathIdChanged();
		partial void OnRoleNameChanging(string value);
		partial void OnRoleNameChanged();
		partial void OnApplicationNameChanging(string value);
		partial void OnApplicationNameChanged();
		partial void OnPathIdChanging(long value);
		partial void OnPathIdChanged();
		#endregion

		public RoleInPath()
		{
			this._SiteMap = default(EntityRef<SiteMap>);
			OnCreated();
		}

		[Column(Name = @"ROLE_PATH_ID", Storage = "_RolePathId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long RolePathId
		{
			get
			{
				return this._RolePathId;
			}
			set
			{
				if (this._RolePathId != value)
				{
					this.OnRolePathIdChanging(value);
					this.SendPropertyChanging();
					this._RolePathId = value;
					this.SendPropertyChanged("RolePathId");
					this.OnRolePathIdChanged();
				}
			}
		}

		[Column(Name = @"ROLE_NAME", Storage = "_RoleName", CanBeNull = false, DbType = "VARCHAR2(255) NOT NULL")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if (this._RoleName != value)
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}

		[Column(Name = @"APPLICATION_NAME", Storage = "_ApplicationName", CanBeNull = false, DbType = "VARCHAR2(255) NOT NULL")]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if (this._ApplicationName != value)
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}

		[Column(Name = @"PATH_ID", Storage = "_PathId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if (this._PathId != value)
				{
					if (this._SiteMap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}

		[Association(Name = "SiteMap_RoleInPath", Storage = "_SiteMap", ThisKey = "PathId", IsForeignKey = true)]
		public SiteMap SiteMap
		{
			get
			{
				return this._SiteMap.Entity;
			}
			set
			{
				SiteMap previousValue = this._SiteMap.Entity;
				if (((previousValue != value)
							|| (this._SiteMap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteMap.Entity = null;
						previousValue.RoleInPaths.Remove(this);
					}
					this._SiteMap.Entity = value;
					if ((value != null))
					{
						value.RoleInPaths.Add(this);
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(long);
					}
					this.SendPropertyChanged("SiteMap");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.V2_APP_ROLE_IN_TASK")]
	public partial class RoleInTask : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _RoleTaskId;

		private long _TaskId;

		private string _RoleName;

		private string _ApplicationName;

		private EntityRef<Task> _Task;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRoleTaskIdChanging(long value);
		partial void OnRoleTaskIdChanged();
		partial void OnTaskIdChanging(long value);
		partial void OnTaskIdChanged();
		partial void OnRoleNameChanging(string value);
		partial void OnRoleNameChanged();
		partial void OnApplicationNameChanging(string value);
		partial void OnApplicationNameChanged();
		#endregion

		public RoleInTask()
		{
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}

		[Column(Name = @"ROLE_TASK_ID", Storage = "_RoleTaskId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(38) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long RoleTaskId
		{
			get
			{
				return this._RoleTaskId;
			}
			set
			{
				if (this._RoleTaskId != value)
				{
					this.OnRoleTaskIdChanging(value);
					this.SendPropertyChanging();
					this._RoleTaskId = value;
					this.SendPropertyChanged("RoleTaskId");
					this.OnRoleTaskIdChanged();
				}
			}
		}

		[Column(Name = @"TASK_ID", Storage = "_TaskId", CanBeNull = false, DbType = "NUMBER(38) NOT NULL")]
		public long TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if (this._TaskId != value)
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}

		[Column(Name = @"ROLE_NAME", Storage = "_RoleName", CanBeNull = false, DbType = "VARCHAR2(255) NOT NULL")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if (this._RoleName != value)
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}

		[Column(Name = @"APPLICATION_NAME", Storage = "_ApplicationName", CanBeNull = false, DbType = "VARCHAR2(255) NOT NULL")]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if (this._ApplicationName != value)
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}

		[Association(Name = "Task_RoleInTask", Storage = "_Task", ThisKey = "TaskId", IsForeignKey = true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value)
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.RoleInTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.RoleInTasks.Add(this);
						this._TaskId = value.TaskId;
					}
					else
					{
						this._TaskId = default(long);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.V2_APP_SITE_MAP")]
	public partial class SiteMap : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _PathId;

		private string _Url;

		private EntitySet<RoleInPath> _RoleInPaths;

		private EntitySet<Task> _Tasks;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnPathIdChanging(long value);
		partial void OnPathIdChanged();
		partial void OnUrlChanging(string value);
		partial void OnUrlChanged();
		#endregion

		public SiteMap()
		{
			this._RoleInPaths = new EntitySet<RoleInPath>(new Action<RoleInPath>(this.attach_RoleInPaths), new Action<RoleInPath>(this.detach_RoleInPaths));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}

		[Column(Name = @"PATH_ID", Storage = "_PathId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if (this._PathId != value)
				{
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}

		[Column(Name = @"URL", Storage = "_Url", CanBeNull = false, DbType = "VARCHAR2(4000) NOT NULL")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if (this._Url != value)
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}

		[Association(Name = "SiteMap_RoleInPath", Storage = "_RoleInPaths", OtherKey = "PathId")]
		public EntitySet<RoleInPath> RoleInPaths
		{
			get
			{

				return this._RoleInPaths;
			}
			set
			{
				this._RoleInPaths.Assign(value);
			}
		}

		[Association(Name = "SiteMap_Task", Storage = "_Tasks", OtherKey = "PathId")]
		public EntitySet<Task> Tasks
		{
			get
			{

				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_RoleInPaths(RoleInPath entity)
		{
			this.SendPropertyChanging();
			entity.SiteMap = this;
		}

		private void detach_RoleInPaths(RoleInPath entity)
		{
			this.SendPropertyChanging();
			entity.SiteMap = null;
		}

		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.SiteMap = this;
		}

		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.SiteMap = null;
		}
	}

	[Table(Name = @"VDMS.V2_APP_TASK")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _TaskId;

		private long _PathId;

		private string _TaskName;

		private string _CommandName;

		private EntitySet<RoleInTask> _RoleInTasks;

		private EntityRef<SiteMap> _SiteMap;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTaskIdChanging(long value);
		partial void OnTaskIdChanged();
		partial void OnPathIdChanging(long value);
		partial void OnPathIdChanged();
		partial void OnTaskNameChanging(string value);
		partial void OnTaskNameChanged();
		partial void OnCommandNameChanging(string value);
		partial void OnCommandNameChanged();
		#endregion

		public Task()
		{
			this._RoleInTasks = new EntitySet<RoleInTask>(new Action<RoleInTask>(this.attach_RoleInTasks), new Action<RoleInTask>(this.detach_RoleInTasks));
			this._SiteMap = default(EntityRef<SiteMap>);
			OnCreated();
		}

		[Column(Name = @"TASK_ID", Storage = "_TaskId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(38) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if (this._TaskId != value)
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}

		[Column(Name = @"PATH_ID", Storage = "_PathId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if (this._PathId != value)
				{
					if (this._SiteMap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}

		[Column(Name = @"TASK_NAME", Storage = "_TaskName", CanBeNull = false, DbType = "NVARCHAR2(150) NOT NULL")]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if (this._TaskName != value)
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}

		[Column(Name = @"COMMAND_NAME", Storage = "_CommandName", DbType = "VARCHAR2(30)")]
		public string CommandName
		{
			get
			{
				return this._CommandName;
			}
			set
			{
				if (this._CommandName != value)
				{
					this.OnCommandNameChanging(value);
					this.SendPropertyChanging();
					this._CommandName = value;
					this.SendPropertyChanged("CommandName");
					this.OnCommandNameChanged();
				}
			}
		}

		[Association(Name = "Task_RoleInTask", Storage = "_RoleInTasks", OtherKey = "TaskId")]
		public EntitySet<RoleInTask> RoleInTasks
		{
			get
			{

				return this._RoleInTasks;
			}
			set
			{
				this._RoleInTasks.Assign(value);
			}
		}

		[Association(Name = "SiteMap_Task", Storage = "_SiteMap", ThisKey = "PathId", IsForeignKey = true)]
		public SiteMap SiteMap
		{
			get
			{
				return this._SiteMap.Entity;
			}
			set
			{
				SiteMap previousValue = this._SiteMap.Entity;
				if (((previousValue != value)
							|| (this._SiteMap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteMap.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._SiteMap.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(long);
					}
					this.SendPropertyChanged("SiteMap");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_RoleInTasks(RoleInTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}

		private void detach_RoleInTasks(RoleInTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}

	[Table(Name = @"VDMS.V2_APP_USER_PROFILE")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _UserName;

		private string _DealerCode;

		private string _DatabaseCode;

		private string _AreaCode;

		private string _Dept;

		private string _Position;

		private System.Nullable<int> _NGLevel;

		private string _FullName;

		private System.Nullable<long> _WarehouseId;

		private System.Nullable<long> _VWarehouseId;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnUserNameChanging(string value);
		partial void OnUserNameChanged();
		partial void OnDealerCodeChanging(string value);
		partial void OnDealerCodeChanged();
		partial void OnDatabaseCodeChanging(string value);
		partial void OnDatabaseCodeChanged();
		partial void OnAreaCodeChanging(string value);
		partial void OnAreaCodeChanged();
		partial void OnDeptChanging(string value);
		partial void OnDeptChanged();
		partial void OnPositionChanging(string value);
		partial void OnPositionChanged();
		partial void OnNGLevelChanging(System.Nullable<int> value);
		partial void OnNGLevelChanged();
		partial void OnFullNameChanging(string value);
		partial void OnFullNameChanged();
		partial void OnWarehouseIdChanging(System.Nullable<long> value);
		partial void OnWarehouseIdChanged();
		partial void OnVWarehouseIdChanging(System.Nullable<long> value);
		partial void OnVWarehouseIdChanged();
		#endregion

		public UserProfile()
		{
			OnCreated();
		}

		[Column(Name = @"USER_NAME", Storage = "_UserName", CanBeNull = false, DbType = "NVARCHAR2(768) NOT NULL", IsPrimaryKey = true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if (this._UserName != value)
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}

		[Column(Name = @"DEALER_CODE", Storage = "_DealerCode", CanBeNull = false, DbType = "VARCHAR2(30)", IsPrimaryKey = true)]
		public string DealerCode
		{
			get
			{
				return this._DealerCode;
			}
			set
			{
				if (this._DealerCode != value)
				{
					this.OnDealerCodeChanging(value);
					this.SendPropertyChanging();
					this._DealerCode = value;
					this.SendPropertyChanged("DealerCode");
					this.OnDealerCodeChanged();
				}
			}
		}

		[Column(Name = @"DATABASE_CODE", Storage = "_DatabaseCode", DbType = "CHAR(10)")]
		public string DatabaseCode
		{
			get
			{
				return this._DatabaseCode;
			}
			set
			{
				if (this._DatabaseCode != value)
				{
					this.OnDatabaseCodeChanging(value);
					this.SendPropertyChanging();
					this._DatabaseCode = value;
					this.SendPropertyChanged("DatabaseCode");
					this.OnDatabaseCodeChanged();
				}
			}
		}

		[Column(Name = @"AREA_CODE", Storage = "_AreaCode", DbType = "CHAR(25)")]
		public string AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if (this._AreaCode != value)
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}

		[Column(Name = @"DEPT", Storage = "_Dept", DbType = "CHAR(2) NOT NULL")]
		public string Dept
		{
			get
			{
				return this._Dept;
			}
			set
			{
				if (this._Dept != value)
				{
					this.OnDeptChanging(value);
					this.SendPropertyChanging();
					this._Dept = value;
					this.SendPropertyChanged("Dept");
					this.OnDeptChanged();
				}
			}
		}

		[Column(Name = @"POSITION", Storage = "_Position", DbType = "VARCHAR2(1) NOT NULL")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if (this._Position != value)
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}

		[Column(Name = @"N_G_LEVEL", Storage = "_NGLevel", DbType = "NUMBER(3)")]
		public System.Nullable<int> NGLevel
		{
			get
			{
				return this._NGLevel;
			}
			set
			{
				if (this._NGLevel != value)
				{
					this.OnNGLevelChanging(value);
					this.SendPropertyChanging();
					this._NGLevel = value;
					this.SendPropertyChanged("NGLevel");
					this.OnNGLevelChanged();
				}
			}
		}

		[Column(Name = @"Full_Name", Storage = "_FullName", DbType = "NVARCHAR2(150) NOT NULL")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if (this._FullName != value)
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}

		[Column(Name = @"Warehouse_Id", Storage = "_WarehouseId", DbType = "NUMBER(10) NOT NULL")]
		public System.Nullable<long> WarehouseId
		{
			get
			{
				return this._WarehouseId;
			}
			set
			{
				if (this._WarehouseId != value)
				{
					this.OnWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._WarehouseId = value;
					this.SendPropertyChanged("WarehouseId");
					this.OnWarehouseIdChanged();
				}
			}
		}

		[Column(Name = @"V_Warehouse_Id", Storage = "_VWarehouseId", DbType = "NUMBER(10) NOT NULL")]
		public System.Nullable<long> VWarehouseId
		{
			get
			{
				return this._VWarehouseId;
			}
			set
			{
				if (this._VWarehouseId != value)
				{
					this.OnVWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._VWarehouseId = value;
					this.SendPropertyChanged("VWarehouseId");
					this.OnVWarehouseIdChanged();
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.ASPNET_ROLES")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private System.Guid _RoleId;

		private long _RoleIndex;

		private string _ApplicationName;

		private string _RoleName;

		private System.Nullable<long> _ParentRoleIndex;

		private EntitySet<Role> _Roles;

		private EntityRef<Role> _Role1;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRoleIdChanging(System.Guid value);
		partial void OnRoleIdChanged();
		partial void OnRoleIndexChanging(long value);
		partial void OnRoleIndexChanged();
		partial void OnApplicationNameChanging(string value);
		partial void OnApplicationNameChanged();
		partial void OnRoleNameChanging(string value);
		partial void OnRoleNameChanged();
		partial void OnParentRoleIndexChanging(System.Nullable<long> value);
		partial void OnParentRoleIndexChanged();
		#endregion

		public Role()
		{
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}

		[Column(Name = @"ROLEID", Storage = "_RoleId", CanBeNull = false, DbType = "RAW(16) NOT NULL")]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if (this._RoleId != value)
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}

		[Column(Name = @"ROLEINDEX", Storage = "_RoleIndex", CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsPrimaryKey = true)]
		public long RoleIndex
		{
			get
			{
				return this._RoleIndex;
			}
			set
			{
				if (this._RoleIndex != value)
				{
					this.OnRoleIndexChanging(value);
					this.SendPropertyChanging();
					this._RoleIndex = value;
					this.SendPropertyChanged("RoleIndex");
					this.OnRoleIndexChanged();
				}
			}
		}

		[Column(Name = @"APPLICATIONNAME", Storage = "_ApplicationName", CanBeNull = false, DbType = "NVARCHAR2(255) NOT NULL")]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if (this._ApplicationName != value)
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}

		[Column(Name = @"ROLENAME", Storage = "_RoleName", CanBeNull = false, DbType = "NVARCHAR2(255) NOT NULL")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if (this._RoleName != value)
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}

		[Column(Name = @"PARENTROLEINDEX", Storage = "_ParentRoleIndex", DbType = "NUMBER(10)")]
		public System.Nullable<long> ParentRoleIndex
		{
			get
			{
				return this._ParentRoleIndex;
			}
			set
			{
				if (this._ParentRoleIndex != value)
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentRoleIndexChanging(value);
					this.SendPropertyChanging();
					this._ParentRoleIndex = value;
					this.SendPropertyChanged("ParentRoleIndex");
					this.OnParentRoleIndexChanged();
				}
			}
		}

		[Association(Name = "Role_Role", Storage = "_Roles", OtherKey = "ParentRoleIndex")]
		public EntitySet<Role> Roles
		{
			get
			{

				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}

		[Association(Name = "Role_Role", Storage = "_Role1", ThisKey = "ParentRoleIndex", IsForeignKey = true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value)
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._ParentRoleIndex = value.RoleIndex;
					}
					else
					{
						this._ParentRoleIndex = default(System.Nullable<long>);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}

		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
	}
}
