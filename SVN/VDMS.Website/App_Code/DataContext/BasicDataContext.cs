//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 3/31/2009 5:20:56 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------
namespace VDMS.II.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
    using VDMS.Provider;
	[System.Data.Linq.Mapping.DatabaseAttribute(Name = "VDMS")]
	[ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
	public partial class BasicDataContext : Devart.Data.Linq.DataContext
	{
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertFile(VDMS.II.Entity.File instance);
		partial void UpdateFile(VDMS.II.Entity.File instance);
		partial void DeleteFile(VDMS.II.Entity.File instance);
		partial void InsertMessage(VDMS.II.Entity.Message instance);
		partial void UpdateMessage(VDMS.II.Entity.Message instance);
		partial void DeleteMessage(VDMS.II.Entity.Message instance);
		partial void InsertMessageBox(VDMS.II.Entity.MessageBox instance);
		partial void UpdateMessageBox(VDMS.II.Entity.MessageBox instance);
		partial void DeleteMessageBox(VDMS.II.Entity.MessageBox instance);
		#endregion

		public BasicDataContext() :
			//base(@"User Id=vdms;Password=vdms;Server=VDMS;Unicode=True", mappingSource)
            base(VDMSProvider.ConnectionString, mappingSource)
		{
			OnCreated();
		}

		public BasicDataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public BasicDataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public BasicDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public BasicDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}

		public Devart.Data.Linq.Table<VDMS.II.Entity.File> Files
		{
			get
			{
				return this.GetTable<VDMS.II.Entity.File>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.II.Entity.Message> Messages
		{
			get
			{
				return this.GetTable<VDMS.II.Entity.Message>();
			}
		}

		public Devart.Data.Linq.Table<VDMS.II.Entity.MessageBox> MessageBoxes
		{
			get
			{
				return this.GetTable<VDMS.II.Entity.MessageBox>();
			}
		}
	}
}

namespace VDMS.II.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;

	[Table(Name = @"VDMS.V2_DATA_FILE")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _FileId;

		private long _MessageId;

		private string _FileName;

		private byte[] _Body;

		private EntityRef<Message> _Message;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnFileIdChanging(long value);
		partial void OnFileIdChanged();
		partial void OnMessageIdChanging(long value);
		partial void OnMessageIdChanged();
		partial void OnFileNameChanging(string value);
		partial void OnFileNameChanged();
		partial void OnBodyChanging(byte[] value);
		partial void OnBodyChanged();
		#endregion

		public File()
		{
			this._Message = default(EntityRef<Message>);
			OnCreated();
		}

		[Column(Name = @"FILE_ID", Storage = "_FileId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if (this._FileId != value)
				{
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}

		[Column(Name = @"MESSAGE_ID", Storage = "_MessageId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if (this._MessageId != value)
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}

		[Column(Name = @"FILE_NAME", Storage = "_FileName", CanBeNull = false, DbType = "NVARCHAR2(256) NOT NULL")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if (this._FileName != value)
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}

		[Column(Name = @"BODY", Storage = "_Body", CanBeNull = false, DbType = "LONG RAW NOT NULL")]
		public byte[] Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if (this._Body != value)
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}

		[Association(Name = "Message_File", Storage = "_Message", ThisKey = "MessageId", IsForeignKey = true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value)
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._MessageId = value.MessageId;
					}
					else
					{
						this._MessageId = default(long);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}

	[Table(Name = @"VDMS.V2_DATA_MESSAGE")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _MessageId;

		private System.Nullable<long> _ParentId;

		private string _Body;

		private System.DateTime _CreatedDate;

		private string _CreatedBy;

		private string _Flag;

        private System.Nullable<char> _Type;

		private EntitySet<File> _Files;

		private EntitySet<Message> _Messages;

		private EntitySet<MessageBox> _MessageBoxes;

		private EntityRef<Message> _Message1;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMessageIdChanging(long value);
		partial void OnMessageIdChanged();
		partial void OnParentIdChanging(System.Nullable<long> value);
		partial void OnParentIdChanged();
		partial void OnBodyChanging(string value);
		partial void OnBodyChanged();
		partial void OnCreatedDateChanging(System.DateTime value);
		partial void OnCreatedDateChanged();
		partial void OnCreatedByChanging(string value);
		partial void OnCreatedByChanged();
		partial void OnFlagChanging(string value);
		partial void OnFlagChanged();
        partial void OnTypeChanging(System.Nullable<char> value);
        partial void OnTypeChanged();
		#endregion

		public Message()
		{
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._MessageBoxes = new EntitySet<MessageBox>(new Action<MessageBox>(this.attach_MessageBoxes), new Action<MessageBox>(this.detach_MessageBoxes));
			this._Message1 = default(EntityRef<Message>);
			OnCreated();
		}

		[Column(Name = @"MESSAGE_ID", Storage = "_MessageId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if (this._MessageId != value)
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}

		[Column(Name = @"PARENT_ID", Storage = "_ParentId", DbType = "NUMBER(10)")]
		public System.Nullable<long> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if (this._ParentId != value)
				{
					if (this._Message1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}

		[Column(Name = @"BODY", Storage = "_Body", CanBeNull = false, DbType = "NCLOB NOT NULL")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if (this._Body != value)
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}

		[Column(Name = @"CREATED_DATE", Storage = "_CreatedDate", CanBeNull = false, DbType = "TIMESTAMP(6) NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if (this._CreatedDate != value)
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}

		[Column(Name = @"CREATED_BY", Storage = "_CreatedBy", CanBeNull = false, DbType = "NVARCHAR2(512) NOT NULL")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if (this._CreatedBy != value)
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}

		[Column(Name = @"FLAG", Storage = "_Flag", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if (this._Flag != value)
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
        [Column(Name = @"TYPE", Storage = "_Type", DbType = "CHAR(1)")]
        public System.Nullable<char> Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

		[Association(Name = "Message_File", Storage = "_Files", OtherKey = "MessageId")]
		public EntitySet<File> Files
		{
			get
			{

				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}

		[Association(Name = "Message_Message", Storage = "_Messages", OtherKey = "ParentId")]
		public EntitySet<Message> Messages
		{
			get
			{

				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}

		[Association(Name = "Message_MessageBox", Storage = "_MessageBoxes", OtherKey = "MessageId")]
		public EntitySet<MessageBox> MessageBoxes
		{
			get
			{

				return this._MessageBoxes;
			}
			set
			{
				this._MessageBoxes.Assign(value);
			}
		}

		[Association(Name = "Message_Message", Storage = "_Message1", ThisKey = "ParentId", IsForeignKey = true)]
		public Message Message1
		{
			get
			{
				return this._Message1.Entity;
			}
			set
			{
				Message previousValue = this._Message1.Entity;
				if (((previousValue != value)
							|| (this._Message1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message1.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._Message1.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._ParentId = value.MessageId;
					}
					else
					{
						this._ParentId = default(System.Nullable<long>);
					}
					this.SendPropertyChanged("Message1");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}

		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}

		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}

		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Message1 = this;
		}

		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.Message1 = null;
		}

		private void attach_MessageBoxes(MessageBox entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}

		private void detach_MessageBoxes(MessageBox entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}

	[Table(Name = @"VDMS.V2_DATA_MESSAGE_BOX")]
	public partial class MessageBox : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private long _MessageBoxId;

		private long _MessageId;

		private string _FromUser;

		private string _ToUser;

		private string _Flag;

		private string _Position;

		private EntityRef<Message> _Message;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnMessageBoxIdChanging(long value);
		partial void OnMessageBoxIdChanged();
		partial void OnMessageIdChanging(long value);
		partial void OnMessageIdChanged();
		partial void OnFromUserChanging(string value);
		partial void OnFromUserChanged();
		partial void OnToUserChanging(string value);
		partial void OnToUserChanged();
		partial void OnFlagChanging(string value);
		partial void OnFlagChanged();
		partial void OnPositionChanging(string value);
		partial void OnPositionChanged();
		#endregion

		public MessageBox()
		{
			this._Message = default(EntityRef<Message>);
			OnCreated();
		}

		[Column(Name = @"MESSAGE_BOX_ID", Storage = "_MessageBoxId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "NUMBER(10) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
		public long MessageBoxId
		{
			get
			{
				return this._MessageBoxId;
			}
			set
			{
				if (this._MessageBoxId != value)
				{
					this.OnMessageBoxIdChanging(value);
					this.SendPropertyChanging();
					this._MessageBoxId = value;
					this.SendPropertyChanged("MessageBoxId");
					this.OnMessageBoxIdChanged();
				}
			}
		}

		[Column(Name = @"MESSAGE_ID", Storage = "_MessageId", CanBeNull = false, DbType = "NUMBER(10) NOT NULL")]
		public long MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if (this._MessageId != value)
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}

		[Column(Name = @"FROM_USER", Storage = "_FromUser", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string FromUser
		{
			get
			{
				return this._FromUser;
			}
			set
			{
				if (this._FromUser != value)
				{
					this.OnFromUserChanging(value);
					this.SendPropertyChanging();
					this._FromUser = value;
					this.SendPropertyChanged("FromUser");
					this.OnFromUserChanged();
				}
			}
		}

		[Column(Name = @"TO_USER", Storage = "_ToUser", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
		public string ToUser
		{
			get
			{
				return this._ToUser;
			}
			set
			{
				if (this._ToUser != value)
				{
					this.OnToUserChanging(value);
					this.SendPropertyChanging();
					this._ToUser = value;
					this.SendPropertyChanged("ToUser");
					this.OnToUserChanged();
				}
			}
		}

		[Column(Name = @"FLAG", Storage = "_Flag", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if (this._Flag != value)
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}

		[Column(Name = @"POSITION", Storage = "_Position", CanBeNull = false, DbType = "CHAR(1) NOT NULL")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if (this._Position != value)
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}

		[Association(Name = "Message_MessageBox", Storage = "_Message", ThisKey = "MessageId", IsForeignKey = true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value)
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.MessageBoxes.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.MessageBoxes.Add(this);
						this._MessageId = value.MessageId;
					}
					else
					{
						this._MessageId = default(long);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if (this.PropertyChanging != null)
				this.PropertyChanging(this, emptyChangingEventArgs);
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
